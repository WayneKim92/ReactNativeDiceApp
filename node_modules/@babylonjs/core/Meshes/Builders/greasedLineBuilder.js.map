{"version":3,"file":"greasedLineBuilder.js","sourceRoot":"","sources":["../../../../../dev/core/src/Meshes/Builders/greasedLineBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { StandardMaterial } from \"./../../Materials/standardMaterial\";\r\nimport { PBRMaterial } from \"../../Materials/PBR/pbrMaterial\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { GreasedLineMesh } from \"../GreasedLine/greasedLineMesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { Color3 } from \"../../Maths/math.color\";\r\nimport { GreasedLineSimpleMaterial } from \"../../Materials/GreasedLine/greasedLineSimpleMaterial\";\r\nimport { GreasedLineTools } from \"../../Misc/greasedLineTools\";\r\nimport type { GreasedLineMeshOptions } from \"../GreasedLine/greasedLineBaseMesh\";\r\nimport { GreasedLineRibbonAutoDirectionMode, GreasedLineRibbonFacesMode, GreasedLineRibbonPointsMode } from \"../GreasedLine/greasedLineBaseMesh\";\r\nimport { GreasedLineRibbonMesh } from \"../GreasedLine/greasedLineRibbonMesh\";\r\nimport type { GreasedLineMaterialOptions } from \"../../Materials/GreasedLine/greasedLineMaterialInterfaces\";\r\nimport { GreasedLineMeshMaterialType } from \"../../Materials/GreasedLine/greasedLineMaterialInterfaces\";\r\nimport { GreasedLinePluginMaterial } from \"../../Materials/GreasedLine/greasedLinePluginMaterial\";\r\nimport { GreasedLineMaterialDefaults } from \"../../Materials/GreasedLine/greasedLineMaterialDefaults\";\r\n\r\n/**\r\n * How are the colors distributed along the color table\r\n * {@link https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line#colors-and-colordistribution}\r\n */\r\nexport enum GreasedLineMeshColorDistribution {\r\n    /**\r\n     * Do no modify the color table\r\n     */\r\n    COLOR_DISTRIBUTION_NONE = 0,\r\n    /**\r\n     * Repeat the colors until the color table is full\r\n     */\r\n    COLOR_DISTRIBUTION_REPEAT = 1,\r\n    /**\r\n     * Distribute the colors evenly through the color table\r\n     */\r\n    COLOR_DISTRIBUTION_EVEN = 2,\r\n    /**\r\n     * Put the colors to start of the color table a fill the rest with the default color\r\n     */\r\n    COLOR_DISTRIBUTION_START = 3,\r\n    /**\r\n     * Put the colors to the end of the color table and fill the rest with the default color\r\n     */\r\n    COLOR_DISTRIBUTION_END = 4,\r\n    /**\r\n     * Put the colors to start and to the end of the color table and fill the gap between with the default color\r\n     */\r\n    COLOR_DISTRIBUTION_START_END = 5,\r\n}\r\n\r\n/**\r\n * How are the widths distributed along the width table\r\n * {@link https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line#widths-and-widthdistribution}\r\n */\r\nexport enum GreasedLineMeshWidthDistribution {\r\n    /**\r\n     * Do no modify the width table\r\n     */\r\n    WIDTH_DISTRIBUTION_NONE = 0,\r\n    /**\r\n     * Repeat the widths until the width table is full\r\n     */\r\n    WIDTH_DISTRIBUTION_REPEAT = 1,\r\n    /**\r\n     * Distribute the widths evenly through the width table\r\n     */\r\n    WIDTH_DISTRIBUTION_EVEN = 2,\r\n    /**\r\n     * Put the widths to start of the width table a fill the rest with the default width\r\n     */\r\n    WIDTH_DISTRIBUTION_START = 3,\r\n    /**\r\n     * Put the widths to the end of the width table and fill the rest with the default width\r\n     */\r\n    WIDTH_DISTRIBUTION_END = 4,\r\n    /**\r\n     * Put the widths to start and to the end of the width table and fill the gap between with the default width\r\n     */\r\n    WIDTH_DISTRIBUTION_START_END = 5,\r\n}\r\n\r\n/**\r\n * Material options for GreasedLineBuilder\r\n */\r\nexport interface GreasedLineMaterialBuilderOptions extends GreasedLineMaterialOptions {\r\n    /**\r\n     * If set to true a new material will be created and a new material plugin will be attached\r\n     * to the material. The material will be set on the mesh. If the instance option is specified in the mesh options,\r\n     * no material will be created/assigned. Defaults to true.\r\n     */\r\n    createAndAssignMaterial?: boolean;\r\n    /**\r\n     * Distribution of the colors if the color table contains fewer entries than needed. Defaults to GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_START\r\n     * @see CompleteGreasedLineColorTable\r\n     */\r\n    colorDistribution?: GreasedLineMeshColorDistribution;\r\n}\r\n\r\n/**\r\n * Line mesh options for GreasedLineBuilder\r\n */\r\nexport interface GreasedLineMeshBuilderOptions extends GreasedLineMeshOptions {\r\n    /**\r\n     * Distribution of the widths if the width table contains fewer entries than needed. Defaults to GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_START\r\n     * @see CompleteGreasedLineWidthTable\r\n     */\r\n    widthDistribution?: GreasedLineMeshWidthDistribution;\r\n}\r\n\r\n/**\r\n * Builder functions for creating GreasedLineMeshes\r\n */\r\n\r\n/**\r\n * Creates a new @see GreasedLinePluginMaterial\r\n * @param name name of the material\r\n * @param options material options @see GreasedLineMaterialOptions\r\n * @param scene scene or null to use the last scene\r\n * @returns StandardMaterial or PBRMaterial with the @see GreasedLinePluginMaterial attached to it\r\n */\r\nexport function CreateGreasedLineMaterial(name: string, options: GreasedLineMaterialOptions, scene: Nullable<Scene>) {\r\n    scene = <Scene>(scene ?? EngineStore.LastCreatedScene);\r\n\r\n    let material;\r\n    switch (options.materialType) {\r\n        case GreasedLineMeshMaterialType.MATERIAL_TYPE_PBR:\r\n            material = new PBRMaterial(name, scene);\r\n            new GreasedLinePluginMaterial(material, scene, options);\r\n            break;\r\n        case GreasedLineMeshMaterialType.MATERIAL_TYPE_SIMPLE:\r\n            material = new GreasedLineSimpleMaterial(name, scene, options);\r\n            break;\r\n        default:\r\n            material = new StandardMaterial(name, scene);\r\n            new GreasedLinePluginMaterial(material, scene, options);\r\n            break;\r\n    }\r\n\r\n    return material;\r\n}\r\n\r\n/**\r\n * Creates a GreasedLine mesh\r\n * @param name name of the mesh\r\n * @param options options for the mesh\r\n * @param materialOptions material options for the mesh\r\n * @param scene scene where the mesh will be created\r\n * @returns instance of GreasedLineMesh\r\n */\r\nexport function CreateGreasedLine(name: string, options: GreasedLineMeshBuilderOptions, materialOptions?: Nullable<GreasedLineMaterialBuilderOptions>, scene?: Nullable<Scene>) {\r\n    scene = <Scene>(scene ?? EngineStore.LastCreatedScene);\r\n\r\n    let instance;\r\n    const allPoints = GreasedLineTools.ConvertPoints(options.points);\r\n\r\n    options.widthDistribution = options.widthDistribution ?? GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_START;\r\n    if (options.ribbonOptions) {\r\n        options.ribbonOptions.facesMode = options.ribbonOptions.facesMode ?? GreasedLineRibbonFacesMode.FACES_MODE_SINGLE_SIDED_NO_BACKFACE_CULLING;\r\n        options.ribbonOptions.pointsMode = options.ribbonOptions.pointsMode ?? GreasedLineRibbonPointsMode.POINTS_MODE_POINTS;\r\n        options.ribbonOptions.directionsAutoMode =\r\n            options.ribbonOptions.directionsAutoMode ??\r\n            (options.ribbonOptions.directions ? GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_NONE : GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_FROM_FIRST_SEGMENT);\r\n    }\r\n\r\n    materialOptions = materialOptions ?? {\r\n        color: GreasedLineMaterialDefaults.DEFAULT_COLOR,\r\n    };\r\n    materialOptions.createAndAssignMaterial = materialOptions.createAndAssignMaterial ?? true;\r\n    materialOptions.colorDistribution = materialOptions?.colorDistribution ?? GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_START;\r\n    materialOptions.materialType = materialOptions.materialType ?? GreasedLineMeshMaterialType.MATERIAL_TYPE_STANDARD;\r\n\r\n    let length = 0;\r\n    if (Array.isArray(allPoints[0])) {\r\n        allPoints.forEach((points) => {\r\n            length += points.length / 3;\r\n        });\r\n    }\r\n\r\n    const widths = CompleteGreasedLineWidthTable(length, options.widths ?? [], options.widthDistribution);\r\n\r\n    const colors = materialOptions?.colors\r\n        ? CompleteGreasedLineColorTable(length, materialOptions.colors, materialOptions.colorDistribution, materialOptions.color ?? GreasedLineMaterialDefaults.DEFAULT_COLOR)\r\n        : undefined;\r\n\r\n    // create new mesh if instance is not defined\r\n    const initialGreasedLineOptions: GreasedLineMeshOptions = {\r\n        points: allPoints,\r\n        updatable: options.updatable,\r\n        widths,\r\n        lazy: options.lazy,\r\n        ribbonOptions: options.ribbonOptions,\r\n        uvs: options.uvs,\r\n        colorPointers: options.colorPointers,\r\n    };\r\n\r\n    if (initialGreasedLineOptions.ribbonOptions) {\r\n        if (initialGreasedLineOptions.ribbonOptions.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_POINTS) {\r\n            initialGreasedLineOptions.ribbonOptions.width = materialOptions.width ?? initialGreasedLineOptions.ribbonOptions.width ?? GreasedLineMaterialDefaults.DEFAULT_WIDTH;\r\n        }\r\n    }\r\n\r\n    if (!options.instance) {\r\n        instance = initialGreasedLineOptions.ribbonOptions\r\n            ? new GreasedLineRibbonMesh(name, scene, initialGreasedLineOptions)\r\n            : new GreasedLineMesh(name, scene, initialGreasedLineOptions);\r\n\r\n        if (materialOptions) {\r\n            const initialMaterialOptions: GreasedLineMaterialOptions = {\r\n                materialType: materialOptions.materialType,\r\n                dashCount: materialOptions.dashCount,\r\n                dashOffset: materialOptions.dashOffset,\r\n                dashRatio: materialOptions.dashRatio,\r\n                resolution: materialOptions.resolution,\r\n                sizeAttenuation: materialOptions.sizeAttenuation,\r\n                useColors: materialOptions.useColors,\r\n                useDash: materialOptions.useDash,\r\n                visibility: materialOptions.visibility,\r\n                width: materialOptions.width,\r\n                color: materialOptions.color,\r\n                colorMode: materialOptions.colorMode,\r\n                colorsSampling: materialOptions.colorsSampling,\r\n                colorDistributionType: materialOptions.colorDistributionType,\r\n                colors,\r\n                cameraFacing: !options.ribbonOptions,\r\n                colorsTexture: materialOptions.colorsTexture,\r\n            };\r\n\r\n            if (materialOptions.createAndAssignMaterial) {\r\n                const material = CreateGreasedLineMaterial(name, initialMaterialOptions, scene);\r\n                instance.material = material;\r\n\r\n                if (options.ribbonOptions?.facesMode === GreasedLineRibbonFacesMode.FACES_MODE_SINGLE_SIDED_NO_BACKFACE_CULLING) {\r\n                    material.backFaceCulling = false;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // update the data on the mesh instance\r\n        instance = options.instance;\r\n        if (instance instanceof GreasedLineRibbonMesh) {\r\n            instance.addPoints(allPoints, initialGreasedLineOptions);\r\n        } else {\r\n            const currentWidths = instance.widths;\r\n\r\n            if (currentWidths) {\r\n                const newWidths = currentWidths.slice();\r\n                for (const w of widths) {\r\n                    newWidths.push(w);\r\n                }\r\n                instance.widths = newWidths;\r\n            } else {\r\n                instance.widths = widths;\r\n            }\r\n            instance.addPoints(allPoints);\r\n        }\r\n    }\r\n\r\n    // add colors\r\n    // it will merge if any colors already on the instance\r\n    if (colors && options.instance) {\r\n        if (options.instance.greasedLineMaterial) {\r\n            const currentColors = options.instance.greasedLineMaterial.colors;\r\n            if (currentColors) {\r\n                const newColors = currentColors.concat(colors);\r\n                options.instance.greasedLineMaterial.setColors(newColors, instance.isLazy());\r\n            }\r\n        }\r\n    }\r\n\r\n    return instance;\r\n}\r\n\r\n/**\r\n * Completes the width table/fills the missing entries. It means it creates a width entry for every point of the line mesh.\r\n * You can provide more points the widths when creating the mesh. This function will fill the empty entries.\r\n * The algorithm used to fill the empty entries can be\r\n * GreasedLineMeshWidthDistribution.REPEAT - the width table will be repeatedly copied to the empty values [wL, wU] = [wL, wU, wL, wU, wL, wU, wL, wU, ...]\r\n * GreasedLineMeshWidthDistribution.EVEN - the width table will be evenly copied to the empty values [wL, wU] = [wL, wL, wL, wL, wU, wU, wU, wU]\r\n * GreasedLineMeshWidthDistribution.START - the width table will be copied at the start of the empty values\r\n * and rest will be filled width the default width upper and default width lower values [wU, wL] = [wL, wU, dwL, dwU, dwL, dwU, dwL, dwU]\r\n * GreasedLineMeshWidthDistribution.END - the width table will be copied at the end of the empty values\r\n * and rest will be filled width the default values [wL, wU] = [wL, wU, dwL, dwU, dwL, dwU, wL, wU]\r\n * @param pointCount number of points of the line mesh\r\n * @param widths array of widths [widhtLower, widthUpper, widthLower, widthUpper ...]. Two widths (lower/upper) per point.\r\n * @param widthsDistribution how to distribute widths if the widths array has fewer entries than pointCount\r\n * @param defaultWidthUpper the default value which will be used to fill empty width entries - upper width\r\n * @param defaultWidthLower the default value which will be used to fill empty width entries - lower width\r\n * @returns completed width table.\r\n */\r\nexport function CompleteGreasedLineWidthTable(\r\n    pointCount: number,\r\n    widths: number[],\r\n    widthsDistribution: GreasedLineMeshWidthDistribution,\r\n    defaultWidthUpper = 1,\r\n    defaultWidthLower = 1\r\n): number[] {\r\n    const missingCount = pointCount - widths.length / 2;\r\n\r\n    const widthsData: number[] = [];\r\n    if (missingCount < 0) {\r\n        return widths.slice(0, pointCount * 2);\r\n    }\r\n\r\n    // is the width table shorter than the point table?\r\n    if (missingCount > 0) {\r\n        if (widths.length % 2 != 0) {\r\n            widths.push(defaultWidthUpper);\r\n        }\r\n        // it is, fill in the missing elements\r\n        if (widthsDistribution === GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_START_END) {\r\n            const halfCount = Math.floor(widths.length / 2);\r\n\r\n            // start sector\r\n            for (let i = 0, j = 0; i < halfCount - 1; i++) {\r\n                widthsData.push(widths[j++]);\r\n                widthsData.push(widths[j++]);\r\n            }\r\n\r\n            // middle sector\r\n            const widthL = widths[halfCount / 2];\r\n            const widthU = widths[halfCount / 2 + 1];\r\n            for (let i = 0; i < missingCount; i++) {\r\n                widthsData.push(widthU);\r\n                widthsData.push(widthL);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = halfCount; i < widths.length; i += 2) {\r\n                widthsData.push(widths[i]);\r\n                widthsData.push(widths[i + 1]);\r\n            }\r\n        } else if (widthsDistribution === GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_START) {\r\n            // start sector\r\n            for (let i = 0; i < widths.length; i += 2) {\r\n                widthsData.push(widths[i]);\r\n                widthsData.push(widths[i + 1]);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = 0; i < missingCount; i++) {\r\n                widthsData.push(defaultWidthUpper);\r\n                widthsData.push(defaultWidthLower);\r\n            }\r\n        } else if (widthsDistribution === GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_END) {\r\n            // start sector\r\n            for (let i = 0; i < missingCount; i++) {\r\n                widthsData.push(defaultWidthUpper);\r\n                widthsData.push(defaultWidthLower);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = 0; i < widths.length; i += 2) {\r\n                widthsData.push(widths[i]);\r\n                widthsData.push(widths[i + 1]);\r\n            }\r\n        } else if (widthsDistribution === GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_REPEAT) {\r\n            let i = 0;\r\n            for (let x = 0; x < pointCount; x++) {\r\n                widthsData.push(widths[i++]);\r\n                widthsData.push(widths[i++]);\r\n\r\n                if (i === widths.length) {\r\n                    i = 0;\r\n                }\r\n            }\r\n        } else if (widthsDistribution === GreasedLineMeshWidthDistribution.WIDTH_DISTRIBUTION_EVEN) {\r\n            let j = 0;\r\n            const widthsectorLength = widths.length / ((pointCount - 1) * 2);\r\n            for (let x = 0; x < pointCount; x++) {\r\n                const i = Math.floor(j);\r\n\r\n                widthsData.push(widths[i]);\r\n                widthsData.push(widths[i + 1]);\r\n\r\n                j += widthsectorLength;\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < widths.length; i++) {\r\n            widthsData.push(widths[i]);\r\n        }\r\n    }\r\n\r\n    return widthsData;\r\n}\r\n\r\n/**\r\n * Completes the color table/fill the missing color entries. It means it creates a color entry for every point of the line mesh.\r\n * You can provide more points the colors when creating the mesh. This function will fill the empty entries.\r\n * The algorithm used to fill the empty entries can be\r\n * GreasedLineMesColorhDistribution.REPEAT - the color table will be repeatedly copied to the empty values [c1, c2] = [c1, c2, c1, c2, c1, c2, c1, c2]\r\n * GreasedLineMesColorhDistribution.EVEN - the color table will be evenly copied to the empty values [c1, c2] = [c1, c1, c1, c1, c2, c2, c2, c2]\r\n * GreasedLineMesColorhDistribution.START - the color table will be copied at the start of the empty values\r\n * and rest will be filled color the default color value [c1, c2] = [c1, c2, dc, dc, dc, dc, dc, dc]\r\n * GreasedLineMesColorhDistribution.START_END - the color table will be copied at the start and the end of the empty values\r\n * and rest will be filled color the default color value [c1, c2] = [c1, c2, dc, dc, dc, dc, c1, c2]\r\n * @param pointCount number of points of the line mesh\r\n * @param colors array of Color3 for the color table\r\n * @param colorDistribution how to distribute colors if the colors array has fewer entries than pointCount\r\n * @param defaultColor default color to be used to fill empty entries in the color table\r\n * @returns completed array of Color3s\r\n */\r\nexport function CompleteGreasedLineColorTable(pointCount: number, colors: Color3[], colorDistribution: GreasedLineMeshColorDistribution, defaultColor: Color3): Color3[] {\r\n    pointCount = Math.max(colors.length, pointCount);\r\n    const missingCount = pointCount - colors.length;\r\n    if (missingCount < 0) {\r\n        return colors.slice(0, pointCount);\r\n    }\r\n\r\n    const colorsData: Color3[] = [];\r\n    // is the color table shorter than the point table?\r\n    if (missingCount > 0) {\r\n        // it is, fill in the missing elements\r\n        if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_START_END) {\r\n            const halfCount = Math.floor(colors.length / 2);\r\n\r\n            // start sector\r\n            for (let i = 0; i < halfCount; i++) {\r\n                colorsData.push(colors[i]);\r\n            }\r\n\r\n            // middle sector\r\n            for (let i = 0; i < missingCount - 1; i++) {\r\n                colorsData.push(defaultColor);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = halfCount; i < colors.length; i++) {\r\n                colorsData.push(colors[i]);\r\n            }\r\n        } else if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_START) {\r\n            // start sector\r\n            for (let i = 0; i < colors.length; i++) {\r\n                colorsData.push(colors[i]);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = 0; i < missingCount; i++) {\r\n                colorsData.push(defaultColor);\r\n            }\r\n        } else if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_END) {\r\n            // start sector\r\n            for (let i = 0; i < missingCount - 1; i++) {\r\n                colorsData.push(defaultColor);\r\n            }\r\n\r\n            // end sector\r\n            for (let i = 0; i < colors.length; i++) {\r\n                colorsData.push(colors[i]);\r\n            }\r\n        } else if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_REPEAT) {\r\n            let i = 0;\r\n            for (let x = 0; x < pointCount; x++) {\r\n                colorsData.push(colors[i]);\r\n\r\n                i++;\r\n\r\n                if (i === colors.length) {\r\n                    i = 0;\r\n                }\r\n            }\r\n        } else if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_EVEN) {\r\n            let j = 0;\r\n            const colorSectorLength = colors.length / (pointCount - 1);\r\n            for (let x = 0; x < pointCount - 1; x++) {\r\n                const i = Math.floor(j);\r\n\r\n                colorsData.push(colors[i]);\r\n\r\n                j += colorSectorLength;\r\n            }\r\n        } else if (colorDistribution === GreasedLineMeshColorDistribution.COLOR_DISTRIBUTION_NONE) {\r\n            for (let i = 0; i < colors.length; i++) {\r\n                colorsData.push(colors[i]);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < pointCount; i++) {\r\n            colorsData.push(colors[i]);\r\n        }\r\n    }\r\n\r\n    return colorsData;\r\n}\r\n"]}