{"version":3,"file":"greasedLineRibbonMesh.js","sourceRoot":"","sources":["../../../../../dev/core/src/Meshes/GreasedLine/greasedLineRibbonMesh.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { Buffer } from \"../../Buffers/buffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Node } from \"../../node\";\r\nimport { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport { GreasedLineTools } from \"../../Misc/greasedLineTools\";\r\nimport type { GreasedLineMeshOptions, GreasedLineRibbonOptions } from \"./greasedLineBaseMesh\";\r\nimport { GreasedLineBaseMesh, GreasedLineRibbonAutoDirectionMode, GreasedLineRibbonFacesMode, GreasedLineRibbonPointsMode } from \"./greasedLineBaseMesh\";\r\n\r\nMesh._GreasedLineRibbonMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n    return GreasedLineRibbonMesh.Parse(parsedMesh, scene);\r\n};\r\n\r\n/**\r\n * GreasedLineRibbonMesh\r\n * Use the GreasedLineBuilder.CreateGreasedLine function to create an instance of this class.\r\n */\r\nexport class GreasedLineRibbonMesh extends GreasedLineBaseMesh {\r\n    /**\r\n     * Default line width\r\n     */\r\n    public static DEFAULT_WIDTH = 0.1;\r\n\r\n    private static _RightHandedForwardReadOnlyQuaternion = Quaternion.RotationAxis(Vector3.RightHandedForwardReadOnly, Math.PI / 2);\r\n    private static _LeftHandedForwardReadOnlyQuaternion = Quaternion.RotationAxis(Vector3.LeftHandedForwardReadOnly, Math.PI / 2);\r\n    private static _LeftReadOnlyQuaternion = Quaternion.RotationAxis(Vector3.LeftReadOnly, Math.PI / 2);\r\n\r\n    /**\r\n     * Direction which the line segment will be thickened if drawn on the XY plane\r\n     */\r\n    public static DIRECTION_XY = Vector3.LeftHandedForwardReadOnly; // doesn't matter in which handed system the scene operates\r\n    /**\r\n     * Direction which the line segment will be thickened if drawn on the XZ plane\r\n     */\r\n    public static DIRECTION_XZ = Vector3.UpReadOnly;\r\n    /**\r\n     * Direction which the line segment will be thickened if drawn on the YZ plane\r\n     */\r\n    public static DIRECTION_YZ = Vector3.LeftReadOnly;\r\n\r\n    private _paths: Vector3[][];\r\n    private _pathsOptions: { options: GreasedLineMeshOptions; pathCount: number }[];\r\n    private _vSegmentLengths: number[][];\r\n    private _uSegmentLengths: number[][];\r\n    private _vTotalLengths: number[];\r\n    private _uTotalLengths: number[];\r\n\r\n    private _counters: number[];\r\n    private _slopes: number[];\r\n    private _ribbonWidths: number[];\r\n\r\n    /**\r\n     * GreasedLineRibbonMesh\r\n     * @param name name of the mesh\r\n     * @param scene the scene\r\n     * @param _options mesh options\r\n     * @param _pathOptions used internaly when parsing a serialized GreasedLineRibbonMesh\r\n     */\r\n    constructor(\r\n        public readonly name: string,\r\n        scene: Scene,\r\n        _options: GreasedLineMeshOptions,\r\n        _pathOptions?: { options: GreasedLineMeshOptions; pathCount: number }[]\r\n    ) {\r\n        super(name, scene, _options);\r\n\r\n        if (!_options.ribbonOptions) {\r\n            throw \"'GreasedLineMeshOptions.ribbonOptions' is not set.\";\r\n        }\r\n\r\n        this._paths = [];\r\n        this._counters = [];\r\n        this._slopes = [];\r\n        this._widths = _options.widths ?? [];\r\n        this._ribbonWidths = [];\r\n        this._pathsOptions = _pathOptions ?? [];\r\n\r\n        if (_options.points) {\r\n            this.addPoints(GreasedLineTools.ConvertPoints(_options.points), _options, !!_pathOptions);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the line. It doesn't rerenders the line if in lazy mode.\r\n     * @param points points table\r\n     */\r\n    public override addPoints(points: number[][], options: GreasedLineMeshOptions, hasPathOptions = false) {\r\n        if (!options.ribbonOptions) {\r\n            throw \"addPoints() on GreasedLineRibbonMesh instance requires 'GreasedLineMeshOptions.ribbonOptions'.\";\r\n        }\r\n\r\n        if (!hasPathOptions) {\r\n            this._pathsOptions.push({ options, pathCount: points.length });\r\n        }\r\n\r\n        super.addPoints(points, options);\r\n    }\r\n\r\n    /**\r\n     * \"GreasedLineRibbonMesh\"\r\n     * @returns \"GreasedLineRibbonMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"GreasedLineRibbonMesh\";\r\n    }\r\n\r\n    /**\r\n     * Return true if the line was created from two edge paths or one points path.\r\n     * In this case the line is always flat.\r\n     */\r\n    public get isFlatLine() {\r\n        return this._paths.length < 3;\r\n    }\r\n\r\n    /**\r\n     * Returns the slopes of the line at each point relative to the center of the line\r\n     */\r\n    get slopes() {\r\n        return this._slopes;\r\n    }\r\n\r\n    /**\r\n     * Set the slopes of the line at each point relative to the center of the line\r\n     */\r\n    set slopes(slopes: number[]) {\r\n        this._slopes = slopes;\r\n    }\r\n\r\n    protected _updateColorPointers() {\r\n        if (this._options.colorPointers) {\r\n            return;\r\n        }\r\n\r\n        let colorPointer = 0;\r\n        this._colorPointers = [];\r\n        for (let i = 0; i < this._pathsOptions.length; i++) {\r\n            const { options: pathOptions, pathCount } = this._pathsOptions[i];\r\n            const points = this._points[i];\r\n\r\n            if (pathOptions.ribbonOptions!.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_POINTS) {\r\n                for (let k = 0; k < pathCount; k++) {\r\n                    for (let j = 0; j < points.length; j += 3) {\r\n                        this._colorPointers.push(colorPointer);\r\n                        this._colorPointers.push(colorPointer++);\r\n                    }\r\n                }\r\n            } else {\r\n                for (let j = 0; j < points.length; j += 3) {\r\n                    for (let k = 0; k < pathCount; k++) {\r\n                        this._colorPointers.push(colorPointer);\r\n                    }\r\n                    colorPointer++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _updateWidths(): void {\r\n        super._updateWidthsWithValue(1);\r\n    }\r\n\r\n    protected _setPoints(points: number[][], _options: GreasedLineMeshOptions) {\r\n        if (!this._options.ribbonOptions) {\r\n            throw \"No 'GreasedLineMeshOptions.ribbonOptions' provided.\";\r\n        }\r\n        this._points = points;\r\n        this._options.points = points;\r\n\r\n        this._initGreasedLine();\r\n\r\n        let indiceOffset = 0;\r\n        let directionPlanes: Vector3[];\r\n        for (let i = 0, c = 0; i < this._pathsOptions.length; i++) {\r\n            const { options: pathOptions, pathCount } = this._pathsOptions[i];\r\n            const subPoints = points.slice(c, c + pathCount);\r\n            c += pathCount;\r\n            if (pathOptions.ribbonOptions?.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_PATHS) {\r\n                indiceOffset = this._preprocess(GreasedLineTools.ToVector3Array(subPoints) as Vector3[][], indiceOffset, pathOptions);\r\n            } else {\r\n                if (pathOptions.ribbonOptions?.directionsAutoMode === GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_NONE) {\r\n                    if (!pathOptions.ribbonOptions!.directions) {\r\n                        throw \"In GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_NONE 'GreasedLineMeshOptions.ribbonOptions.directions' must be defined.\";\r\n                    }\r\n                    directionPlanes = GreasedLineRibbonMesh._GetDirectionPlanesFromDirectionsOption(subPoints.length, pathOptions.ribbonOptions!.directions);\r\n                }\r\n                subPoints.forEach((p, idx) => {\r\n                    const pathArray = GreasedLineRibbonMesh._ConvertToRibbonPath(\r\n                        p,\r\n                        pathOptions.ribbonOptions!,\r\n                        this._scene.useRightHandedSystem,\r\n                        directionPlanes ? directionPlanes[idx] : directionPlanes\r\n                    );\r\n                    indiceOffset = this._preprocess(pathArray, indiceOffset, pathOptions);\r\n                });\r\n            }\r\n        }\r\n\r\n        if (!this._lazy) {\r\n            this._createVertexBuffers();\r\n            this.refreshBoundingInfo();\r\n        }\r\n    }\r\n\r\n    private static _GetDirectionPlanesFromDirectionsOption(count: number, directions: Vector3 | Vector3[]) {\r\n        if (Array.isArray(directions)) {\r\n            return directions;\r\n        }\r\n\r\n        return new Array(count).fill(directions) as Vector3[];\r\n    }\r\n\r\n    private static _CreateRibbonVertexData(pathArray: Vector3[][], options: GreasedLineMeshOptions) {\r\n        const numOfPaths = pathArray.length;\r\n        if (numOfPaths < 2) {\r\n            throw \"Minimum of two paths are required to create a GreasedLineRibbonMesh.\";\r\n        }\r\n\r\n        const positions = [];\r\n        const indices = [];\r\n\r\n        const path = pathArray[0];\r\n        for (let i = 0; i < path.length; i++) {\r\n            for (let pi = 0; pi < pathArray.length; pi++) {\r\n                const v = pathArray[pi][i];\r\n                positions.push(v.x, v.y, v.z);\r\n            }\r\n        }\r\n\r\n        const v: number[] = [1, 0, numOfPaths];\r\n        const doubleSided = options.ribbonOptions?.facesMode === GreasedLineRibbonFacesMode.FACES_MODE_DOUBLE_SIDED ?? false;\r\n\r\n        const closePath = options.ribbonOptions?.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_PATHS && options.ribbonOptions.closePath;\r\n        if (numOfPaths > 2) {\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n                v[0] = 1 + numOfPaths * i;\r\n                v[1] = numOfPaths * i;\r\n                v[2] = (i + 1) * numOfPaths;\r\n                for (let pi = 0; pi < (numOfPaths - 1) * 2; pi++) {\r\n                    if (pi % 2 !== 0) {\r\n                        v[2] += 1;\r\n                    }\r\n                    if (pi % 2 === 0 && pi > 0) {\r\n                        v[0] += 1;\r\n                        v[1] += 1;\r\n                    }\r\n                    indices.push(v[1] + (pi % 2 !== 0 ? numOfPaths : 0), v[0], v[2]);\r\n                    if (doubleSided) {\r\n                        indices.push(v[0], v[1] + (pi % 2 !== 0 ? numOfPaths : 0), v[2]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < positions.length / 3 - 3; i += 2) {\r\n                indices.push(i, i + 1, i + 2);\r\n                indices.push(i + 2, i + 1, i + 3);\r\n                if (doubleSided) {\r\n                    indices.push(i + 1, i, i + 2);\r\n                    indices.push(i + 1, i + 2, i + 3);\r\n                }\r\n            }\r\n        }\r\n        if (closePath) {\r\n            let lastIndice = numOfPaths * (path.length - 1);\r\n            for (let pi = 0; pi < numOfPaths - 1; pi++) {\r\n                indices.push(lastIndice, pi + 1, pi);\r\n                indices.push(lastIndice + 1, pi + 1, lastIndice);\r\n                if (doubleSided) {\r\n                    indices.push(pi, pi + 1, lastIndice);\r\n                    indices.push(lastIndice, pi + 1, lastIndice + 1);\r\n                }\r\n                lastIndice++;\r\n            }\r\n        }\r\n\r\n        return {\r\n            positions,\r\n            indices,\r\n        };\r\n    }\r\n\r\n    private _preprocess(pathArray: Vector3[][], indiceOffset: number, options: GreasedLineMeshOptions) {\r\n        this._paths = pathArray;\r\n\r\n        const ribbonVertexData = GreasedLineRibbonMesh._CreateRibbonVertexData(pathArray, options);\r\n\r\n        const positions = ribbonVertexData.positions;\r\n\r\n        if (!this._options.widths) {\r\n            throw \"No 'GreasedLineMeshOptions.widths' table is specified.\";\r\n        }\r\n\r\n        for (const p of positions) {\r\n            this._vertexPositions.push(p);\r\n        }\r\n\r\n        let pathArrayCopy = pathArray;\r\n        if (options.ribbonOptions?.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_PATHS && options.ribbonOptions.closePath) {\r\n            pathArrayCopy = [];\r\n            for (let i = 0; i < pathArray.length; i++) {\r\n                const pathCopy = pathArray[i].slice();\r\n                pathCopy.push(pathArray[i][0].clone());\r\n                pathArrayCopy.push(pathCopy);\r\n            }\r\n        }\r\n\r\n        this._calculateSegmentLengths(pathArrayCopy);\r\n\r\n        const pathArrayLength = pathArrayCopy.length;\r\n        const previousCounters = new Array(pathArrayLength).fill(0);\r\n        for (let i = 0; i < pathArrayCopy[0].length; i++) {\r\n            let v = 0;\r\n            for (let pi = 0; pi < pathArrayLength; pi++) {\r\n                const counter = previousCounters[pi] + this._vSegmentLengths[pi][i] / this._vTotalLengths[pi];\r\n                this._counters.push(counter);\r\n                this._uvs.push(counter, v);\r\n\r\n                previousCounters[pi] = counter;\r\n                v += this._uSegmentLengths[i][pi] / this._uTotalLengths[i];\r\n            }\r\n        }\r\n\r\n        for (let i = 0, c = 0; i < pathArrayCopy[0].length; i++) {\r\n            const widthLower = this._uSegmentLengths[i][0] / 2;\r\n            const widthUpper = this._uSegmentLengths[i][pathArrayLength - 1] / 2;\r\n            this._ribbonWidths.push(((this._widths[c++] ?? 1) - 1) * widthLower);\r\n            for (let pi = 0; pi < pathArrayLength - 2; pi++) {\r\n                this._ribbonWidths.push(0);\r\n            }\r\n            this._ribbonWidths.push(((this._widths[c++] ?? 1) - 1) * widthUpper);\r\n        }\r\n\r\n        const slopes =\r\n            options.ribbonOptions?.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_PATHS\r\n                ? new Array(pathArrayCopy[0].length * pathArrayCopy.length * 6).fill(0)\r\n                : GreasedLineRibbonMesh._CalculateSlopes(pathArrayCopy);\r\n        for (const s of slopes) {\r\n            this._slopes.push(s);\r\n        }\r\n\r\n        if (ribbonVertexData.indices) {\r\n            for (let i = 0; i < ribbonVertexData.indices.length; i++) {\r\n                this._indices.push(ribbonVertexData.indices[i] + indiceOffset);\r\n            }\r\n        }\r\n        indiceOffset += positions.length / 3;\r\n\r\n        return indiceOffset;\r\n    }\r\n\r\n    private static _ConvertToRibbonPath(points: number[], ribbonInfo: GreasedLineRibbonOptions, rightHandedSystem: boolean, directionPlane?: Vector3) {\r\n        if (ribbonInfo.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_POINTS && !ribbonInfo.width) {\r\n            throw \"'GreasedLineMeshOptions.ribbonOptiosn.width' must be specified in GreasedLineRibbonPointsMode.POINTS_MODE_POINTS.\";\r\n        }\r\n        const path1 = [];\r\n        const path2 = [];\r\n        if (ribbonInfo.pointsMode === GreasedLineRibbonPointsMode.POINTS_MODE_POINTS) {\r\n            const width = ribbonInfo.width! / 2;\r\n            const pointVectors = GreasedLineTools.ToVector3Array(points) as Vector3[];\r\n            let direction: Nullable<Vector3> = null;\r\n            let fatDirection: Nullable<Vector3> = null;\r\n\r\n            if (ribbonInfo.directionsAutoMode === GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_FROM_FIRST_SEGMENT) {\r\n                // set the direction plane from the first line segment for the whole line\r\n                directionPlane = GreasedLineRibbonMesh._GetDirectionFromPoints(pointVectors[0], pointVectors[1], null);\r\n            }\r\n\r\n            for (let i = 0; i < pointVectors.length - (directionPlane ? 0 : 1); i++) {\r\n                const p1 = pointVectors[i];\r\n                const p2 = pointVectors[i + 1];\r\n\r\n                if (directionPlane) {\r\n                    direction = <Vector3>directionPlane;\r\n                } else if (ribbonInfo.directionsAutoMode === GreasedLineRibbonAutoDirectionMode.AUTO_DIRECTIONS_FROM_ALL_SEGMENTS) {\r\n                    direction = GreasedLineRibbonMesh._GetDirectionFromPoints(p1, p2, direction);\r\n                } else {\r\n                    // GreasedLineRibbonAutoDirectionMode.DIRECTION_ENHANCED\r\n                    const directionTemp = p2.subtract(p1);\r\n                    directionTemp.applyRotationQuaternionInPlace(\r\n                        directionTemp.x > directionTemp.y && directionTemp.x > directionTemp.z\r\n                            ? rightHandedSystem\r\n                                ? GreasedLineRibbonMesh._RightHandedForwardReadOnlyQuaternion\r\n                                : GreasedLineRibbonMesh._LeftHandedForwardReadOnlyQuaternion\r\n                            : GreasedLineRibbonMesh._LeftReadOnlyQuaternion\r\n                    );\r\n                    direction = directionTemp.normalize();\r\n                }\r\n\r\n                fatDirection = direction.multiplyByFloats(width, width, width);\r\n                path1.push(p1.add(fatDirection));\r\n                path2.push(p1.subtract(fatDirection));\r\n            }\r\n            if (!directionPlane) {\r\n                path1.push(pointVectors[pointVectors.length - 1].add(fatDirection!));\r\n                path2.push(pointVectors[pointVectors.length - 1].subtract(fatDirection!));\r\n            }\r\n        }\r\n        return [path1, path2];\r\n    }\r\n\r\n    private static _GetDirectionFromPoints(p1: Vector3, p2: Vector3, previousDirection: Nullable<Vector3>) {\r\n        // handle straight lines\r\n        if (p1.x === p2.x && (!previousDirection || previousDirection?.x === 1)) {\r\n            return GreasedLineRibbonMesh.DIRECTION_YZ;\r\n        }\r\n\r\n        if (p1.y === p2.y) {\r\n            return GreasedLineRibbonMesh.DIRECTION_XZ;\r\n        }\r\n\r\n        if (p1.z === p2.z) {\r\n            return GreasedLineRibbonMesh.DIRECTION_XY;\r\n        }\r\n\r\n        return GreasedLineRibbonMesh.DIRECTION_XZ;\r\n    }\r\n\r\n    /**\r\n     * Clones the GreasedLineRibbonMesh.\r\n     * @param name new line name\r\n     * @param newParent new parent node\r\n     * @returns cloned line\r\n     */\r\n    public clone(name: string = `${this.name}-cloned`, newParent?: Nullable<Node>) {\r\n        const lineOptions = this._createLineOptions();\r\n        const deepCopiedLineOptions: any = {};\r\n        const pathOptionsCloned: any = [];\r\n        DeepCopier.DeepCopy(this._pathsOptions, pathOptionsCloned, undefined, undefined, true);\r\n        DeepCopier.DeepCopy(lineOptions, deepCopiedLineOptions, [\"instance\"], undefined, true);\r\n\r\n        const cloned = new GreasedLineRibbonMesh(name, this._scene, <GreasedLineMeshOptions>deepCopiedLineOptions, pathOptionsCloned);\r\n        if (newParent) {\r\n            cloned.parent = newParent;\r\n        }\r\n\r\n        cloned.material = this.material;\r\n\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Serializes this GreasedLineRibbonMesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n        serializationObject.type = this.getClassName();\r\n\r\n        serializationObject.lineOptions = this._createLineOptions();\r\n        serializationObject.pathsOptions = this._pathsOptions;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized GreasedLineRibbonMesh\r\n     * @param parsedMesh the serialized GreasedLineRibbonMesh\r\n     * @param scene the scene to create the GreasedLineRibbonMesh in\r\n     * @returns the created GreasedLineRibbonMesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): Mesh {\r\n        const lineOptions = <GreasedLineMeshOptions>parsedMesh.lineOptions;\r\n        const name = <string>parsedMesh.name;\r\n        const pathOptions = parsedMesh.pathOptions;\r\n        const result = new GreasedLineRibbonMesh(name, scene, lineOptions, pathOptions);\r\n        return result;\r\n    }\r\n\r\n    protected _initGreasedLine() {\r\n        super._initGreasedLine();\r\n\r\n        this._paths = [];\r\n        this._counters = [];\r\n        this._slopes = [];\r\n        this._ribbonWidths = [];\r\n    }\r\n\r\n    private _calculateSegmentLengths(pathArray: Vector3[][]) {\r\n        const pathArrayLength = pathArray.length;\r\n        this._vSegmentLengths = new Array(pathArrayLength);\r\n        this._vTotalLengths = new Array(pathArrayLength);\r\n        let length = 0;\r\n        for (let pi = 0; pi < pathArrayLength; pi++) {\r\n            const points = pathArray[pi];\r\n            this._vSegmentLengths[pi] = [0]; // first point has 0 distance\r\n            length = 0;\r\n            for (let i = 0; i < points.length - 1; i++) {\r\n                const l = Math.abs(points[i].subtract(points[i + 1]).lengthSquared()); // it's ok to have lengthSquared() here\r\n                length += l;\r\n                this._vSegmentLengths[pi].push(l);\r\n            }\r\n            this._vTotalLengths[pi] = length;\r\n        }\r\n\r\n        const positionsLength = pathArray[0].length;\r\n        this._uSegmentLengths = new Array(positionsLength).fill([]);\r\n        this._uTotalLengths = new Array(positionsLength).fill([]);\r\n        const uLength = new Vector3();\r\n        for (let i = 0; i < positionsLength; i++) {\r\n            length = 0;\r\n            for (let pi = 1; pi < pathArrayLength; pi++) {\r\n                pathArray[pi][i].subtractToRef(pathArray[pi - 1][i], uLength);\r\n                const l = uLength.length(); // must be length()\r\n                length += l;\r\n                this._uSegmentLengths[i].push(l);\r\n            }\r\n            this._uTotalLengths[i] = length;\r\n        }\r\n    }\r\n\r\n    private static _CalculateSlopes(paths: Vector3[][]) {\r\n        const points1 = paths[0];\r\n        const points2 = paths.length === 2 ? paths[1] : paths[paths.length - 1];\r\n        const slopes: number[] = [];\r\n\r\n        const slope = new Vector3();\r\n        for (let i = 0; i < points1.length; i++) {\r\n            for (let pi = 0; pi < paths.length; pi++) {\r\n                if (pi === 0 || pi === paths.length - 1) {\r\n                    points1[i].subtract(points2[i]).normalizeToRef(slope);\r\n                    slopes.push(slope.x, slope.y, slope.z);\r\n                    slopes.push(-slope.x, -slope.y, -slope.z);\r\n                } else {\r\n                    slopes.push(0, 0, 0, 0, 0, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        return slopes;\r\n    }\r\n\r\n    protected _createVertexBuffers() {\r\n        this._uvs = this._options.uvs ?? this._uvs;\r\n        const vertexData = super._createVertexBuffers(this._options.ribbonOptions?.smoothShading);\r\n\r\n        const countersBuffer = new Buffer(this._engine, this._counters, this._updatable, 1);\r\n        this.setVerticesBuffer(countersBuffer.createVertexBuffer(\"grl_counters\", 0, 1));\r\n\r\n        const colorPointersBuffer = new Buffer(this._engine, this._colorPointers, this._updatable, 1);\r\n        this.setVerticesBuffer(colorPointersBuffer.createVertexBuffer(\"grl_colorPointers\", 0, 1));\r\n\r\n        const slopesBuffer = new Buffer(this._engine, this._slopes, this._updatable, 3);\r\n        this.setVerticesBuffer(slopesBuffer.createVertexBuffer(\"grl_slopes\", 0, 3));\r\n\r\n        const widthsBuffer = new Buffer(this._engine, this._ribbonWidths, this._updatable, 1);\r\n        this.setVerticesBuffer(widthsBuffer.createVertexBuffer(\"grl_widths\", 0, 1));\r\n        this._widthsBuffer = widthsBuffer;\r\n\r\n        return vertexData;\r\n    }\r\n}\r\n"]}