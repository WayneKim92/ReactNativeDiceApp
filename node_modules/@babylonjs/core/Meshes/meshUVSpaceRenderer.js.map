{"version":3,"file":"meshUVSpaceRenderer.js","sourceRoot":"","sources":["../../../../dev/core/src/Meshes/meshUVSpaceRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"./abstractMesh\";\r\nimport type { ThinTexture } from \"core/Materials/Textures/thinTexture\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\n\r\nimport \"../Shaders/meshUVSpaceRenderer.vertex\";\r\nimport \"../Shaders/meshUVSpaceRenderer.fragment\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @internal */\r\n        _meshUVSpaceRendererShader: Nullable<ShaderMaterial>;\r\n    }\r\n}\r\n\r\n/**\r\n * Options for the MeshUVSpaceRenderer\r\n * @since 5.49.1\r\n */\r\nexport interface IMeshUVSpaceRendererOptions {\r\n    /**\r\n     * Width of the texture. Default: 1024\r\n     */\r\n    width?: number;\r\n    /**\r\n     * Height of the texture. Default: 1024\r\n     */\r\n    height?: number;\r\n    /**\r\n     * Type of the texture. Default: Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n     */\r\n    textureType?: number;\r\n    /**\r\n     * Generate mip maps. Default: true\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Optimize UV allocation. Default: true\r\n     * If you plan to use the texture as a decal map and rotate / offset the texture, you should set this to false\r\n     */\r\n    optimizeUVAllocation?: boolean;\r\n}\r\n\r\n/**\r\n * Class used to render in the mesh UV space\r\n * @since 5.49.1\r\n */\r\nexport class MeshUVSpaceRenderer {\r\n    private _mesh: AbstractMesh;\r\n    private _scene: Scene;\r\n    private _options: Required<IMeshUVSpaceRendererOptions>;\r\n    private _textureCreatedInternally = false;\r\n\r\n    private static _GetShader(scene: Scene): ShaderMaterial {\r\n        if (!scene._meshUVSpaceRendererShader) {\r\n            const shader = new ShaderMaterial(\r\n                \"meshUVSpaceRendererShader\",\r\n                scene,\r\n                {\r\n                    vertex: \"meshUVSpaceRenderer\",\r\n                    fragment: \"meshUVSpaceRenderer\",\r\n                },\r\n                {\r\n                    attributes: [\"position\", \"normal\", \"uv\"],\r\n                    uniforms: [\"world\", \"projMatrix\"],\r\n                    samplers: [\"textureSampler\"],\r\n                    needAlphaBlending: true,\r\n                }\r\n            );\r\n            shader.backFaceCulling = false;\r\n            shader.alphaMode = Constants.ALPHA_COMBINE;\r\n\r\n            scene.onDisposeObservable.add(() => {\r\n                scene._meshUVSpaceRendererShader?.dispose();\r\n                scene._meshUVSpaceRendererShader = null;\r\n            });\r\n\r\n            scene._meshUVSpaceRendererShader = shader;\r\n        }\r\n\r\n        return scene._meshUVSpaceRendererShader;\r\n    }\r\n\r\n    private static _IsRenderTargetTexture(texture: ThinTexture | RenderTargetTexture): texture is RenderTargetTexture {\r\n        return (texture as RenderTargetTexture).renderList !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Clear color of the texture\r\n     */\r\n    public clearColor = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Target texture used for rendering\r\n     * If you don't set the property, a RenderTargetTexture will be created internally given the options provided to the constructor.\r\n     * If you provide a RenderTargetTexture, it will be used directly.\r\n     */\r\n    public texture: Texture;\r\n\r\n    /**\r\n     * Creates a new MeshUVSpaceRenderer\r\n     * @param mesh The mesh used for the source UV space\r\n     * @param scene The scene the mesh belongs to\r\n     * @param options The options to use when creating the texture\r\n     */\r\n    constructor(mesh: AbstractMesh, scene: Scene, options?: IMeshUVSpaceRendererOptions) {\r\n        this._mesh = mesh;\r\n        this._scene = scene;\r\n        this._options = {\r\n            width: 1024,\r\n            height: 1024,\r\n            textureType: Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            generateMipMaps: true,\r\n            optimizeUVAllocation: true,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if the texture is ready to be used\r\n     * @returns true if the texture is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        if (!this.texture) {\r\n            this._createDiffuseRTT();\r\n        }\r\n\r\n        return MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) ? this.texture.isReadyForRendering() : this.texture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Projects and renders a texture in the mesh UV space\r\n     * @param texture The texture\r\n     * @param position The position of the center of projection (world space coordinates)\r\n     * @param normal The direction of the projection (world space coordinates)\r\n     * @param size The size of the projection\r\n     * @param angle The rotation angle around the direction of the projection\r\n     */\r\n    public renderTexture(texture: BaseTexture, position: Vector3, normal: Vector3, size: Vector3, angle = 0): void {\r\n        if (!this.texture) {\r\n            this._createDiffuseRTT();\r\n        }\r\n\r\n        if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture)) {\r\n            const matrix = this._createProjectionMatrix(position, normal, size, angle);\r\n            const shader = MeshUVSpaceRenderer._GetShader(this._scene);\r\n\r\n            shader.setTexture(\"textureSampler\", texture);\r\n            shader.setMatrix(\"projMatrix\", matrix);\r\n\r\n            this.texture.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the texture map\r\n     */\r\n    public clear(): void {\r\n        if (MeshUVSpaceRenderer._IsRenderTargetTexture(this.texture) && this.texture.renderTarget) {\r\n            const engine = this._scene.getEngine();\r\n\r\n            engine.bindFramebuffer(this.texture.renderTarget);\r\n            engine.clear(this.clearColor, true, true, true);\r\n            engine.unBindFramebuffer(this.texture.renderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the ressources\r\n     */\r\n    public dispose() {\r\n        if (this._textureCreatedInternally) {\r\n            this.texture.dispose();\r\n            this._textureCreatedInternally = false;\r\n        }\r\n    }\r\n\r\n    private _createDiffuseRTT(): void {\r\n        this._textureCreatedInternally = true;\r\n\r\n        const texture = this._createRenderTargetTexture(this._options.width, this._options.height);\r\n\r\n        texture.setMaterialForRendering(this._mesh, MeshUVSpaceRenderer._GetShader(this._scene));\r\n\r\n        this.texture = texture;\r\n    }\r\n\r\n    private _createRenderTargetTexture(width: number, height: number): RenderTargetTexture {\r\n        const rtt = new RenderTargetTexture(\r\n            this._mesh.name + \"_uvspaceTexture\",\r\n            { width, height },\r\n            this._scene,\r\n            this._options.generateMipMaps,\r\n            true,\r\n            this._options.textureType,\r\n            false,\r\n            this._options.generateMipMaps ? Constants.TEXTURE_TRILINEAR_SAMPLINGMODE : Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            false,\r\n            false,\r\n            false,\r\n            Constants.TEXTUREFORMAT_RGBA\r\n        );\r\n\r\n        rtt.renderParticles = false;\r\n        rtt.optimizeUVAllocation = !!this._options.optimizeUVAllocation;\r\n\r\n        rtt.onClearObservable.addOnce(() => {\r\n            this._scene.getEngine().clear(this.clearColor, true, true, true);\r\n            rtt.onClearObservable.add(() => {}); // this disables clearing the texture for the next frames\r\n        });\r\n\r\n        rtt.renderList = [this._mesh];\r\n\r\n        return rtt;\r\n    }\r\n\r\n    private _createProjectionMatrix(position: Vector3, normal: Vector3, size: Vector3, angle = 0): Matrix {\r\n        const yaw = -Math.atan2(normal.z, normal.x) - Math.PI / 2;\r\n        const len = Math.sqrt(normal.x * normal.x + normal.z * normal.z);\r\n        const pitch = Math.atan2(normal.y, len);\r\n\r\n        const p = position.add(normal.scale(size.z * 0.5));\r\n\r\n        const projWorldMatrix = Matrix.RotationYawPitchRoll(yaw, pitch, angle).multiply(Matrix.Translation(p.x, p.y, p.z));\r\n        const inverseProjWorldMatrix = Matrix.Invert(projWorldMatrix);\r\n\r\n        const projMatrix = Matrix.FromArray([2 / size.x, 0, 0, 0, 0, 2 / size.y, 0, 0, 0, 0, 1 / size.z, 0, 0, 0, 0, 1]);\r\n\r\n        const screenMatrix = Matrix.FromArray([0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1, 0, 0.5, 0.5, 0.0, 1]);\r\n\r\n        return inverseProjWorldMatrix.multiply(projMatrix).multiply(screenMatrix);\r\n    }\r\n}\r\n"]}