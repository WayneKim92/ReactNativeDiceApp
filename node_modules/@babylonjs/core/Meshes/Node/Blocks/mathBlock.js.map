{"version":3,"file":"mathBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/mathBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\nimport { Vector2, Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\n\r\n/**\r\n * Operations supported by the Math block\r\n */\r\nexport enum MathBlockOperations {\r\n    /** Add */\r\n    Add,\r\n    /** Subtract */\r\n    Subtract,\r\n    /** Multiply */\r\n    Multiply,\r\n    /** Divide */\r\n    Divide,\r\n    /** Max */\r\n    Max,\r\n    /** Min */\r\n    Min,\r\n}\r\n\r\n/**\r\n * Block used to apply math functions\r\n */\r\nexport class MathBlock extends NodeGeometryBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    @editableInPropertyPage(\"Operation\", PropertyTypeForEdition.List, \"ADVANCED\", {\r\n        notifiers: { rebuild: true },\r\n        options: [\r\n            { label: \"Add\", value: MathBlockOperations.Add },\r\n            { label: \"Subtract\", value: MathBlockOperations.Subtract },\r\n            { label: \"Multiply\", value: MathBlockOperations.Multiply },\r\n            { label: \"Divide\", value: MathBlockOperations.Divide },\r\n            { label: \"Max\", value: MathBlockOperations.Max },\r\n            { label: \"Min\", value: MathBlockOperations.Min },\r\n        ],\r\n    })\r\n    public operation = MathBlockOperations.Add;\r\n\r\n    /**\r\n     * Create a new MathBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"left\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"right\", NodeGeometryBlockConnectionPointTypes.AutoDetect);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Matrix);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this._inputs[1].excludedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Texture);\r\n        this._inputs[1].acceptedConnectionPointTypes.push(NodeGeometryBlockConnectionPointTypes.Float);\r\n        this._linkConnectionTypes(0, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MathBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left input component\r\n     */\r\n    public get left(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right input component\r\n     */\r\n    public get right(): NodeGeometryConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        let func: (state: NodeGeometryBuildState) => any;\r\n        const left = this.left;\r\n        const right = this.right;\r\n\r\n        if (!left.isConnected || !right.isConnected) {\r\n            this.output._storedFunction = null;\r\n            this.output._storedValue = null;\r\n            return;\r\n        }\r\n\r\n        const isFloat = left.type === NodeGeometryBlockConnectionPointTypes.Float || left.type === NodeGeometryBlockConnectionPointTypes.Int;\r\n\r\n        switch (this.operation) {\r\n            case MathBlockOperations.Add: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) + right.getConnectedValue(state);\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).add(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case MathBlockOperations.Subtract: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) - right.getConnectedValue(state);\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).subtract(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case MathBlockOperations.Multiply: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) * right.getConnectedValue(state);\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).multiply(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case MathBlockOperations.Divide: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state) / right.getConnectedValue(state);\r\n                    };\r\n                } else {\r\n                    func = (state) => {\r\n                        return left.getConnectedValue(state).divide(state.adapt(right, left.type));\r\n                    };\r\n                }\r\n                break;\r\n            }\r\n            case MathBlockOperations.Min: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return Math.min(left.getConnectedValue(state), right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    switch (left.type) {\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector2: {\r\n                            func = (state) => {\r\n                                return Vector2.Minimize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector3: {\r\n                            func = (state) => {\r\n                                return Vector3.Minimize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector4: {\r\n                            func = (state) => {\r\n                                return Vector4.Minimize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case MathBlockOperations.Max: {\r\n                if (isFloat) {\r\n                    func = (state) => {\r\n                        return Math.max(left.getConnectedValue(state), right.getConnectedValue(state));\r\n                    };\r\n                } else {\r\n                    switch (left.type) {\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector2: {\r\n                            func = (state) => {\r\n                                return Vector2.Maximize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector3: {\r\n                            func = (state) => {\r\n                                return Vector3.Maximize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                        case NodeGeometryBlockConnectionPointTypes.Vector4: {\r\n                            func = (state) => {\r\n                                return Vector4.Maximize(left.getConnectedValue(state), state.adapt(right, left.type));\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.output._storedFunction = (state) => {\r\n            if (left.type === NodeGeometryBlockConnectionPointTypes.Int) {\r\n                return func(state) | 0;\r\n            }\r\n            return func(state);\r\n        };\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.MathBlockOperations.${MathBlockOperations[this.operation]};\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    /**\r\n     * Serializes this block in a JSON representation\r\n     * @returns the serialized block object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any) {\r\n        super._deserialize(serializationObject);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MathBlock\", MathBlock);\r\n"]}