{"version":3,"file":"geometryInfoBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Meshes/Node/Blocks/geometryInfoBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeGeometryBlock } from \"../nodeGeometryBlock\";\r\nimport type { NodeGeometryConnectionPoint } from \"../nodeGeometryBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { NodeGeometryBlockConnectionPointTypes } from \"../Enums/nodeGeometryConnectionPointTypes\";\r\nimport type { VertexData } from \"../../mesh.vertexData\";\r\nimport type { NodeGeometryBuildState } from \"../nodeGeometryBuildState\";\r\n\r\n/**\r\n * Block used to get information about a geometry\r\n */\r\nexport class GeometryInfoBlock extends NodeGeometryBlock {\r\n    private _currentVertexData: VertexData;\r\n    /**\r\n     * Create a new GeometryInfoBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"geometry\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n\r\n        this.registerOutput(\"output\", NodeGeometryBlockConnectionPointTypes.Geometry);\r\n        this.registerOutput(\"id\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"collectionId\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"verticesCount\", NodeGeometryBlockConnectionPointTypes.Int);\r\n        this.registerOutput(\"facesCount\", NodeGeometryBlockConnectionPointTypes.Int);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"GeometryInfoBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry input component\r\n     */\r\n    public get geometry(): NodeGeometryConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry output component\r\n     */\r\n    public get output(): NodeGeometryConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the id output component\r\n     */\r\n    public get id(): NodeGeometryConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the collectionId output component\r\n     */\r\n    public get collectionId(): NodeGeometryConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the verticesCount output component\r\n     */\r\n    public get verticesCount(): NodeGeometryConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the facesCount output component\r\n     */\r\n    public get facesCount(): NodeGeometryConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    protected _buildBlock() {\r\n        if (!this.geometry.isConnected) {\r\n            this.id._storedValue = 0;\r\n            this.collectionId._storedValue = 0;\r\n            this.verticesCount._storedValue = 0;\r\n            this.facesCount._storedValue = 0;\r\n            this.output._storedValue = 0;\r\n            this.id._storedFunction = null;\r\n            this.collectionId._storedFunction = null;\r\n            this.verticesCount._storedFunction = null;\r\n            this.facesCount._storedFunction = null;\r\n            this.output._storedFunction = null;\r\n            return;\r\n        }\r\n\r\n        this.output._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this.geometry.getConnectedValue(state) as VertexData;\r\n            return this._currentVertexData;\r\n        };\r\n        this.id._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.uniqueId;\r\n        };\r\n        this.collectionId._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.metadata ? this._currentVertexData.metadata.collectionId : 0;\r\n        };\r\n        this.verticesCount._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.positions ? this._currentVertexData.positions.length / 3 : 0;\r\n        };\r\n        this.facesCount._storedFunction = (state: NodeGeometryBuildState) => {\r\n            this._currentVertexData = this._currentVertexData || (this.geometry.getConnectedValue(state) as VertexData);\r\n            return this._currentVertexData.indices ? this._currentVertexData.indices.length / 3 : 0;\r\n        };\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GeometryInfoBlock\", GeometryInfoBlock);\r\n"]}