{"version":3,"file":"fluidRenderer.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/fluidRenderer/fluidRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"core/scene\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { IParticleSystem } from \"core/Particles/IParticleSystem\";\r\nimport type { ISceneComponent } from \"core/sceneComponent\";\r\nimport { SceneComponentConstants } from \"core/sceneComponent\";\r\nimport type { SmartArrayNoDuplicate } from \"core/Misc/smartArray\";\r\nimport type { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nimport type { FluidRenderingObject } from \"./fluidRenderingObject\";\r\nimport { FluidRenderingObjectParticleSystem } from \"./fluidRenderingObjectParticleSystem\";\r\nimport { FluidRenderingTargetRenderer } from \"./fluidRenderingTargetRenderer\";\r\nimport { FluidRenderingObjectCustomParticles } from \"./fluidRenderingObjectCustomParticles\";\r\nimport { FluidRenderingDepthTextureCopy } from \"./fluidRenderingDepthTextureCopy\";\r\n\r\nimport \"../../Shaders/fluidRenderingParticleDepth.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleDepth.fragment\";\r\nimport \"../../Shaders/fluidRenderingParticleThickness.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleThickness.fragment\";\r\nimport \"../../Shaders/fluidRenderingParticleDiffuse.vertex\";\r\nimport \"../../Shaders/fluidRenderingParticleDiffuse.fragment\";\r\nimport \"../../Shaders/fluidRenderingBilateralBlur.fragment\";\r\nimport \"../../Shaders/fluidRenderingStandardBlur.fragment\";\r\nimport \"../../Shaders/fluidRenderingRender.fragment\";\r\n\r\ndeclare module \"../../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /** @internal (Backing field) */\r\n        _fluidRenderer: Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Gets or Sets the fluid renderer associated to the scene.\r\n         */\r\n        fluidRenderer: Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Enables the fluid renderer and associates it with the scene\r\n         * @returns the FluidRenderer\r\n         */\r\n        enableFluidRenderer(): Nullable<FluidRenderer>;\r\n\r\n        /**\r\n         * Disables the fluid renderer associated with the scene\r\n         */\r\n        disableFluidRenderer(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"fluidRenderer\", {\r\n    get: function (this: Scene) {\r\n        return this._fluidRenderer;\r\n    },\r\n    set: function (this: Scene, value: Nullable<FluidRenderer>) {\r\n        this._fluidRenderer = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.enableFluidRenderer = function (): Nullable<FluidRenderer> {\r\n    if (this._fluidRenderer) {\r\n        return this._fluidRenderer;\r\n    }\r\n\r\n    this._fluidRenderer = new FluidRenderer(this);\r\n\r\n    return this._fluidRenderer;\r\n};\r\n\r\nScene.prototype.disableFluidRenderer = function (): void {\r\n    this._fluidRenderer?.dispose();\r\n    this._fluidRenderer = null;\r\n};\r\n\r\ntype CameraMapForFluidRendering = [Array<FluidRenderingTargetRenderer>, { [key: string]: FluidRenderingDepthTextureCopy }];\r\n\r\nfunction IsParticleSystemObject(obj: FluidRenderingObject): obj is FluidRenderingObjectParticleSystem {\r\n    return !!(obj as FluidRenderingObjectParticleSystem).particleSystem;\r\n}\r\n\r\n/**\r\n * Defines the fluid renderer scene component responsible to render objects as fluids\r\n */\r\nexport class FluidRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_FLUIDRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\r\n            SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER,\r\n            this,\r\n            this._gatherActiveCameraRenderTargets\r\n        );\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_FLUIDRENDERER, this, this._afterCameraDraw);\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(_renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        this.scene.fluidRenderer?._prepareRendering();\r\n    }\r\n\r\n    private _afterCameraDraw(camera: Camera) {\r\n        this.scene.fluidRenderer?._render(camera);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._fluidRenderer) {\r\n            // Release resources first\r\n            this.scene.disableFluidRenderer();\r\n\r\n            // Re-enable\r\n            this.scene.enableFluidRenderer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        this.scene.disableFluidRenderer();\r\n    }\r\n}\r\n\r\n/**\r\n * An object rendered as a fluid.\r\n * It consists of the object itself as well as the render target renderer (which is used to generate the textures (render target) needed for fluid rendering)\r\n */\r\nexport interface IFluidRenderingRenderObject {\r\n    /** object rendered as a fluid */\r\n    object: FluidRenderingObject;\r\n    /** target renderer used to render the fluid object */\r\n    targetRenderer: FluidRenderingTargetRenderer;\r\n}\r\n\r\n/**\r\n * Class responsible for fluid rendering.\r\n * It is implementing the method described in https://developer.download.nvidia.com/presentations/2010/gdc/Direct3D_Effects.pdf\r\n */\r\nexport class FluidRenderer {\r\n    /** @internal */\r\n    public static _SceneComponentInitialization(scene: Scene) {\r\n        let component = scene._getComponent(SceneComponentConstants.NAME_FLUIDRENDERER) as FluidRendererSceneComponent;\r\n        if (!component) {\r\n            component = new FluidRendererSceneComponent(scene);\r\n            scene._addComponent(component);\r\n        }\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n    private _onEngineResizeObserver: Nullable<Observer<Engine>>;\r\n    private _cameras: Map<Camera, CameraMapForFluidRendering>;\r\n\r\n    /** Retrieves all the render objects managed by the class */\r\n    public readonly renderObjects: Array<IFluidRenderingRenderObject>;\r\n\r\n    /** Retrieves all the render target renderers managed by the class */\r\n    public readonly targetRenderers: FluidRenderingTargetRenderer[];\r\n\r\n    /**\r\n     * Initializes the class\r\n     * @param scene Scene in which the objects are part of\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._onEngineResizeObserver = null;\r\n        this.renderObjects = [];\r\n        this.targetRenderers = [];\r\n        this._cameras = new Map();\r\n\r\n        FluidRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        this._onEngineResizeObserver = this._engine.onResizeObservable.add(() => {\r\n            this._initialize();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reinitializes the class\r\n     * Can be used if you change the object priority (FluidRenderingObject.priority), to make sure the objects are rendered in the right order\r\n     */\r\n    public recreate(): void {\r\n        this._sortRenderingObjects();\r\n        this._initialize();\r\n    }\r\n\r\n    /**\r\n     * Gets the render object corresponding to a particle system (null if the particle system is not rendered as a fluid)\r\n     * @param ps The particle system\r\n     * @returns the render object corresponding to this particle system if any, otherwise null\r\n     */\r\n    public getRenderObjectFromParticleSystem(ps: IParticleSystem): Nullable<IFluidRenderingRenderObject> {\r\n        const index = this._getParticleSystemIndex(ps);\r\n        return index !== -1 ? this.renderObjects[index] : null;\r\n    }\r\n\r\n    /**\r\n     * Adds a particle system to the fluid renderer.\r\n     * @param ps particle system\r\n     * @param generateDiffuseTexture True if you want to generate a diffuse texture from the particle system and use it as part of the fluid rendering (default: false)\r\n     * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\r\n     * @param camera The camera used by the target renderer (if the target renderer is created by the method)\r\n     * @returns the render object corresponding to the particle system\r\n     */\r\n    public addParticleSystem(ps: IParticleSystem, generateDiffuseTexture?: boolean, targetRenderer?: FluidRenderingTargetRenderer, camera?: Camera): IFluidRenderingRenderObject {\r\n        const object = new FluidRenderingObjectParticleSystem(this._scene, ps);\r\n\r\n        object.onParticleSizeChanged.add(() => this._setParticleSizeForRenderTargets());\r\n\r\n        if (!targetRenderer) {\r\n            targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\r\n            this.targetRenderers.push(targetRenderer);\r\n        }\r\n\r\n        if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\r\n            targetRenderer._onUseVelocityChanged.add(() => this._setUseVelocityForRenderObject());\r\n        }\r\n\r\n        if (generateDiffuseTexture !== undefined) {\r\n            targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\r\n        }\r\n\r\n        const renderObject = { object, targetRenderer };\r\n\r\n        this.renderObjects.push(renderObject);\r\n\r\n        this._sortRenderingObjects();\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n\r\n        return renderObject;\r\n    }\r\n\r\n    /**\r\n     * Adds a custom particle set to the fluid renderer.\r\n     * @param buffers The list of buffers (should contain at least a \"position\" buffer!)\r\n     * @param numParticles Number of particles in each buffer\r\n     * @param generateDiffuseTexture True if you want to generate a diffuse texture from buffers and use it as part of the fluid rendering (default: false). For the texture to be generated correctly, you need a \"color\" buffer in the set!\r\n     * @param targetRenderer The target renderer used to display the particle system as a fluid. If not provided, the method will create a new one\r\n     * @param camera The camera used by the target renderer (if the target renderer is created by the method)\r\n     * @returns the render object corresponding to the custom particle set\r\n     */\r\n    public addCustomParticles(\r\n        buffers: { [key: string]: FloatArray },\r\n        numParticles: number,\r\n        generateDiffuseTexture?: boolean,\r\n        targetRenderer?: FluidRenderingTargetRenderer,\r\n        camera?: Camera\r\n    ): IFluidRenderingRenderObject {\r\n        const object = new FluidRenderingObjectCustomParticles(this._scene, buffers, numParticles);\r\n\r\n        object.onParticleSizeChanged.add(() => this._setParticleSizeForRenderTargets());\r\n\r\n        if (!targetRenderer) {\r\n            targetRenderer = new FluidRenderingTargetRenderer(this._scene, camera);\r\n            this.targetRenderers.push(targetRenderer);\r\n        }\r\n\r\n        if (!targetRenderer._onUseVelocityChanged.hasObservers()) {\r\n            targetRenderer._onUseVelocityChanged.add(() => this._setUseVelocityForRenderObject());\r\n        }\r\n\r\n        if (generateDiffuseTexture !== undefined) {\r\n            targetRenderer.generateDiffuseTexture = generateDiffuseTexture;\r\n        }\r\n\r\n        const renderObject = { object, targetRenderer };\r\n\r\n        this.renderObjects.push(renderObject);\r\n\r\n        this._sortRenderingObjects();\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n\r\n        return renderObject;\r\n    }\r\n\r\n    /**\r\n     * Removes a render object from the fluid renderer\r\n     * @param renderObject the render object to remove\r\n     * @param removeUnusedTargetRenderer True to remove/dispose of the target renderer if it's not used anymore (default: true)\r\n     * @returns True if the render object has been found and released, else false\r\n     */\r\n    public removeRenderObject(renderObject: IFluidRenderingRenderObject, removeUnusedTargetRenderer = true): boolean {\r\n        const index = this.renderObjects.indexOf(renderObject);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n\r\n        renderObject.object.dispose();\r\n\r\n        this.renderObjects.splice(index, 1);\r\n\r\n        if (removeUnusedTargetRenderer && this._removeUnusedTargetRenderers()) {\r\n            this._initialize();\r\n        } else {\r\n            this._setParticleSizeForRenderTargets();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _sortRenderingObjects(): void {\r\n        this.renderObjects.sort((a, b) => {\r\n            return a.object.priority < b.object.priority ? -1 : a.object.priority > b.object.priority ? 1 : 0;\r\n        });\r\n    }\r\n\r\n    private _removeUnusedTargetRenderers(): boolean {\r\n        const indexes: { [id: number]: boolean } = {};\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const targetRenderer = this.renderObjects[i].targetRenderer;\r\n            indexes[this.targetRenderers.indexOf(targetRenderer)] = true;\r\n        }\r\n\r\n        let removed = false;\r\n        const newList: Array<FluidRenderingTargetRenderer> = [];\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            if (!indexes[i]) {\r\n                this.targetRenderers[i].dispose();\r\n                removed = true;\r\n            } else {\r\n                newList.push(this.targetRenderers[i]);\r\n            }\r\n        }\r\n\r\n        if (removed) {\r\n            this.targetRenderers.length = 0;\r\n            this.targetRenderers.push(...newList);\r\n        }\r\n\r\n        return removed;\r\n    }\r\n\r\n    private _getParticleSystemIndex(ps: IParticleSystem): number {\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const obj = this.renderObjects[i].object;\r\n            if (IsParticleSystemObject(obj) && obj.particleSystem === ps) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    private _initialize(): void {\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            this.targetRenderers[i].dispose();\r\n        }\r\n\r\n        const cameras: Map<Camera, CameraMapForFluidRendering> = new Map();\r\n\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            const targetRenderer = this.targetRenderers[i];\r\n\r\n            targetRenderer._initialize();\r\n\r\n            if (targetRenderer.camera && targetRenderer._renderPostProcess) {\r\n                let list = cameras.get(targetRenderer.camera);\r\n                if (!list) {\r\n                    list = [[], {}];\r\n                    cameras.set(targetRenderer.camera, list);\r\n                }\r\n                list[0].push(targetRenderer);\r\n                targetRenderer.camera.attachPostProcess(targetRenderer._renderPostProcess, i);\r\n            }\r\n        }\r\n\r\n        let iterator = cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = cameras.get(camera)!;\r\n\r\n            const firstPostProcess = camera._getFirstPostProcess();\r\n            if (!firstPostProcess) {\r\n                continue;\r\n            }\r\n\r\n            const [targetRenderers, copyDepthTextures] = list;\r\n\r\n            firstPostProcess.onSizeChangedObservable.add(() => {\r\n                if (!firstPostProcess.inputTexture.depthStencilTexture) {\r\n                    firstPostProcess.inputTexture.createDepthStencilTexture(\r\n                        0,\r\n                        true,\r\n                        this._engine.isStencilEnable,\r\n                        targetRenderers[0].samples,\r\n                        this._engine.isStencilEnable ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n                        `PostProcessRTTDepthStencil-${firstPostProcess.name}`\r\n                    );\r\n                }\r\n                for (const targetRenderer of targetRenderers) {\r\n                    const thicknessRT = targetRenderer._thicknessRenderTarget?.renderTarget;\r\n                    const thicknessTexture = thicknessRT?.texture;\r\n                    if (thicknessRT && thicknessTexture) {\r\n                        const key = thicknessTexture.width + \"_\" + thicknessTexture.height;\r\n                        let copyDepthTexture = copyDepthTextures[key];\r\n                        if (!copyDepthTexture) {\r\n                            copyDepthTexture = copyDepthTextures[key] = new FluidRenderingDepthTextureCopy(this._engine, thicknessTexture.width, thicknessTexture.height);\r\n                        }\r\n                        copyDepthTexture.depthRTWrapper._shareDepth(thicknessRT);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Dispose the CopyDepthTexture instances that we don't need anymore\r\n        iterator = this._cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = this._cameras.get(camera)!;\r\n\r\n            const copyDepthTextures = list[1];\r\n\r\n            const list2 = cameras.get(camera);\r\n            if (!list2) {\r\n                for (const key in copyDepthTextures) {\r\n                    copyDepthTextures[key].dispose();\r\n                }\r\n            } else {\r\n                for (const key in copyDepthTextures) {\r\n                    if (!list2[1][key]) {\r\n                        copyDepthTextures[key].dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._cameras.clear();\r\n        this._cameras = cameras;\r\n\r\n        this._setParticleSizeForRenderTargets();\r\n    }\r\n\r\n    private _setParticleSizeForRenderTargets(): void {\r\n        const particleSizes = new Map<FluidRenderingTargetRenderer, number>();\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const renderingObject = this.renderObjects[i];\r\n            let curSize = particleSizes.get(renderingObject.targetRenderer);\r\n            if (curSize === undefined) {\r\n                curSize = 0;\r\n            }\r\n            particleSizes.set(renderingObject.targetRenderer, Math.max(curSize, renderingObject.object.particleSize));\r\n        }\r\n\r\n        particleSizes.forEach((particleSize, targetRenderer) => {\r\n            if (targetRenderer._depthRenderTarget) {\r\n                targetRenderer._depthRenderTarget.particleSize = particleSize;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _setUseVelocityForRenderObject(): void {\r\n        for (const renderingObject of this.renderObjects) {\r\n            renderingObject.object.useVelocity = renderingObject.targetRenderer.useVelocity;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareRendering(): void {\r\n        for (const renderer of this.targetRenderers) {\r\n            if (renderer.needInitialization) {\r\n                this._initialize();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _render(forCamera?: Camera): void {\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            if (!forCamera || this.targetRenderers[i].camera === forCamera) {\r\n                this.targetRenderers[i]._clearTargets();\r\n            }\r\n        }\r\n\r\n        const iterator = this._cameras.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            const camera = key.value;\r\n            const list = this._cameras.get(camera)!;\r\n            if (forCamera && camera !== forCamera) {\r\n                continue;\r\n            }\r\n\r\n            const firstPostProcess = camera._getFirstPostProcess();\r\n            if (!firstPostProcess) {\r\n                continue;\r\n            }\r\n\r\n            const sourceCopyDepth = firstPostProcess.inputTexture?.depthStencilTexture;\r\n            if (sourceCopyDepth) {\r\n                const [targetRenderers, copyDepthTextures] = list;\r\n                for (const targetRenderer of targetRenderers) {\r\n                    targetRenderer._bgDepthTexture = sourceCopyDepth;\r\n                }\r\n                for (const key in copyDepthTextures) {\r\n                    copyDepthTextures[key].copy(sourceCopyDepth);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            const renderingObject = this.renderObjects[i];\r\n            if (!forCamera || renderingObject.targetRenderer.camera === forCamera) {\r\n                renderingObject.targetRenderer._render(renderingObject.object);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of all the ressources used by the class\r\n     */\r\n    public dispose(): void {\r\n        this._engine.onResizeObservable.remove(this._onEngineResizeObserver);\r\n        this._onEngineResizeObserver = null;\r\n\r\n        for (let i = 0; i < this.renderObjects.length; ++i) {\r\n            this.renderObjects[i].object.dispose();\r\n        }\r\n\r\n        for (let i = 0; i < this.targetRenderers.length; ++i) {\r\n            this.targetRenderers[i].dispose();\r\n        }\r\n\r\n        this._cameras.forEach((list) => {\r\n            const copyDepthTextures = list[1];\r\n            for (const key in copyDepthTextures) {\r\n                copyDepthTextures[key].dispose();\r\n            }\r\n        });\r\n\r\n        (this.renderObjects as Array<IFluidRenderingRenderObject>) = [];\r\n        (this.targetRenderers as FluidRenderingTargetRenderer[]) = [];\r\n        this._cameras.clear();\r\n    }\r\n}\r\n"]}