{"version":3,"file":"fluidRenderingTargetRenderer.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/fluidRenderer/fluidRenderingTargetRenderer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,mCAA+B;AAKnD,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,kCAA8B;AACvD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,mCAA+B;AAClE,OAAO,EAAE,UAAU,EAAE,iCAA6B;AAClD,OAAO,EAAE,WAAW,EAAE,2CAAuC;AAK7D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE;;GAEG;AACH,MAAM,CAAN,IAAY,mBAQX;AARD,WAAY,mBAAmB;IAC3B,6EAAY,CAAA;IACZ,2FAAmB,CAAA;IACnB,qFAAgB,CAAA;IAChB,mGAAuB,CAAA;IACvB,iFAAc,CAAA;IACd,mEAAO,CAAA;IACP,qFAAgB,CAAA;AACpB,CAAC,EARW,mBAAmB,KAAnB,mBAAmB,QAQ9B;AAED;;GAEG;AACH,MAAM,OAAO,4BAA4B;IAWrC;;OAEG;IACH,IAAW,kBAAkB;QACzB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAID;;OAEG;IACH,IAAW,sBAAsB;QAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IAED,IAAW,sBAAsB,CAAC,QAAiB;QAC/C,IAAI,IAAI,CAAC,uBAAuB,KAAK,QAAQ,EAAE;YAC3C,OAAO;SACV;QAED,IAAI,CAAC,uBAAuB,GAAG,QAAQ,CAAC;QACxC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAuCD;;OAEG;IACH,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,IAAW,YAAY,CAAC,OAA4B;QAChD,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO,EAAE;YAChC,OAAO;SACV;QAED,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACjC,CAAC;IAID;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,KAAK,CAAC,KAAc;QAC3B,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;YACvB,OAAO;SACV;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,cAAc,CAAC,GAAsC;QAC5D,IAAI,IAAI,CAAC,eAAe,KAAK,GAAG,EAAE;YAC9B,OAAO;SACV;QAED,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;IAC/B,CAAC;IAID;;OAEG;IACH,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,IAAW,eAAe,CAAC,MAAe;QACtC,IAAI,IAAI,CAAC,gBAAgB,KAAK,MAAM,EAAE;YAClC,OAAO;SACV;QAED,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;QAC/B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,oBAAoB;QAC3B,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAED,IAAW,oBAAoB,CAAC,KAAa;QACzC,IAAI,IAAI,CAAC,qBAAqB,KAAK,KAAK,EAAE;YACtC,OAAO;SACV;QAED,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;QACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;OAEG;IACH,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,mBAAmB,CAAC,UAAkB;QAC7C,IAAI,IAAI,CAAC,oBAAoB,KAAK,UAAU,EAAE;YAC1C,OAAO;SACV;QAED,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;QACvC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,sBAAsB;QAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IAED,IAAW,sBAAsB,CAAC,aAAqB;QACnD,IAAI,IAAI,CAAC,uBAAuB,KAAK,aAAa,EAAE;YAChD,OAAO;SACV;QAED,IAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC;QAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,sBAAsB;QAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACxC,CAAC;IAED,IAAW,sBAAsB,CAAC,aAAqB;QACnD,IAAI,IAAI,CAAC,uBAAuB,KAAK,aAAa,EAAE;YAChD,OAAO;SACV;QAED,IAAI,CAAC,uBAAuB,GAAG,aAAa,CAAC;QAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,mBAAmB,CAAC,KAAa;QACxC,IAAI,IAAI,CAAC,oBAAoB,KAAK,KAAK,EAAE;YACrC,OAAO;SACV;QAED,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;QAClC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,mBAAmB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED,IAAW,mBAAmB,CAAC,MAAe;QAC1C,IAAI,IAAI,CAAC,oBAAoB,KAAK,MAAM,EAAE;YACtC,OAAO;SACV;QAED,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;QACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,wBAAwB;QAC/B,OAAO,IAAI,CAAC,yBAAyB,CAAC;IAC1C,CAAC;IAED,IAAW,wBAAwB,CAAC,KAAa;QAC7C,IAAI,IAAI,CAAC,yBAAyB,KAAK,KAAK,EAAE;YAC1C,OAAO;SACV;QAED,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;OAEG;IACH,IAAW,uBAAuB;QAC9B,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACzC,CAAC;IAED,IAAW,uBAAuB,CAAC,UAAkB;QACjD,IAAI,IAAI,CAAC,wBAAwB,KAAK,UAAU,EAAE;YAC9C,OAAO;SACV;QAED,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC;QAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,0BAA0B;QACjC,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC5C,CAAC;IAED,IAAW,0BAA0B,CAAC,aAAqB;QACvD,IAAI,IAAI,CAAC,2BAA2B,KAAK,aAAa,EAAE;YACpD,OAAO;SACV;QAED,IAAI,CAAC,2BAA2B,GAAG,aAAa,CAAC;QACjD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAID;;OAEG;IACH,IAAW,iBAAiB;QACxB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACnC,CAAC;IAED,IAAW,iBAAiB,CAAC,GAAY;QACrC,IAAI,IAAI,CAAC,kBAAkB,KAAK,GAAG,EAAE;YACjC,OAAO;SACV;QAED,IAAI,CAAC,kBAAkB,GAAG,GAAG,CAAC;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAUD;;;OAGG;IACH,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,IAAW,WAAW,CAAC,GAAY;QAC/B,IAAI,IAAI,CAAC,YAAY,KAAK,GAAG,EAAE;YAC3B,OAAO;SACV;QAED,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QACxB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAID;;;OAGG;IACH,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,IAAW,YAAY,CAAC,IAAsB;QAC1C,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;YAC7B,OAAO;SACV;QAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,gBAAgB;QACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED,IAAW,gBAAgB,CAAC,IAAsB;QAC9C,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACjC,OAAO;SACV;QAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAW,cAAc,CAAC,IAAsB;QAC5C,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE;YAC/B,OAAO;SACV;QAED,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAID;;;OAGG;IACH,IAAW,OAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,IAAW,OAAO,CAAC,OAAe;QAC9B,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,EAAE;YAC3B,OAAO;SACV;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAcD;;;;OAIG;IACH,YAAY,KAAY,EAAE,MAAe;QAlbjC,4BAAuB,GAAG,KAAK,CAAC;QAkBxC;;WAEG;QACI,eAAU,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAErD;;WAEG;QACI,YAAO,GAAG,CAAC,CAAC;QAEnB;;WAEG;QACI,uBAAkB,GAAG,GAAG,CAAC;QAEhC;;WAEG;QACI,iBAAY,GAAG,GAAG,CAAC;QAE1B;;WAEG;QACI,kBAAa,GAAG,GAAG,CAAC;QAE3B;;WAEG;QACI,qBAAgB,GAAG,CAAC,CAAC;QAE5B;;WAEG;QACI,aAAQ,GAAY,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAEtD,kBAAa,GAAwB,mBAAmB,CAAC,mBAAmB,CAAC;QAkB7E,WAAM,GAAG,KAAK,CAAC;QAqCf,qBAAgB,GAAG,IAAI,CAAC;QAkBxB,0BAAqB,GAAG,CAAC,CAAC;QAmB1B,yBAAoB,GAAG,CAAC,CAAC;QAkBzB,4BAAuB,GAAG,CAAC,CAAC;QAkB5B,4BAAuB,GAAG,GAAG,CAAC;QAkB9B,yBAAoB,GAAG,EAAE,CAAC;QAkB1B,yBAAoB,GAAG,IAAI,CAAC;QAkB5B,8BAAyB,GAAG,CAAC,CAAC;QAmB9B,6BAAwB,GAAG,CAAC,CAAC;QAkB7B,gCAA2B,GAAG,CAAC,CAAC;QAkBhC,uBAAkB,GAAG,KAAK,CAAC;QAqBnC,gBAAgB;QACT,0BAAqB,GAAG,IAAI,UAAU,EAAgC,CAAC;QAEtE,iBAAY,GAAG,KAAK,CAAC;QAoBrB,kBAAa,GAAqB,IAAI,CAAC;QAmBvC,sBAAiB,GAAqB,IAAI,CAAC;QAmB3C,oBAAe,GAAqB,IAAI,CAAC;QAmBzC,aAAQ,GAAG,CAAC,CAAC;QA4CjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,KAAK,CAAC,YAAY,CAAC;QAC5C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAE5B,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,EAAE,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACrD,IAAI,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QAEnC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,gBAAgB;IACT,WAAW;;QACd,IAAI,CAAC,OAAO,EAAE,CAAC;QAEf,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QAEjC,MAAM,UAAU,GAAG,MAAA,IAAI,CAAC,aAAa,mCAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QACvE,MAAM,WAAW,GACb,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QAErK,IAAI,CAAC,kBAAkB,GAAG,IAAI,sBAAsB,CAChD,OAAO,EACP,IAAI,CAAC,MAAM,EACX,UAAU,EACV,WAAW,EACX,UAAU,EACV,WAAW,EACX,SAAS,CAAC,iBAAiB,EAC3B,SAAS,CAAC,gBAAgB,EAC1B,SAAS,CAAC,iBAAiB,EAC3B,SAAS,CAAC,gBAAgB,EAC1B,KAAK,EACL,IAAI,CAAC,OAAO,EACZ,IAAI,EACJ,IAAI,CAAC,QAAQ,CAChB,CAAC;QAEF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEtD,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,MAAM,YAAY,GAAG,MAAA,IAAI,CAAC,eAAe,mCAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YAC3E,MAAM,aAAa,GACf,IAAI,CAAC,eAAe,KAAK,IAAI;gBACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;gBACrG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;YAEzC,IAAI,CAAC,oBAAoB,GAAG,IAAI,sBAAsB,CAClD,SAAS,EACT,IAAI,CAAC,MAAM,EACX,YAAY,EACZ,aAAa,EACb,CAAC,EACD,CAAC,EACD,SAAS,CAAC,yBAAyB,EACnC,SAAS,CAAC,kBAAkB,EAC5B,SAAS,CAAC,yBAAyB,EACnC,SAAS,CAAC,kBAAkB,EAC5B,IAAI,EACJ,IAAI,CAAC,OAAO,EACZ,IAAI,EACJ,IAAI,CAAC,QAAQ,CAChB,CAAC;YAEF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;SAC3D;QAED,MAAM,cAAc,GAAG,MAAA,IAAI,CAAC,iBAAiB,mCAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAC/E,MAAM,eAAe,GACjB,IAAI,CAAC,iBAAiB,KAAK,IAAI;YAC3B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YACvG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QAEzC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC1B,IAAI,CAAC,sBAAsB,GAAG,IAAI,sBAAsB,CACpD,WAAW,EACX,IAAI,CAAC,MAAM,EACX,cAAc,EACd,eAAe,EACf,cAAc,EACd,eAAe,EACf,SAAS,CAAC,sBAAsB,EAChC,SAAS,CAAC,eAAe,EACzB,SAAS,CAAC,sBAAsB,EAChC,SAAS,CAAC,eAAe,EACzB,IAAI,EACJ,IAAI,CAAC,OAAO,EACZ,KAAK,EACL,IAAI,CAAC,QAAQ,CAChB,CAAC;YAEF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,iCAAiC,EAAE,CAAC;IAC7C,CAAC;IAES,kBAAkB,CAAC,eAAiD,IAAI;QAC9E,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,IAAI,CAAC,kBAAkB,EAAE;YACnE,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAClC;QACD,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,IAAI,CAAC,sBAAsB,EAAE;YACvE,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACtC;IACL,CAAC;IAES,uBAAuB;QAC7B,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC1B,OAAO;SACV;QACD,IAAI,CAAC,kBAAkB,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAClE,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QACxE,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QACxE,IAAI,CAAC,kBAAkB,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACtE,CAAC;IAES,2BAA2B;QACjC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAC9B,OAAO;SACV;QACD,IAAI,CAAC,sBAAsB,CAAC,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC1E,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,GAAG,IAAI,CAAC,0BAA0B,CAAC;IACpF,CAAC;IAES,uBAAuB,CAAC,YAAoC;QAClE,IAAI,YAAY,KAAK,IAAI,CAAC,oBAAoB,EAAE;YAC5C,YAAY,CAAC,UAAU,GAAG,YAAY,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;YACrH,YAAY,CAAC,eAAe,GAAG,YAAY,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC;SACvI;QAED,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAEtC,YAAY,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;IAES,iCAAiC;;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QAEvC,MAAM,YAAY,GAAG;YACjB,YAAY;YACZ,kBAAkB;YAClB,qBAAqB;YACrB,WAAW;YACX,UAAU;YACV,WAAW;YACX,SAAS;YACT,oBAAoB;YACpB,cAAc;YACd,eAAe;SAClB,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,cAAc,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO;SACV;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAmB,CAAC,WAAY,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAmB,CAAC,OAAQ,CAAC;QAChI,MAAM,SAAS,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;QAEzF,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE;YAC/B,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,eAAe,mCAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;YACtE,IAAI,MAAM,EAAE;gBACR,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBACvC,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;aACtD;SACJ;QAED,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC3B,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;SACzD;aAAM;YACH,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACrC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACrC,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;SACnD;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/B,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;SAC1D;aAAM;YACH,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACtC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACzC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB,CAAC,OAAO,EAAE;gBACpD,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;aAC3D;iBAAM,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB,CAAC,gBAAgB,EAAE;gBACpE,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;aACjE;iBAAM;gBACH,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;gBACrD,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAClC,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB,CAAC,mBAAmB,EAAE;oBAC3H,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;iBACtD;aACJ;SACJ;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,WAAW,CACrC,gBAAgB,EAChB,sBAAsB,EACtB,YAAY,EACZ,YAAY,EACZ,CAAC,EACD,IAAI,EACJ,SAAS,CAAC,6BAA6B,EACvC,MAAM,EACN,KAAK,EACL,IAAI,EACJ,SAAS,CAAC,yBAAyB,EACnC,SAAS,EACT,SAAS,EACT,IAAI,EACJ,SAAS,CACZ,CAAC;QACF,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEzD,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAChD,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;;YACrD,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACtE,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;YAEnC,IAAI,MAAM,CAAC,QAAQ,EAAE;gBACjB,MAAM,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,IAAI,CAAC,kBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aACpG;YAED,IAAI,CAAC,IAAI,CAAC,kBAAmB,CAAC,UAAU,EAAE;gBACtC,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,kBAAmB,CAAC,OAAO,CAAC,CAAC;gBACpE,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACjB,MAAM,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,MAAA,MAAA,IAAI,CAAC,kBAAmB,CAAC,OAAO,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;iBACnH;aACJ;iBAAM;gBACH,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,kBAAmB,CAAC,WAAW,CAAC,CAAC;gBACxE,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACjB,MAAM,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,MAAA,MAAA,IAAI,CAAC,kBAAmB,CAAC,WAAW,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;iBACvH;aACJ;YACD,IAAI,IAAI,CAAC,oBAAoB,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE;oBACvC,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;oBACvE,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,MAAA,MAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBACtH;iBACJ;qBAAM;oBACH,MAAM,CAAC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;oBAC3E,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,MAAA,MAAA,IAAI,CAAC,oBAAoB,CAAC,WAAW,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBAC1H;iBACJ;aACJ;iBAAM;gBACH,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;aACrD;YACD,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACpD,MAAM,CAAC,YAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC5D,IAAI,MAAM,CAAC,QAAQ,EAAE;oBACjB,MAAM,CAAC,iBAAiB,CAAC,uBAAuB,EAAE,MAAA,IAAI,CAAC,eAAe,mCAAI,IAAI,CAAC,CAAC;iBACnF;aACJ;iBAAM;gBACH,IAAI,CAAC,IAAI,CAAC,sBAAuB,CAAC,UAAU,EAAE;oBAC1C,MAAM,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAuB,CAAC,OAAO,CAAC,CAAC;oBAC5E,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,MAAA,MAAA,IAAI,CAAC,sBAAuB,CAAC,OAAO,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBAC3H;iBACJ;qBAAM;oBACH,MAAM,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,sBAAuB,CAAC,WAAW,CAAC,CAAC;oBAChF,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,MAAA,MAAA,IAAI,CAAC,sBAAuB,CAAC,WAAW,0CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBAC/H;iBACJ;gBACD,MAAM,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;aAC9D;YAED,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,EAAE;gBAC/B,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,eAAe,mCAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;gBACtE,IAAI,MAAM,EAAE;oBACR,MAAM,CAAC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;oBAC/C,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,0BAA0B,EAAE,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBAC9F;iBACJ;aACJ;YAED,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;YAC5D,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACnE,MAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;YACxE,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAC1C,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC/D,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAErD,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE7C,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,OAAQ,CAAC,IAAI,CAAC,CAAC;YAEjD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,IAAI,OAAO,GAA0B,IAAI,CAAC;gBAC1C,QAAQ,IAAI,CAAC,aAAa,EAAE;oBACxB,KAAK,mBAAmB,CAAC,YAAY;wBACjC,OAAO,GAAG,IAAI,CAAC,kBAAmB,CAAC,OAAO,CAAC;wBAC3C,MAAM;oBACV,KAAK,mBAAmB,CAAC,mBAAmB;wBACxC,OAAO,GAAG,IAAI,CAAC,kBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAmB,CAAC,OAAO,CAAC;wBACxH,MAAM;oBACV,KAAK,mBAAmB,CAAC,gBAAgB;wBACrC,OAAO,GAAG,MAAA,MAAA,IAAI,CAAC,sBAAsB,0CAAE,OAAO,mCAAI,IAAI,CAAC;wBACvD,MAAM;oBACV,KAAK,mBAAmB,CAAC,uBAAuB;wBAC5C,OAAO,GAAG,CAAA,MAAA,IAAI,CAAC,sBAAsB,0CAAE,UAAU,EAAC,CAAC,CAAC,MAAA,MAAA,IAAI,CAAC,sBAAsB,0CAAE,WAAW,mCAAI,IAAI,CAAC,CAAC,CAAC,MAAA,MAAA,IAAI,CAAC,sBAAsB,0CAAE,OAAO,mCAAI,IAAI,CAAC;wBACpJ,MAAM;oBACV,KAAK,mBAAmB,CAAC,cAAc;wBACnC,IAAI,IAAI,CAAC,oBAAoB,EAAE;4BAC3B,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;yBAC/C;wBACD,MAAM;iBACb;gBACD,IAAI,IAAI,CAAC,aAAa,KAAK,mBAAmB,CAAC,OAAO,EAAE;oBACpD,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;oBAC3C,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACjB,MAAM,CAAC,iBAAiB,CAAC,qBAAqB,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,kBAAkB,EAAE,mCAAI,IAAI,CAAC,CAAC;qBAC1F;iBACJ;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB;IACT,aAAa;;QAChB,IAAI,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,EAAE;YACvC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YACnE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7D,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SACxE;QAED,IAAI,MAAA,IAAI,CAAC,oBAAoB,0CAAE,YAAY,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YACrE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;SAC1E;QAED,IAAI,MAAA,IAAI,CAAC,sBAAsB,0CAAE,YAAY,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;YACvE,iJAAiJ;YACjJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAClE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;SAC5E;IACL,CAAC;IAED,gBAAgB;IACT,OAAO,CAAC,WAAiC;;QAC5C,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACpD,OAAO;SACV;QAED,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;QAE9D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAEnD,4CAA4C;QAC5C,IAAI,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,EAAE;YACvC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAEnE,WAAW,CAAC,kBAAkB,EAAE,CAAC;YAEjC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;SACxE;QAED,8CAA8C;QAC9C,IAAI,MAAA,IAAI,CAAC,oBAAoB,0CAAE,YAAY,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAErE,WAAW,CAAC,oBAAoB,EAAE,CAAC;YAEnC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;SAC1E;QAED,gDAAgD;QAChD,IAAI,MAAA,IAAI,CAAC,sBAAsB,0CAAE,YAAY,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;YAEvE,WAAW,CAAC,sBAAsB,EAAE,CAAC;YAErC,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;SAC5E;QAED,8BAA8B;QAC9B,MAAA,IAAI,CAAC,kBAAkB,0CAAE,sBAAsB,EAAE,CAAC;QAClD,MAAA,IAAI,CAAC,oBAAoB,0CAAE,sBAAsB,EAAE,CAAC;QACpD,MAAA,IAAI,CAAC,sBAAsB,0CAAE,sBAAsB,EAAE,CAAC;QAEtD,IAAI,mBAAmB,EAAE;YACrB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;SACrD;IACL,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,iBAAiB,GAAG,KAAK;;QACpC,IAAI,CAAC,iBAAiB,EAAE;YACpB,MAAA,IAAI,CAAC,kBAAkB,0CAAE,OAAO,EAAE,CAAC;YACnC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAE/B,MAAA,IAAI,CAAC,oBAAoB,0CAAE,OAAO,EAAE,CAAC;YACrC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;YAEjC,MAAA,IAAI,CAAC,sBAAsB,0CAAE,OAAO,EAAE,CAAC;YACvC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;SACtC;QAED,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,OAAO,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SAC3D;QACD,MAAA,IAAI,CAAC,kBAAkB,0CAAE,OAAO,EAAE,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAE/B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACrC,CAAC;CACJ","sourcesContent":["import type { Camera } from \"core/Cameras/camera\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { InternalTexture } from \"core/Materials/Textures/internalTexture\";\r\nimport type { ThinTexture } from \"core/Materials/Textures/thinTexture\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Matrix, Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nimport type { FluidRenderingObject } from \"./fluidRenderingObject\";\r\nimport { FluidRenderingTextures } from \"./fluidRenderingTextures\";\r\n\r\n/**\r\n * Textures that can be displayed as a debugging tool\r\n */\r\nexport enum FluidRenderingDebug {\r\n    DepthTexture,\r\n    DepthBlurredTexture,\r\n    ThicknessTexture,\r\n    ThicknessBlurredTexture,\r\n    DiffuseTexture,\r\n    Normals,\r\n    DiffuseRendering,\r\n}\r\n\r\n/**\r\n * Class used to render an object as a fluid thanks to different render target textures (depth, thickness, diffuse)\r\n */\r\nexport class FluidRenderingTargetRenderer {\r\n    protected _scene: Scene;\r\n    protected _camera: Nullable<Camera>;\r\n    protected _engine: Engine;\r\n\r\n    protected _invProjectionMatrix: Matrix;\r\n    protected _depthClearColor: Color4;\r\n    protected _thicknessClearColor: Color4;\r\n\r\n    protected _needInitialization: boolean;\r\n\r\n    /**\r\n     * Returns true if the class needs to be reinitialized (because of changes in parameterization)\r\n     */\r\n    public get needInitialization() {\r\n        return this._needInitialization;\r\n    }\r\n\r\n    private _generateDiffuseTexture = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the diffuse texture should be generated and used for the rendering\r\n     */\r\n    public get generateDiffuseTexture() {\r\n        return this._generateDiffuseTexture;\r\n    }\r\n\r\n    public set generateDiffuseTexture(generate: boolean) {\r\n        if (this._generateDiffuseTexture === generate) {\r\n            return;\r\n        }\r\n\r\n        this._generateDiffuseTexture = generate;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /**\r\n     * Fluid color. Not used if generateDiffuseTexture is true\r\n     */\r\n    public fluidColor = new Color3(0.085, 0.6375, 0.765);\r\n\r\n    /**\r\n     * Density of the fluid (positive number). The higher the value, the more opaque the fluid.\r\n     */\r\n    public density = 2;\r\n\r\n    /**\r\n     * Strength of the refraction (positive number, but generally between 0 and 0.3).\r\n     */\r\n    public refractionStrength = 0.1;\r\n\r\n    /**\r\n     * Strength of the fresnel effect (value between 0 and 1). Lower the value if you want to soften the specular effect\r\n     */\r\n    public fresnelClamp = 1.0;\r\n\r\n    /**\r\n     * Strength of the specular power (positive number). Increase the value to make the specular effect more concentrated\r\n     */\r\n    public specularPower = 250;\r\n\r\n    /**\r\n     * Minimum thickness of the particles (positive number). If useFixedThickness is true, minimumThickness is the thickness used\r\n     */\r\n    public minimumThickness = 0;\r\n\r\n    /**\r\n     * Direction of the light. The fluid is assumed to be lit by a directional light\r\n     */\r\n    public dirLight: Vector3 = new Vector3(-2, -1, 1).normalize();\r\n\r\n    private _debugFeature: FluidRenderingDebug = FluidRenderingDebug.DepthBlurredTexture;\r\n\r\n    /**\r\n     * Gets or sets the feature (texture) to be debugged. Not used if debug is false\r\n     */\r\n    public get debugFeature() {\r\n        return this._debugFeature;\r\n    }\r\n\r\n    public set debugFeature(feature: FluidRenderingDebug) {\r\n        if (this._debugFeature === feature) {\r\n            return;\r\n        }\r\n\r\n        this._needInitialization = true;\r\n        this._debugFeature = feature;\r\n    }\r\n\r\n    private _debug = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if we should display a specific texture (given by debugFeature) for debugging purpose\r\n     */\r\n    public get debug() {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(debug: boolean) {\r\n        if (this._debug === debug) {\r\n            return;\r\n        }\r\n\r\n        this._debug = debug;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _environmentMap?: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets the environment map used for the reflection part of the shading\r\n     * If null, no map will be used. If undefined, the scene.environmentMap will be used (if defined)\r\n     */\r\n    public get environmentMap() {\r\n        return this._environmentMap;\r\n    }\r\n\r\n    public set environmentMap(map: Nullable<BaseTexture> | undefined) {\r\n        if (this._environmentMap === map) {\r\n            return;\r\n        }\r\n\r\n        this._needInitialization = true;\r\n        this._environmentMap = map;\r\n    }\r\n\r\n    private _enableBlurDepth = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the depth texture should be blurred\r\n     */\r\n    public get enableBlurDepth() {\r\n        return this._enableBlurDepth;\r\n    }\r\n\r\n    public set enableBlurDepth(enable: boolean) {\r\n        if (this._enableBlurDepth === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurDepth = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthSizeDivisor = 1;\r\n\r\n    /**\r\n     * Gets or sets the depth size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the depth\r\n     * For eg. if blurDepthSizeDivisor=2, the texture used to blur the depth will be half the size of the depth texture\r\n     */\r\n    public get blurDepthSizeDivisor() {\r\n        return this._blurDepthSizeDivisor;\r\n    }\r\n\r\n    public set blurDepthSizeDivisor(scale: number) {\r\n        if (this._blurDepthSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurDepthFilterSize = 7;\r\n\r\n    /**\r\n     * Size of the kernel used to filter the depth blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurDepthFilterSize() {\r\n        return this._blurDepthFilterSize;\r\n    }\r\n\r\n    public set blurDepthFilterSize(filterSize: number) {\r\n        if (this._blurDepthFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthNumIterations = 3;\r\n\r\n    /**\r\n     * Number of blurring iterations used to generate the depth blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurDepthNumIterations() {\r\n        return this._blurDepthNumIterations;\r\n    }\r\n\r\n    public set blurDepthNumIterations(numIterations: number) {\r\n        if (this._blurDepthNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthMaxFilterSize = 100;\r\n\r\n    /**\r\n     * Maximum size of the kernel used to blur the depth texture (positive number, generally between 1 and 200 - higher values will require more processing power from the GPU when the particles are larger on screen)\r\n     */\r\n    public get blurDepthMaxFilterSize() {\r\n        return this._blurDepthMaxFilterSize;\r\n    }\r\n\r\n    public set blurDepthMaxFilterSize(maxFilterSize: number) {\r\n        if (this._blurDepthMaxFilterSize === maxFilterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthMaxFilterSize = maxFilterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurDepthDepthScale = 10;\r\n\r\n    /**\r\n     * Depth weight in the calculation when applying the bilateral blur to generate the depth blur texture (positive number, generally between 0 and 100)\r\n     */\r\n    public get blurDepthDepthScale() {\r\n        return this._blurDepthDepthScale;\r\n    }\r\n\r\n    public set blurDepthDepthScale(scale: number) {\r\n        if (this._blurDepthDepthScale === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurDepthDepthScale = scale;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _enableBlurThickness = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the thickness texture should be blurred\r\n     */\r\n    public get enableBlurThickness() {\r\n        return this._enableBlurThickness;\r\n    }\r\n\r\n    public set enableBlurThickness(enable: boolean) {\r\n        if (this._enableBlurThickness === enable) {\r\n            return;\r\n        }\r\n\r\n        this._enableBlurThickness = enable;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessSizeDivisor = 1;\r\n\r\n    /**\r\n     * Gets or sets the thickness size divisor (positive number, generally between 1 and 4), which is used as a divisor when creating the texture used for blurring the thickness\r\n     * For eg. if blurThicknessSizeDivisor=2, the texture used to blur the thickness will be half the size of the thickness texture\r\n     */\r\n    public get blurThicknessSizeDivisor() {\r\n        return this._blurThicknessSizeDivisor;\r\n    }\r\n\r\n    public set blurThicknessSizeDivisor(scale: number) {\r\n        if (this._blurThicknessSizeDivisor === scale) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessSizeDivisor = scale;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _blurThicknessFilterSize = 5;\r\n\r\n    /**\r\n     * Size of the kernel used to filter the thickness blur texture (positive number, generally between 1 and 20 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurThicknessFilterSize() {\r\n        return this._blurThicknessFilterSize;\r\n    }\r\n\r\n    public set blurThicknessFilterSize(filterSize: number) {\r\n        if (this._blurThicknessFilterSize === filterSize) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessFilterSize = filterSize;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _blurThicknessNumIterations = 1;\r\n\r\n    /**\r\n     * Number of blurring iterations used to generate the thickness blur texture (positive number, generally between 1 and 10 - higher values will require more processing power from the GPU)\r\n     */\r\n    public get blurThicknessNumIterations() {\r\n        return this._blurThicknessNumIterations;\r\n    }\r\n\r\n    public set blurThicknessNumIterations(numIterations: number) {\r\n        if (this._blurThicknessNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurThicknessNumIterations = numIterations;\r\n        this._setBlurParameters();\r\n    }\r\n\r\n    private _useFixedThickness = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that a fixed thickness should be used instead of generating a thickness texture\r\n     */\r\n    public get useFixedThickness() {\r\n        return this._useFixedThickness;\r\n    }\r\n\r\n    public set useFixedThickness(use: boolean) {\r\n        if (this._useFixedThickness === use) {\r\n            return;\r\n        }\r\n\r\n        this._useFixedThickness = use;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _bgDepthTexture: Nullable<InternalTexture>;\r\n\r\n    /** @internal */\r\n    public _onUseVelocityChanged = new Observable<FluidRenderingTargetRenderer>();\r\n\r\n    private _useVelocity = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the velocity should be used when rendering the particles as a fluid.\r\n     * Note: the vertex buffers must contain a \"velocity\" buffer for this to work!\r\n     */\r\n    public get useVelocity() {\r\n        return this._useVelocity;\r\n    }\r\n\r\n    public set useVelocity(use: boolean) {\r\n        if (this._useVelocity === use) {\r\n            return;\r\n        }\r\n\r\n        this._useVelocity = use;\r\n        this._needInitialization = true;\r\n        this._onUseVelocityChanged.notifyObservers(this);\r\n    }\r\n\r\n    private _depthMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the depth texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get depthMapSize() {\r\n        return this._depthMapSize;\r\n    }\r\n\r\n    public set depthMapSize(size: Nullable<number>) {\r\n        if (this._depthMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._depthMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _thicknessMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the thickness texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get thicknessMapSize() {\r\n        return this._thicknessMapSize;\r\n    }\r\n\r\n    public set thicknessMapSize(size: Nullable<number>) {\r\n        if (this._thicknessMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._thicknessMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _diffuseMapSize: Nullable<number> = null;\r\n\r\n    /**\r\n     * Defines the size of the diffuse texture.\r\n     * If null, the texture will have the size of the screen\r\n     */\r\n    public get diffuseMapSize() {\r\n        return this._diffuseMapSize;\r\n    }\r\n\r\n    public set diffuseMapSize(size: Nullable<number>) {\r\n        if (this._diffuseMapSize === size) {\r\n            return;\r\n        }\r\n\r\n        this._diffuseMapSize = size;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    private _samples = 1;\r\n\r\n    /**\r\n     * Gets or sets the number of samples used by MSAA\r\n     * Note: changing this value in WebGL does not work because depth/stencil textures can't be created with MSAA (see https://github.com/BabylonJS/Babylon.js/issues/12444)\r\n     */\r\n    public get samples() {\r\n        return this._samples;\r\n    }\r\n\r\n    public set samples(samples: number) {\r\n        if (this._samples === samples) {\r\n            return;\r\n        }\r\n\r\n        this._samples = samples;\r\n        this._needInitialization = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the camera used for the rendering\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderPostProcess: Nullable<PostProcess>;\r\n\r\n    /** @internal */\r\n    public _depthRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /** @internal */\r\n    public _diffuseRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /** @internal */\r\n    public _thicknessRenderTarget: Nullable<FluidRenderingTextures>;\r\n\r\n    /**\r\n     * Creates an instance of the class\r\n     * @param scene Scene used to render the fluid object into\r\n     * @param camera Camera used to render the fluid object. If not provided, use the active camera of the scene instead\r\n     */\r\n    constructor(scene: Scene, camera?: Camera) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._camera = camera ?? scene.activeCamera;\r\n        this._needInitialization = true;\r\n        this._bgDepthTexture = null;\r\n\r\n        this._invProjectionMatrix = new Matrix();\r\n        this._depthClearColor = new Color4(1e6, 1e6, 1e6, 1);\r\n        this._thicknessClearColor = new Color4(0, 0, 0, 1);\r\n\r\n        this._depthRenderTarget = null;\r\n        this._diffuseRenderTarget = null;\r\n        this._thicknessRenderTarget = null;\r\n\r\n        this._renderPostProcess = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _initialize(): void {\r\n        this.dispose();\r\n\r\n        this._needInitialization = false;\r\n\r\n        const depthWidth = this._depthMapSize ?? this._engine.getRenderWidth();\r\n        const depthHeight =\r\n            this._depthMapSize !== null ? Math.round((this._depthMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth()) : this._engine.getRenderHeight();\r\n\r\n        this._depthRenderTarget = new FluidRenderingTextures(\r\n            \"Depth\",\r\n            this._scene,\r\n            depthWidth,\r\n            depthHeight,\r\n            depthWidth,\r\n            depthHeight,\r\n            Constants.TEXTURETYPE_FLOAT,\r\n            Constants.TEXTUREFORMAT_RG,\r\n            Constants.TEXTURETYPE_FLOAT,\r\n            Constants.TEXTUREFORMAT_RG,\r\n            false,\r\n            this._camera,\r\n            true,\r\n            this._samples\r\n        );\r\n\r\n        this._initializeRenderTarget(this._depthRenderTarget);\r\n\r\n        if (this.generateDiffuseTexture) {\r\n            const diffuseWidth = this._diffuseMapSize ?? this._engine.getRenderWidth();\r\n            const diffuseHeight =\r\n                this._diffuseMapSize !== null\r\n                    ? Math.round((this._diffuseMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth())\r\n                    : this._engine.getRenderHeight();\r\n\r\n            this._diffuseRenderTarget = new FluidRenderingTextures(\r\n                \"Diffuse\",\r\n                this._scene,\r\n                diffuseWidth,\r\n                diffuseHeight,\r\n                0,\r\n                0,\r\n                Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                Constants.TEXTUREFORMAT_RGBA,\r\n                Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n                Constants.TEXTUREFORMAT_RGBA,\r\n                true,\r\n                this._camera,\r\n                true,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._diffuseRenderTarget);\r\n        }\r\n\r\n        const thicknessWidth = this._thicknessMapSize ?? this._engine.getRenderWidth();\r\n        const thicknessHeight =\r\n            this._thicknessMapSize !== null\r\n                ? Math.round((this._thicknessMapSize * this._engine.getRenderHeight()) / this._engine.getRenderWidth())\r\n                : this._engine.getRenderHeight();\r\n\r\n        if (!this._useFixedThickness) {\r\n            this._thicknessRenderTarget = new FluidRenderingTextures(\r\n                \"Thickness\",\r\n                this._scene,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                thicknessWidth,\r\n                thicknessHeight,\r\n                Constants.TEXTURETYPE_HALF_FLOAT,\r\n                Constants.TEXTUREFORMAT_R,\r\n                Constants.TEXTURETYPE_HALF_FLOAT,\r\n                Constants.TEXTUREFORMAT_R,\r\n                true,\r\n                this._camera,\r\n                false,\r\n                this._samples\r\n            );\r\n\r\n            this._initializeRenderTarget(this._thicknessRenderTarget);\r\n        }\r\n\r\n        this._createLiquidRenderingPostProcess();\r\n    }\r\n\r\n    protected _setBlurParameters(renderTarget: Nullable<FluidRenderingTextures> = null): void {\r\n        if (renderTarget === null || renderTarget === this._depthRenderTarget) {\r\n            this._setBlurDepthParameters();\r\n        }\r\n        if (renderTarget === null || renderTarget === this._thicknessRenderTarget) {\r\n            this._setBlurThicknessParameters();\r\n        }\r\n    }\r\n\r\n    protected _setBlurDepthParameters(): void {\r\n        if (!this._depthRenderTarget) {\r\n            return;\r\n        }\r\n        this._depthRenderTarget.blurFilterSize = this.blurDepthFilterSize;\r\n        this._depthRenderTarget.blurMaxFilterSize = this.blurDepthMaxFilterSize;\r\n        this._depthRenderTarget.blurNumIterations = this.blurDepthNumIterations;\r\n        this._depthRenderTarget.blurDepthScale = this.blurDepthDepthScale;\r\n    }\r\n\r\n    protected _setBlurThicknessParameters(): void {\r\n        if (!this._thicknessRenderTarget) {\r\n            return;\r\n        }\r\n        this._thicknessRenderTarget.blurFilterSize = this.blurThicknessFilterSize;\r\n        this._thicknessRenderTarget.blurNumIterations = this.blurThicknessNumIterations;\r\n    }\r\n\r\n    protected _initializeRenderTarget(renderTarget: FluidRenderingTextures): void {\r\n        if (renderTarget !== this._diffuseRenderTarget) {\r\n            renderTarget.enableBlur = renderTarget === this._depthRenderTarget ? this.enableBlurDepth : this.enableBlurThickness;\r\n            renderTarget.blurSizeDivisor = renderTarget === this._depthRenderTarget ? this.blurDepthSizeDivisor : this.blurThicknessSizeDivisor;\r\n        }\r\n\r\n        this._setBlurParameters(renderTarget);\r\n\r\n        renderTarget.initialize();\r\n    }\r\n\r\n    protected _createLiquidRenderingPostProcess(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        const uniformNames = [\r\n            \"viewMatrix\",\r\n            \"projectionMatrix\",\r\n            \"invProjectionMatrix\",\r\n            \"texelSize\",\r\n            \"dirLight\",\r\n            \"cameraFar\",\r\n            \"density\",\r\n            \"refractionStrength\",\r\n            \"fresnelClamp\",\r\n            \"specularPower\",\r\n        ];\r\n        const samplerNames = [\"depthSampler\"];\r\n        const defines = [];\r\n\r\n        this.dispose(true);\r\n\r\n        if (!this._camera) {\r\n            return;\r\n        }\r\n\r\n        const texture = this._depthRenderTarget!.enableBlur ? this._depthRenderTarget!.textureBlur! : this._depthRenderTarget!.texture!;\r\n        const texelSize = new Vector2(1 / texture.getSize().width, 1 / texture.getSize().height);\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            defines.push(\"#define FLUIDRENDERING_RHS\");\r\n        }\r\n\r\n        if (this._environmentMap !== null) {\r\n            const envMap = this._environmentMap ?? this._scene.environmentTexture;\r\n            if (envMap) {\r\n                samplerNames.push(\"reflectionSampler\");\r\n                defines.push(\"#define FLUIDRENDERING_ENVIRONMENT\");\r\n            }\r\n        }\r\n\r\n        if (this._diffuseRenderTarget) {\r\n            samplerNames.push(\"diffuseSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_DIFFUSETEXTURE\");\r\n        } else {\r\n            uniformNames.push(\"diffuseColor\");\r\n        }\r\n\r\n        if (this._useVelocity) {\r\n            samplerNames.push(\"velocitySampler\");\r\n            defines.push(\"#define FLUIDRENDERING_VELOCITY\");\r\n        }\r\n\r\n        if (this._useFixedThickness) {\r\n            uniformNames.push(\"thickness\");\r\n            samplerNames.push(\"bgDepthSampler\");\r\n            defines.push(\"#define FLUIDRENDERING_FIXED_THICKNESS\");\r\n        } else {\r\n            uniformNames.push(\"minimumThickness\");\r\n            samplerNames.push(\"thicknessSampler\");\r\n        }\r\n\r\n        if (this._debug) {\r\n            defines.push(\"#define FLUIDRENDERING_DEBUG\");\r\n            if (this._debugFeature === FluidRenderingDebug.Normals) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_SHOWNORMAL\");\r\n            } else if (this._debugFeature === FluidRenderingDebug.DiffuseRendering) {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_DIFFUSERENDERING\");\r\n            } else {\r\n                defines.push(\"#define FLUIDRENDERING_DEBUG_TEXTURE\");\r\n                samplerNames.push(\"debugSampler\");\r\n                if (this._debugFeature === FluidRenderingDebug.DepthTexture || this._debugFeature === FluidRenderingDebug.DepthBlurredTexture) {\r\n                    defines.push(\"#define FLUIDRENDERING_DEBUG_DEPTH\");\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderPostProcess = new PostProcess(\r\n            \"FluidRendering\",\r\n            \"fluidRenderingRender\",\r\n            uniformNames,\r\n            samplerNames,\r\n            1,\r\n            null,\r\n            Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            false,\r\n            null,\r\n            Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            undefined\r\n        );\r\n        this._renderPostProcess.updateEffect(defines.join(\"\\n\"));\r\n\r\n        this._renderPostProcess.samples = this._samples;\r\n        this._renderPostProcess.onApplyObservable.add((effect) => {\r\n            this._invProjectionMatrix.copyFrom(this._scene.getProjectionMatrix());\r\n            this._invProjectionMatrix.invert();\r\n\r\n            if (engine.isWebGPU) {\r\n                effect.setTextureSampler(\"textureSamplerSampler\", this._renderPostProcess!.inputTexture.texture);\r\n            }\r\n\r\n            if (!this._depthRenderTarget!.enableBlur) {\r\n                effect.setTexture(\"depthSampler\", this._depthRenderTarget!.texture);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"depthSamplerSampler\", this._depthRenderTarget!.texture?.getInternalTexture() ?? null);\r\n                }\r\n            } else {\r\n                effect.setTexture(\"depthSampler\", this._depthRenderTarget!.textureBlur);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"depthSamplerSampler\", this._depthRenderTarget!.textureBlur?.getInternalTexture() ?? null);\r\n                }\r\n            }\r\n            if (this._diffuseRenderTarget) {\r\n                if (!this._diffuseRenderTarget.enableBlur) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"diffuseSamplerSampler\", this._diffuseRenderTarget.texture?.getInternalTexture() ?? null);\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseRenderTarget.textureBlur);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"diffuseSamplerSampler\", this._diffuseRenderTarget.textureBlur?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            } else {\r\n                effect.setColor3(\"diffuseColor\", this.fluidColor);\r\n            }\r\n            if (this._useFixedThickness) {\r\n                effect.setFloat(\"thickness\", this.minimumThickness);\r\n                effect._bindTexture(\"bgDepthSampler\", this._bgDepthTexture);\r\n                if (engine.isWebGPU) {\r\n                    effect.setTextureSampler(\"bgDepthSamplerSampler\", this._bgDepthTexture ?? null);\r\n                }\r\n            } else {\r\n                if (!this._thicknessRenderTarget!.enableBlur) {\r\n                    effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget!.texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"thicknessSamplerSampler\", this._thicknessRenderTarget!.texture?.getInternalTexture() ?? null);\r\n                    }\r\n                } else {\r\n                    effect.setTexture(\"thicknessSampler\", this._thicknessRenderTarget!.textureBlur);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"thicknessSamplerSampler\", this._thicknessRenderTarget!.textureBlur?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n                effect.setFloat(\"minimumThickness\", this.minimumThickness);\r\n            }\r\n\r\n            if (this._environmentMap !== null) {\r\n                const envMap = this._environmentMap ?? this._scene.environmentTexture;\r\n                if (envMap) {\r\n                    effect.setTexture(\"reflectionSampler\", envMap);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"reflectionSamplerSampler\", envMap?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            }\r\n\r\n            effect.setMatrix(\"viewMatrix\", this._scene.getViewMatrix());\r\n            effect.setMatrix(\"invProjectionMatrix\", this._invProjectionMatrix);\r\n            effect.setMatrix(\"projectionMatrix\", this._scene.getProjectionMatrix());\r\n            effect.setVector2(\"texelSize\", texelSize);\r\n            effect.setFloat(\"density\", this.density);\r\n            effect.setFloat(\"refractionStrength\", this.refractionStrength);\r\n            effect.setFloat(\"fresnelClamp\", this.fresnelClamp);\r\n            effect.setFloat(\"specularPower\", this.specularPower);\r\n\r\n            effect.setVector3(\"dirLight\", this.dirLight);\r\n\r\n            effect.setFloat(\"cameraFar\", this._camera!.maxZ);\r\n\r\n            if (this._debug) {\r\n                let texture: Nullable<ThinTexture> = null;\r\n                switch (this._debugFeature) {\r\n                    case FluidRenderingDebug.DepthTexture:\r\n                        texture = this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.DepthBlurredTexture:\r\n                        texture = this._depthRenderTarget!.enableBlur ? this._depthRenderTarget!.textureBlur : this._depthRenderTarget!.texture;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessTexture:\r\n                        texture = this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.ThicknessBlurredTexture:\r\n                        texture = this._thicknessRenderTarget?.enableBlur ? this._thicknessRenderTarget?.textureBlur ?? null : this._thicknessRenderTarget?.texture ?? null;\r\n                        break;\r\n                    case FluidRenderingDebug.DiffuseTexture:\r\n                        if (this._diffuseRenderTarget) {\r\n                            texture = this._diffuseRenderTarget.texture;\r\n                        }\r\n                        break;\r\n                }\r\n                if (this._debugFeature !== FluidRenderingDebug.Normals) {\r\n                    effect.setTexture(\"debugSampler\", texture);\r\n                    if (engine.isWebGPU) {\r\n                        effect.setTextureSampler(\"debugSamplerSampler\", texture?.getInternalTexture() ?? null);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    public _clearTargets(): void {\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n            this._engine.clear(this._depthClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\r\n        }\r\n\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n            this._engine.clear(this._thicknessClearColor, true, true, false);\r\n            this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n        }\r\n\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n            // we don't clear the depth buffer because it is the depth buffer that is coming from the scene and that we reuse in the thickness rendering pass\r\n            this._engine.clear(this._thicknessClearColor, true, false, false);\r\n            this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _render(fluidObject: FluidRenderingObject): void {\r\n        if (this._needInitialization || !fluidObject.isReady()) {\r\n            return;\r\n        }\r\n\r\n        const currentRenderTarget = this._engine._currentRenderTarget;\r\n\r\n        this._engine.setState(false, undefined, undefined, undefined, true);\r\n        this._engine.setDepthBuffer(true);\r\n        this._engine.setDepthWrite(true);\r\n        this._engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n\r\n        // Render the particles in the depth texture\r\n        if (this._depthRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._depthRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderDepthTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._depthRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Render the particles in the diffuse texture\r\n        if (this._diffuseRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderDiffuseTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._diffuseRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Render the particles in the thickness texture\r\n        if (this._thicknessRenderTarget?.renderTarget) {\r\n            this._engine.bindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n\r\n            fluidObject.renderThicknessTexture();\r\n\r\n            this._engine.unbindInstanceAttributes();\r\n            this._engine.unBindFramebuffer(this._thicknessRenderTarget.renderTarget);\r\n        }\r\n\r\n        // Run the blur post processes\r\n        this._depthRenderTarget?.applyBlurPostProcesses();\r\n        this._diffuseRenderTarget?.applyBlurPostProcesses();\r\n        this._thicknessRenderTarget?.applyBlurPostProcesses();\r\n\r\n        if (currentRenderTarget) {\r\n            this._engine.bindFramebuffer(currentRenderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all the ressources used by the class\r\n     * @param onlyPostProcesses If true, releases only the ressources used by the render post processes\r\n     */\r\n    public dispose(onlyPostProcesses = false): void {\r\n        if (!onlyPostProcesses) {\r\n            this._depthRenderTarget?.dispose();\r\n            this._depthRenderTarget = null;\r\n\r\n            this._diffuseRenderTarget?.dispose();\r\n            this._diffuseRenderTarget = null;\r\n\r\n            this._thicknessRenderTarget?.dispose();\r\n            this._thicknessRenderTarget = null;\r\n        }\r\n\r\n        if (this._renderPostProcess && this._camera) {\r\n            this._camera.detachPostProcess(this._renderPostProcess);\r\n        }\r\n        this._renderPostProcess?.dispose();\r\n        this._renderPostProcess = null;\r\n\r\n        this._needInitialization = false;\r\n    }\r\n}\r\n"]}