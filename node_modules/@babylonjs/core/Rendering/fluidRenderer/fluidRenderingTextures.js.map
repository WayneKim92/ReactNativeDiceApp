{"version":3,"file":"fluidRenderingTextures.js","sourceRoot":"","sources":["../../../../../dev/core/src/Rendering/fluidRenderer/fluidRenderingTextures.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Camera } from \"core/Cameras/camera\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { Engine } from \"core/Engines/engine\";\r\nimport type { RenderTargetWrapper } from \"core/Engines/renderTargetWrapper\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { ThinTexture } from \"core/Materials/Textures/thinTexture\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { PostProcess } from \"core/PostProcesses/postProcess\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\n/** @internal */\r\nexport class FluidRenderingTextures {\r\n    protected _name: string;\r\n    protected _scene: Scene;\r\n    protected _camera: Nullable<Camera>;\r\n    protected _engine: Engine;\r\n    protected _width: number;\r\n    protected _height: number;\r\n    protected _blurTextureSizeX: number;\r\n    protected _blurTextureSizeY: number;\r\n    protected _textureType: number;\r\n    protected _textureFormat: number;\r\n    protected _blurTextureType: number;\r\n    protected _blurTextureFormat: number;\r\n    protected _useStandardBlur: boolean;\r\n    protected _generateDepthBuffer: boolean;\r\n    protected _samples: number;\r\n    protected _postProcessRunningIndex: number;\r\n\r\n    protected _rt: Nullable<RenderTargetWrapper>;\r\n    protected _texture: Nullable<Texture>;\r\n    protected _rtBlur: Nullable<RenderTargetWrapper>;\r\n    protected _textureBlurred: Nullable<Texture>;\r\n    protected _blurPostProcesses: Nullable<PostProcess[]>;\r\n\r\n    public enableBlur = true;\r\n\r\n    public blurSizeDivisor = 1;\r\n\r\n    public blurFilterSize = 7;\r\n\r\n    private _blurNumIterations = 3;\r\n\r\n    public get blurNumIterations() {\r\n        return this._blurNumIterations;\r\n    }\r\n\r\n    public set blurNumIterations(numIterations: number) {\r\n        if (this._blurNumIterations === numIterations) {\r\n            return;\r\n        }\r\n\r\n        this._blurNumIterations = numIterations;\r\n        if (this._blurPostProcesses !== null) {\r\n            const blurX = this._blurPostProcesses[0];\r\n            const blurY = this._blurPostProcesses[1];\r\n\r\n            this._blurPostProcesses = [];\r\n            for (let i = 0; i < this._blurNumIterations * 2; ++i) {\r\n                this._blurPostProcesses[i] = i & 1 ? blurY : blurX;\r\n            }\r\n        }\r\n    }\r\n\r\n    public blurMaxFilterSize = 100;\r\n\r\n    public blurDepthScale = 10;\r\n\r\n    public particleSize = 0.02;\r\n\r\n    public onDisposeObservable: Observable<FluidRenderingTextures> = new Observable<FluidRenderingTextures>();\r\n\r\n    public get renderTarget() {\r\n        return this._rt;\r\n    }\r\n\r\n    public get renderTargetBlur() {\r\n        return this._rtBlur;\r\n    }\r\n\r\n    public get texture() {\r\n        return this._texture;\r\n    }\r\n\r\n    public get textureBlur() {\r\n        return this._textureBlurred;\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        width: number,\r\n        height: number,\r\n        blurTextureSizeX: number,\r\n        blurTextureSizeY: number,\r\n        textureType: number = Constants.TEXTURETYPE_FLOAT,\r\n        textureFormat: number = Constants.TEXTUREFORMAT_R,\r\n        blurTextureType: number = Constants.TEXTURETYPE_FLOAT,\r\n        blurTextureFormat: number = Constants.TEXTUREFORMAT_R,\r\n        useStandardBlur = false,\r\n        camera: Nullable<Camera> = null,\r\n        generateDepthBuffer = true,\r\n        samples = 1\r\n    ) {\r\n        this._name = name;\r\n        this._scene = scene;\r\n        this._camera = camera;\r\n        this._engine = scene.getEngine();\r\n        this._width = width;\r\n        this._height = height;\r\n        this._blurTextureSizeX = blurTextureSizeX;\r\n        this._blurTextureSizeY = blurTextureSizeY;\r\n        this._textureType = textureType;\r\n        this._textureFormat = textureFormat;\r\n        this._blurTextureType = blurTextureType;\r\n        this._blurTextureFormat = blurTextureFormat;\r\n        this._useStandardBlur = useStandardBlur;\r\n        this._generateDepthBuffer = generateDepthBuffer;\r\n        this._samples = samples;\r\n        this._postProcessRunningIndex = 0;\r\n        this.enableBlur = blurTextureSizeX !== 0 && blurTextureSizeY !== 0;\r\n\r\n        this._rt = null;\r\n        this._texture = null;\r\n        this._rtBlur = null;\r\n        this._textureBlurred = null;\r\n        this._blurPostProcesses = null;\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.dispose();\r\n\r\n        this._createRenderTarget();\r\n\r\n        if (this.enableBlur && this._texture) {\r\n            const [rtBlur, textureBlurred, blurPostProcesses] = this._createBlurPostProcesses(\r\n                this._texture,\r\n                this._blurTextureType,\r\n                this._blurTextureFormat,\r\n                this.blurSizeDivisor,\r\n                this._name,\r\n                this._useStandardBlur\r\n            );\r\n            this._rtBlur = rtBlur;\r\n            this._textureBlurred = textureBlurred;\r\n            this._blurPostProcesses = blurPostProcesses;\r\n        }\r\n    }\r\n\r\n    public applyBlurPostProcesses(): void {\r\n        if (this.enableBlur && this._blurPostProcesses) {\r\n            this._postProcessRunningIndex = 0;\r\n            this._scene.postProcessManager.directRender(this._blurPostProcesses, this._rtBlur, true);\r\n            this._engine.unBindFramebuffer(this._rtBlur!);\r\n        }\r\n    }\r\n\r\n    protected _createRenderTarget(): void {\r\n        this._rt = this._engine.createRenderTargetTexture(\r\n            { width: this._width, height: this._height },\r\n            {\r\n                generateMipMaps: false,\r\n                type: this._textureType,\r\n                format: this._textureFormat,\r\n                samplingMode: Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                generateDepthBuffer: this._generateDepthBuffer,\r\n                generateStencilBuffer: false,\r\n                samples: this._samples,\r\n                label: `FluidRenderingRTT-${this._name}`,\r\n            }\r\n        );\r\n\r\n        const renderTexture = this._rt.texture!;\r\n\r\n        renderTexture.incrementReferences();\r\n\r\n        this._texture = new Texture(null, this._scene);\r\n        this._texture.name = \"rtt\" + this._name;\r\n        this._texture._texture = renderTexture;\r\n        this._texture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._texture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._texture.anisotropicFilteringLevel = 1;\r\n    }\r\n\r\n    protected _createBlurPostProcesses(\r\n        textureBlurSource: ThinTexture,\r\n        textureType: number,\r\n        textureFormat: number,\r\n        blurSizeDivisor: number,\r\n        debugName: string,\r\n        useStandardBlur = false\r\n    ): [RenderTargetWrapper, Texture, PostProcess[]] {\r\n        const engine = this._scene.getEngine();\r\n        const targetSize = new Vector2(Math.floor(this._blurTextureSizeX / blurSizeDivisor), Math.floor(this._blurTextureSizeY / blurSizeDivisor));\r\n        const useBilinearFiltering =\r\n            (textureType === Constants.TEXTURETYPE_FLOAT && engine.getCaps().textureFloatLinearFiltering) ||\r\n            (textureType === Constants.TEXTURETYPE_HALF_FLOAT && engine.getCaps().textureHalfFloatLinearFiltering);\r\n\r\n        const rtBlur = this._engine.createRenderTargetTexture(\r\n            { width: targetSize.x, height: targetSize.y },\r\n            {\r\n                generateMipMaps: false,\r\n                type: textureType,\r\n                format: textureFormat,\r\n                samplingMode: useBilinearFiltering ? Constants.TEXTURE_BILINEAR_SAMPLINGMODE : Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n                samples: this._samples,\r\n                label: `FluidRenderingRTTBlur-${debugName}`,\r\n            }\r\n        );\r\n\r\n        const renderTexture = rtBlur.texture!;\r\n\r\n        renderTexture.incrementReferences();\r\n\r\n        const texture = new Texture(null, this._scene);\r\n        texture.name = \"rttBlurred\" + debugName;\r\n        texture._texture = renderTexture;\r\n        texture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        texture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        texture.anisotropicFilteringLevel = 1;\r\n\r\n        if (useStandardBlur) {\r\n            const kernelBlurXPostprocess = new PostProcess(\r\n                \"BilateralBlurX\",\r\n                \"fluidRenderingStandardBlur\",\r\n                [\"filterSize\", \"blurDir\"],\r\n                null,\r\n                1,\r\n                null,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurXPostprocess.samples = this._samples;\r\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                if (this._postProcessRunningIndex === 0) {\r\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\r\n                } else {\r\n                    effect._bindTexture(\"textureSampler\", kernelBlurXPostprocess.inputTexture.texture);\r\n                }\r\n                effect.setInt(\"filterSize\", this.blurFilterSize);\r\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurXPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\r\n\r\n            const kernelBlurYPostprocess = new PostProcess(\r\n                \"BilateralBlurY\",\r\n                \"fluidRenderingStandardBlur\",\r\n                [\"filterSize\", \"blurDir\"],\r\n                null,\r\n                1,\r\n                null,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurYPostprocess.samples = this._samples;\r\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setInt(\"filterSize\", this.blurFilterSize);\r\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurYPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\r\n\r\n            kernelBlurXPostprocess.autoClear = false;\r\n            kernelBlurYPostprocess.autoClear = false;\r\n\r\n            const blurList = [];\r\n            for (let i = 0; i < this._blurNumIterations * 2; ++i) {\r\n                blurList[i] = i & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess;\r\n            }\r\n\r\n            return [rtBlur, texture, blurList];\r\n        } else {\r\n            const uniforms: string[] = [\"maxFilterSize\", \"blurDir\", \"projectedParticleConstant\", \"depthThreshold\"];\r\n\r\n            const kernelBlurXPostprocess = new PostProcess(\r\n                \"BilateralBlurX\",\r\n                \"fluidRenderingBilateralBlur\",\r\n                uniforms,\r\n                null,\r\n                1,\r\n                null,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurXPostprocess.samples = this._samples;\r\n            kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                if (this._postProcessRunningIndex === 0) {\r\n                    effect.setTexture(\"textureSampler\", textureBlurSource);\r\n                } else {\r\n                    effect._bindTexture(\"textureSampler\", kernelBlurXPostprocess.inputTexture.texture);\r\n                }\r\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\r\n                effect.setFloat2(\"blurDir\", 1 / this._blurTextureSizeX, 0);\r\n                effect.setFloat(\"projectedParticleConstant\", this._getProjectedParticleConstant());\r\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurXPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurXPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurXPostprocess);\r\n\r\n            const kernelBlurYPostprocess = new PostProcess(\r\n                \"BilateralBlurY\",\r\n                \"fluidRenderingBilateralBlur\",\r\n                uniforms,\r\n                null,\r\n                1,\r\n                null,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                engine,\r\n                true,\r\n                null,\r\n                textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                textureFormat\r\n            );\r\n            kernelBlurYPostprocess.samples = this._samples;\r\n            kernelBlurYPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setInt(\"maxFilterSize\", this.blurMaxFilterSize);\r\n                effect.setFloat2(\"blurDir\", 0, 1 / this._blurTextureSizeY);\r\n                effect.setFloat(\"projectedParticleConstant\", this._getProjectedParticleConstant());\r\n                effect.setFloat(\"depthThreshold\", this._getDepthThreshold());\r\n                this._postProcessRunningIndex++;\r\n            });\r\n            kernelBlurYPostprocess.onSizeChangedObservable.add(() => {\r\n                kernelBlurYPostprocess._textures.forEach((rt) => {\r\n                    rt.texture!.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n                    rt.texture!.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n                });\r\n            });\r\n            this._fixReusablePostProcess(kernelBlurYPostprocess);\r\n\r\n            kernelBlurXPostprocess.autoClear = false;\r\n            kernelBlurYPostprocess.autoClear = false;\r\n\r\n            const blurList = [];\r\n            for (let i = 0; i < this._blurNumIterations * 2; ++i) {\r\n                blurList[i] = i & 1 ? kernelBlurYPostprocess : kernelBlurXPostprocess;\r\n            }\r\n\r\n            return [rtBlur, texture, blurList];\r\n        }\r\n    }\r\n\r\n    private _fixReusablePostProcess(pp: PostProcess) {\r\n        if (!pp.isReusable()) {\r\n            return;\r\n        }\r\n\r\n        pp.onActivateObservable.add(() => {\r\n            // undo what calling activate() does which will make sure we will retrieve the right texture when getting the input for the post process\r\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\r\n        });\r\n        pp.onApplyObservable.add(() => {\r\n            // now we can advance to the next texture\r\n            pp._currentRenderTextureInd = (pp._currentRenderTextureInd + 1) % 2;\r\n        });\r\n    }\r\n\r\n    private _getProjectedParticleConstant() {\r\n        return (this.blurFilterSize * this.particleSize * 0.05 * (this._height / 2)) / Math.tan((this._camera?.fov ?? (45 * Math.PI) / 180) / 2);\r\n    }\r\n\r\n    private _getDepthThreshold() {\r\n        return (this.particleSize / 2) * this.blurDepthScale;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.onDisposeObservable.hasObservers()) {\r\n            this.onDisposeObservable.notifyObservers(this);\r\n        }\r\n\r\n        this._rt?.dispose();\r\n        this._rt = null;\r\n        this._texture?.dispose();\r\n        this._texture = null;\r\n        this._rtBlur?.dispose();\r\n        this._rtBlur = null;\r\n        this._textureBlurred?.dispose();\r\n        this._textureBlurred = null;\r\n        if (this._blurPostProcesses) {\r\n            this._blurPostProcesses[0].dispose();\r\n            this._blurPostProcesses[1].dispose();\r\n        }\r\n        this._blurPostProcesses = null;\r\n    }\r\n}\r\n"]}