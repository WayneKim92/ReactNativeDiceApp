{"version":3,"file":"engineFactory.js","sourceRoot":"","sources":["../../../../dev/core/src/Engines/engineFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C;;GAEG;AACH,MAAM,OAAO,aAAa;IACtB;;;;;OAKG;IACI,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAyB,EAAE,OAAY;QACnE,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,gBAAgB,CAAC;QACtD,IAAI,SAAS,EAAE;YACX,OAAO,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACpD;QACD,IAAI,MAAM,CAAC,WAAW,EAAE;YACpB,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;CACJ","sourcesContent":["import { Engine } from \"./engine\";\r\nimport { NullEngine } from \"./nullEngine\";\r\nimport { WebGPUEngine } from \"./webgpuEngine\";\r\n\r\n/**\r\n * Helper class to create the best engine depending on the current hardware\r\n */\r\nexport class EngineFactory {\r\n    /**\r\n     * Creates an engine based on the capabilities of the underlying hardware\r\n     * @param canvas Defines the canvas to use to display the result\r\n     * @param options Defines the options passed to the engine to create the context dependencies\r\n     * @returns a promise that resolves with the created engine\r\n     */\r\n    public static async CreateAsync(canvas: HTMLCanvasElement, options: any): Promise<Engine> {\r\n        const supported = await WebGPUEngine.IsSupportedAsync;\r\n        if (supported) {\r\n            return WebGPUEngine.CreateAsync(canvas, options);\r\n        }\r\n        if (Engine.IsSupported) {\r\n            return new Engine(canvas, undefined, options);\r\n        }\r\n        return new NullEngine(options);\r\n    }\r\n}\r\n"]}