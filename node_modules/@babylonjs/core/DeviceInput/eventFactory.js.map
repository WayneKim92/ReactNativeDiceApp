{"version":3,"file":"eventFactory.js","sourceRoot":"","sources":["../../../../dev/core/src/DeviceInput/eventFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = pointerId ?? deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        let buttons = 0;\r\n\r\n        // Populate buttons property with current state of all mouse buttons\r\n        // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\r\n        evt.buttons = buttons;\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\r\n        // This line has been added to make the InputManager more platform-agnostic\r\n        // Similar code exists in the WebDeviceInputSystem to handle browser created events\r\n        evt.pointerId = 1;\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n"]}