{"version":3,"file":"serialization.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/serialization.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAG7E,SAAS,eAAe,CAAC,SAAiB;IACtC,OAAO,CACH,SAAS,KAAK,MAAM;QACpB,SAAS,KAAK,cAAc;QAC5B,SAAS,KAAK,YAAY;QAC1B,SAAS,KAAK,cAAc;QAC5B,SAAS,KAAK,WAAW;QACzB,SAAS,KAAK,cAAc;QAC5B,SAAS,KAAK,iBAAiB;QAC/B,SAAS,KAAK,WAAW,CAC5B,CAAC;AACN,CAAC;AAED,SAAS,iBAAiB,CAAC,SAAiB;IACxC,OAAO,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,YAAY,CAAC;AACvH,CAAC;AAED,SAAS,WAAW,CAAC,SAAiB,EAAE,KAAoB;IACxD,IAAI,SAAS,KAAK,SAAS,EAAE;QACzB,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACnC;SAAM,IAAI,SAAS,KAAK,SAAS,EAAE;QAChC,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACnC;SAAM,IAAI,SAAS,KAAK,SAAS,EAAE;QAChC,OAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACnC;SAAM,IAAI,SAAS,KAAK,YAAY,EAAE;QACnC,OAAO,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KACtC;SAAM;QACH,MAAM,IAAI,KAAK,CAAC,6BAA6B,SAAS,EAAE,CAAC,CAAC;KAC7D;AACL,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,iCAAiC,CAAC,GAAW,EAAE,KAAU,EAAE,mBAAwB;;IAC/F,MAAM,SAAS,GAAG,MAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,YAAY,qDAAI,mCAAI,EAAE,CAAC;IAChD,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QAC5B,mBAAmB,CAAC,GAAG,CAAC,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,SAAS;SACZ,CAAC;KACL;SAAM,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;QACrC,mBAAmB,CAAC,GAAG,CAAC,GAAG;YACvB,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE;YACtB,SAAS;SACZ,CAAC;KACL;SAAM;QACH,mBAAmB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACpC;AACL,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,yBAAyB,CAAC,GAAW,EAAE,mBAAwB,EAAE,KAAY;IACzF,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;IACvC,IAAI,UAAU,CAAC;IACf,MAAM,SAAS,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,CAAC;IACnC,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;QAC5B,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAChD;SAAM,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;QACrC,UAAU,GAAG,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;KACpD;SAAM;QACH,UAAU,GAAG,KAAK,CAAC;KACtB;IACD,OAAO,UAAU,CAAC;AACtB,CAAC","sourcesContent":["import { Quaternion, Vector2, Vector3, Vector4 } from \"../Maths/math.vector\";\r\nimport type { Scene } from \"../scene\";\r\n\r\nfunction isMeshClassName(className: string) {\r\n    return (\r\n        className === \"Mesh\" ||\r\n        className === \"AbstractMesh\" ||\r\n        className === \"GroundMesh\" ||\r\n        className === \"InstanceMesh\" ||\r\n        className === \"LinesMesh\" ||\r\n        className === \"GoldbergMesh\" ||\r\n        className === \"GreasedLineMesh\" ||\r\n        className === \"TrailMesh\"\r\n    );\r\n}\r\n\r\nfunction isVectorClassName(className: string) {\r\n    return className === \"Vector2\" || className === \"Vector3\" || className === \"Vector4\" || className === \"Quaternion\";\r\n}\r\n\r\nfunction parseVector(className: string, value: Array<number>) {\r\n    if (className === \"Vector2\") {\r\n        return Vector2.FromArray(value);\r\n    } else if (className === \"Vector3\") {\r\n        return Vector3.FromArray(value);\r\n    } else if (className === \"Vector4\") {\r\n        return Vector4.FromArray(value);\r\n    } else if (className === \"Quaternion\") {\r\n        return Quaternion.FromArray(value);\r\n    } else {\r\n        throw new Error(`Unknown vector class name ${className}`);\r\n    }\r\n}\r\n\r\n/**\r\n * The default function that serializes values in a context object to a serialization object\r\n * @param key the key where the value should be stored in the serialization object\r\n * @param value the value to store\r\n * @param serializationObject the object where the value will be stored\r\n */\r\nexport function defaultValueSerializationFunction(key: string, value: any, serializationObject: any) {\r\n    const className = value?.getClassName?.() ?? \"\";\r\n    if (isMeshClassName(className)) {\r\n        serializationObject[key] = {\r\n            name: value.name,\r\n            className,\r\n        };\r\n    } else if (isVectorClassName(className)) {\r\n        serializationObject[key] = {\r\n            value: value.asArray(),\r\n            className,\r\n        };\r\n    } else {\r\n        serializationObject[key] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * The default function that parses values stored in a serialization object\r\n * @param key the key to the value that will be parsed\r\n * @param serializationObject the object that will be parsed\r\n * @param scene\r\n * @returns\r\n */\r\nexport function defaultValueParseFunction(key: string, serializationObject: any, scene: Scene) {\r\n    const value = serializationObject[key];\r\n    let finalValue;\r\n    const className = value?.className;\r\n    if (isMeshClassName(className)) {\r\n        finalValue = scene.getMeshByName(value.name);\r\n    } else if (isVectorClassName(className)) {\r\n        finalValue = parseVector(className, value.value);\r\n    } else {\r\n        finalValue = value;\r\n    }\r\n    return finalValue;\r\n}\r\n"]}