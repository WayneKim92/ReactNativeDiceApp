import { FlowGraphBlock } from "./flowGraphBlock.js";
import { FlowGraphConnectionType } from "./flowGraphConnection.js";
import { FlowGraphSignalConnection } from "./flowGraphSignalConnection.js";
/**
 * @experimental
 * A block that executes some action. Always has an input signal (which is not used by event blocks).
 * Can have one or more output signals.
 */
export class FlowGraphExecutionBlock extends FlowGraphBlock {
    constructor(config) {
        super(config);
        this.onStart = this._registerSignalInput("onStart");
    }
    configure() {
        super.configure();
        this.signalInputs = [];
        this.signalOutputs = [];
    }
    _registerSignalInput(name) {
        const input = new FlowGraphSignalConnection(name, FlowGraphConnectionType.Input, this);
        this.signalInputs.push(input);
        return input;
    }
    _registerSignalOutput(name) {
        const output = new FlowGraphSignalConnection(name, FlowGraphConnectionType.Output, this);
        this.signalOutputs.push(output);
        return output;
    }
    serialize(serializationObject = {}) {
        super.serialize(serializationObject);
        serializationObject.signalInputs = [];
        serializationObject.signalOutputs = [];
        for (const input of this.signalInputs) {
            const serializedInput = {};
            input.serialize(serializedInput);
            serializationObject.signalInputs.push(serializedInput);
        }
        for (const output of this.signalOutputs) {
            const serializedOutput = {};
            output.serialize(serializedOutput);
            serializationObject.signalOutputs.push(serializedOutput);
        }
    }
    getClassName() {
        return "FGExecutionBlock";
    }
    static Parse(serializationObject = {}) {
        const block = super.Parse(serializationObject);
        for (let i = 0; i < serializationObject.signalInputs.length; i++) {
            block.signalInputs[i].deserialize(serializationObject.signalInputs[i]);
        }
        for (let i = 0; i < serializationObject.signalOutputs.length; i++) {
            block.signalOutputs[i].deserialize(serializationObject.signalOutputs[i]);
        }
        return block;
    }
}
//# sourceMappingURL=flowGraphExecutionBlock.js.map