{"version":3,"file":"flowGraphRichTypes.js","sourceRoot":"","sources":["../../../../dev/core/src/FlowGraph/flowGraphRichTypes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector3, Vector4, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\n\r\n/**\r\n * A rich type represents extra information about a type,\r\n * such as its name and a default value constructor.\r\n * @experimental\r\n */\r\nexport class RichType<T> {\r\n    constructor(\r\n        public typeName: string,\r\n        public defaultValue: T\r\n    ) {}\r\n\r\n    serialize(serializationObject: any) {\r\n        serializationObject.typeName = this.typeName;\r\n        serializationObject.defaultValue = this.defaultValue;\r\n    }\r\n\r\n    static Parse(serializationObject: any): RichType<any> {\r\n        return new RichType(serializationObject.typeName, serializationObject.defaultValue);\r\n    }\r\n}\r\n\r\nexport const RichTypeAny: RichType<any> = new RichType(\"any\", undefined);\r\n\r\nexport const RichTypeString: RichType<string> = new RichType(\"string\", \"\");\r\n\r\nexport const RichTypeNumber: RichType<number> = new RichType(\"number\", 0);\r\n\r\nexport const RichTypeBoolean: RichType<boolean> = new RichType(\"boolean\", false);\r\n\r\nexport const RichTypeVector2: RichType<Vector2> = new RichType(\"Vector2\", Vector2.Zero());\r\n\r\nexport const RichTypeVector3: RichType<Vector3> = new RichType(\"Vector3\", Vector3.Zero());\r\n\r\nexport const RichTypeVector4: RichType<Vector4> = new RichType(\"Vector4\", Vector4.Zero());\r\n\r\nexport const RichTypeMatrix: RichType<Matrix> = new RichType(\"Matrix\", Matrix.Identity());\r\n\r\nexport const RichTypeColor3: RichType<Color3> = new RichType(\"Color3\", Color3.Black());\r\n\r\nexport const RichTypeColor4: RichType<Color4> = new RichType(\"Color4\", new Color4(0, 0, 0, 0));\r\n\r\nexport const RichTypeQuaternion: RichType<Quaternion> = new RichType(\"Quaternion\", Quaternion.Identity());\r\n\r\n/**\r\n * Given a value, try to deduce its rich type.\r\n * @param value the value to deduce the rich type from\r\n * @returns the value's rich type, or RichTypeAny if the type could not be deduced.\r\n */\r\nexport function getRichTypeFromValue<T>(value: T): RichType<T> {\r\n    switch (typeof value) {\r\n        case \"string\":\r\n            return RichTypeString as RichType<T>;\r\n        case \"number\":\r\n            return RichTypeNumber as RichType<T>;\r\n        case \"boolean\":\r\n            return RichTypeBoolean as RichType<T>;\r\n        case \"object\":\r\n            if (value instanceof Vector2) {\r\n                return RichTypeVector2 as RichType<T>;\r\n            } else if (value instanceof Vector3) {\r\n                return RichTypeVector3 as RichType<T>;\r\n            } else if (value instanceof Vector4) {\r\n                return RichTypeVector4 as RichType<T>;\r\n            } else if (value instanceof Color3) {\r\n                return RichTypeColor3 as RichType<T>;\r\n            } else if (value instanceof Color4) {\r\n                return RichTypeColor4 as RichType<T>;\r\n            } else if (value instanceof Quaternion) {\r\n                return RichTypeQuaternion as RichType<T>;\r\n            } else {\r\n                return RichTypeAny as RichType<T>;\r\n            }\r\n        default:\r\n            return RichTypeAny as RichType<T>;\r\n    }\r\n}\r\n"]}