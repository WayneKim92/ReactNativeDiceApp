{"version":3,"file":"flowGraphSceneTickEventBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Event/flowGraphSceneTickEventBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAEhE,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD;;;GAGG;AACH,MAAM,OAAO,4BAA6B,SAAQ,mBAAmB;IACjE;;OAEG;IACI,oBAAoB,CAAC,OAAyB;QACjD,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE;YAC3D,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC;YAC1C,MAAM,eAAe,GAAG,KAAK,CAAC,wBAAwB,CAAC,GAAG,CAAC,GAAG,EAAE;gBAC5D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,mBAAmB,EAAE,eAAe,CAAC,CAAC;SAC7E;IACL,CAAC;IAED;;OAEG;IACI,mBAAmB,CAAC,OAAyB;QAChD,MAAM,eAAe,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;QACjF,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC;QAC1C,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACvD,OAAO,CAAC,wBAAwB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IAChE,CAAC;IAEM,YAAY;QACf,OAAO,uBAAuB,CAAC;IACnC,CAAC;CACJ;AACD,aAAa,CAAC,uBAAuB,EAAE,4BAA4B,CAAC,CAAC","sourcesContent":["import { FlowGraphEventBlock } from \"../../flowGraphEventBlock\";\r\nimport type { FlowGraphContext } from \"core/FlowGraph/flowGraphContext\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Block that triggers on scene tick (before each render).\r\n */\r\nexport class FlowGraphSceneTickEventBlock extends FlowGraphEventBlock {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _preparePendingTasks(context: FlowGraphContext): void {\r\n        if (!context._getExecutionVariable(this, \"sceneBeforeRender\")) {\r\n            const scene = context.configuration.scene;\r\n            const contextObserver = scene.onBeforeRenderObservable.add(() => {\r\n                this._execute(context);\r\n            });\r\n            context._setExecutionVariable(this, \"sceneBeforeRender\", contextObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _cancelPendingTasks(context: FlowGraphContext) {\r\n        const contextObserver = context._getExecutionVariable(this, \"sceneBeforeRender\");\r\n        const scene = context.configuration.scene;\r\n        scene.onBeforeRenderObservable.remove(contextObserver);\r\n        context._deleteExecutionVariable(this, \"sceneBeforeRender\");\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGSceneTickEventBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSceneTickEventBlock\", FlowGraphSceneTickEventBlock);\r\n"]}