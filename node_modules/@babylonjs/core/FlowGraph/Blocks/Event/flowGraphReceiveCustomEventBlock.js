import { FlowGraphEventBlock } from "../../flowGraphEventBlock.js";
import { Tools } from "../../../Misc/tools.js";
import { RichTypeAny } from "../../flowGraphRichTypes.js";
import { RegisterClass } from "../../../Misc/typeStore.js";
/**
 * @experimental
 * A block that receives a custom event. It saves the data sent in the eventData output.
 */
export class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {
    constructor(config) {
        super(config);
        this.config = config;
        this.eventData = this._registerDataOutput("eventData", RichTypeAny);
    }
    _preparePendingTasks(context) {
        const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);
        this._eventObserver = observable.add((eventData) => {
            this.eventData.setValue(eventData, context);
            this._execute(context);
        });
    }
    _cancelPendingTasks(context) {
        const observable = context.configuration.coordinator.getCustomEventObservable(this.config.eventId);
        if (observable) {
            observable.remove(this._eventObserver);
        }
        else {
            Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`);
        }
    }
    getClassName() {
        return "FGReceiveCustomEventBlock";
    }
}
RegisterClass("FGReceiveCustomEventBlock", FlowGraphReceiveCustomEventBlock);
//# sourceMappingURL=flowGraphReceiveCustomEventBlock.js.map