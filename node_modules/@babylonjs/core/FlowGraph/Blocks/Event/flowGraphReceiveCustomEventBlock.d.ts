import type { FlowGraphContext } from "../../flowGraphContext";
import { FlowGraphEventBlock } from "../../flowGraphEventBlock";
import type { FlowGraphDataConnection } from "../../flowGraphDataConnection";
import type { IFlowGraphBlockConfiguration } from "../../flowGraphBlock";
/**
 * @experimental
 * Parameters used to create a FlowGraphReceiveCustomEventBlock.
 */
export interface IFlowGraphReceiveCustomEventBlockConfiguration extends IFlowGraphBlockConfiguration {
    eventId: string;
}
/**
 * @experimental
 * A block that receives a custom event. It saves the data sent in the eventData output.
 */
export declare class FlowGraphReceiveCustomEventBlock extends FlowGraphEventBlock {
    config: IFlowGraphReceiveCustomEventBlockConfiguration;
    private _eventObserver;
    /**
     * Output connection: The data sent with the event.
     */
    eventData: FlowGraphDataConnection<any>;
    constructor(config: IFlowGraphReceiveCustomEventBlockConfiguration);
    _preparePendingTasks(context: FlowGraphContext): void;
    _cancelPendingTasks(context: FlowGraphContext): void;
    getClassName(): string;
}
