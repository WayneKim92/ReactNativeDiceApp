{"version":3,"file":"flowGraphCachedOperationBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphCachedOperationBlock.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAKtD,MAAM,UAAU,GAAG,sBAAsB,CAAC;AAC1C,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAE/C;;GAEG;AACH,MAAM,OAAgB,6BAAuC,SAAQ,cAAc;IAM/E,YAAY,cAAiC,EAAE,MAAqC;QAChF,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IACrE,CAAC;IASM,cAAc,CAAC,OAAyB;QAC3C,MAAM,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QAClF,MAAM,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACpE,IAAI,WAAW,KAAK,SAAS,IAAI,iBAAiB,KAAK,OAAO,CAAC,WAAW,EAAE;YACxE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACnD,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;YACjE,OAAO,CAAC,qBAAqB,CAAC,IAAI,EAAE,kBAAkB,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;YAC7E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;SAClD;IACL,CAAC;CACJ","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport type { RichType } from \"../../flowGraphRichTypes\";\r\n\r\nconst CACHE_NAME = \"cachedOperationValue\";\r\nconst CACHE_EXEC_ID_NAME = \"cachedExecutionId\";\r\n\r\n/**\r\n * @experimental\r\n */\r\nexport abstract class FlowGraphCachedOperationBlock<OutputT> extends FlowGraphBlock {\r\n    /**\r\n     * The output of the operation\r\n     */\r\n    public readonly output: FlowGraphDataConnection<OutputT>;\r\n\r\n    constructor(outputRichType: RichType<OutputT>, config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.output = this._registerDataOutput(\"output\", outputRichType);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Operation to realize\r\n     * @param context the graph context\r\n     */\r\n    public abstract _doOperation(context: FlowGraphContext): OutputT;\r\n\r\n    public _updateOutputs(context: FlowGraphContext) {\r\n        const cachedExecutionId = context._getExecutionVariable(this, CACHE_EXEC_ID_NAME);\r\n        const cachedValue = context._getExecutionVariable(this, CACHE_NAME);\r\n        if (cachedValue !== undefined && cachedExecutionId === context.executionId) {\r\n            this.output.setValue(cachedValue, context);\r\n        } else {\r\n            const calculatedValue = this._doOperation(context);\r\n            context._setExecutionVariable(this, CACHE_NAME, calculatedValue);\r\n            context._setExecutionVariable(this, CACHE_EXEC_ID_NAME, context.executionId);\r\n            this.output.setValue(calculatedValue, context);\r\n        }\r\n    }\r\n}\r\n"]}