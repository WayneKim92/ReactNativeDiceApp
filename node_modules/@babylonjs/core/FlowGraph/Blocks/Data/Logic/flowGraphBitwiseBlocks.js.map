{"version":3,"file":"flowGraphBitwiseBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphBitwiseBlocks.ts"],"names":[],"mappings":"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","sourcesContent":["import { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst PREFIX = \"FGBitwise\";\r\nconst AND = \"AndBlock\";\r\nconst OR = \"OrBlock\";\r\nconst XOR = \"XorBlock\";\r\nconst NOT = \"NotBlock\";\r\nconst LSHIFT = \"LeftShiftBlock\";\r\nconst RSHIFT = \"RightShiftBlock\";\r\nconst CLZ = \"CountLeadingZerosBlock\";\r\nconst CTZ = \"CountTrailingZerosBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise AND operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseAndBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left & right, `${PREFIX}${AND}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${AND}`, FlowGraphBitwiseAndBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise OR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseOrBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left | right, `${PREFIX}${OR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${OR}`, FlowGraphBitwiseOrBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise XOR operation on two numbers.\r\n */\r\nexport class FlowGraphBitwiseXorBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left ^ right, `${PREFIX}${XOR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${XOR}`, FlowGraphBitwiseXorBlock);\r\n\r\n/**\r\n * @experimental\r\n * Performs a bitwise NOT operation on a number.\r\n */\r\nexport class FlowGraphBitwiseNotBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => ~value, `${PREFIX}${NOT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphBitwiseNotBlock);\r\n\r\n/**\r\n * @experimental\r\n * Left shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseLeftShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left << right, `${PREFIX}${LSHIFT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${LSHIFT}`, FlowGraphBitwiseLeftShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Right shifts a number by a specified amount.\r\n */\r\nexport class FlowGraphBitwiseRightShiftBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left >> right, `${PREFIX}${RSHIFT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${RSHIFT}`, FlowGraphBitwiseRightShiftBlock);\r\n\r\n/**\r\n * @experimental\r\n * Counts the leading zero bits of a number\r\n */\r\nexport class FlowGraphCountLeadingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => Math.clz32(value), `${PREFIX}${CLZ}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${CLZ}`, FlowGraphCountLeadingZerosBlock);\r\n\r\n/**\r\n * @experimental\r\n * Counts the trailing zero bits of a number\r\n */\r\nexport class FlowGraphCountTrailingZerosBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32#implementing_count_leading_ones_and_beyond\r\n    private _ctrz(integer: number) {\r\n        integer >>>= 0; // coerce to Uint32\r\n        if (integer === 0) {\r\n            // skipping this step would make it return -1\r\n            return 32;\r\n        }\r\n        integer &= -integer; // equivalent to `int = int & (~int + 1)`\r\n        return 31 - Math.clz32(integer);\r\n    }\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (value) => this._ctrz(value), `${PREFIX}${CTZ}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${CTZ}`, FlowGraphCountTrailingZerosBlock);\r\n"]}