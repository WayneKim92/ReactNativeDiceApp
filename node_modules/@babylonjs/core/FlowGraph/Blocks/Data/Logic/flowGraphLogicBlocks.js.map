{"version":3,"file":"flowGraphLogicBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Logic/flowGraphLogicBlocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,uCAA0C;AACpE,OAAO,EAAE,6BAA6B,EAAE,MAAM,kCAAkC,CAAC;AACjF,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAE/E,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D,MAAM,MAAM,GAAG,SAAS,CAAC;AACzB,MAAM,GAAG,GAAG,UAAU,CAAC;AACvB,MAAM,EAAE,GAAG,SAAS,CAAC;AACrB,MAAM,GAAG,GAAG,UAAU,CAAC;AAEvB;;;GAGG;AACH,MAAM,OAAO,sBAAuB,SAAQ,6BAAwD;IAChG,YAAY,MAAoC;QAC5C,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,EAAE,GAAG,MAAM,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxH,CAAC;CACJ;AACD,aAAa,CAAC,GAAG,MAAM,GAAG,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;AAEzD;;;GAGG;AACH,MAAM,OAAO,qBAAsB,SAAQ,6BAAwD;IAC/F,YAAY,MAAoC;QAC5C,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,EAAE,GAAG,MAAM,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACvH,CAAC;CACJ;AACD,aAAa,CAAC,GAAG,MAAM,GAAG,EAAE,EAAE,EAAE,qBAAqB,CAAC,CAAC;AAEvD;;;GAGG;AACH,MAAM,OAAO,sBAAuB,SAAQ,4BAA8C;IACtF,YAAY,MAAoC;QAC5C,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IAC1F,CAAC;CACJ;AACD,aAAa,CAAC,GAAG,MAAM,GAAG,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC","sourcesContent":["import { RichTypeBoolean } from \"core/FlowGraph/flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst PREFIX = \"FGLogic\";\r\nconst AND = \"AndBlock\";\r\nconst OR = \"OrBlock\";\r\nconst NOT = \"NotBlock\";\r\n\r\n/**\r\n * Performs an AND operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicAndBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left && right, `${PREFIX}${AND}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${AND}`, FlowGraphLogicAndBlock);\r\n\r\n/**\r\n * Performs an OR operation on two boolean values.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicOrBlock extends FlowGraphBinaryOperationBlock<boolean, boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, RichTypeBoolean, (left, right) => left || right, `${PREFIX}${OR}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${OR}`, FlowGraphLogicOrBlock);\r\n\r\n/**\r\n * Performs a NOT operation on a boolean value\r\n * @experimental\r\n */\r\nexport class FlowGraphLogicNotBlock extends FlowGraphUnaryOperationBlock<boolean, boolean> {\r\n    constructor(config: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeBoolean, RichTypeBoolean, (value) => !value, `${PREFIX}${NOT}`, config);\r\n    }\r\n}\r\nRegisterClass(`${PREFIX}${NOT}`, FlowGraphLogicNotBlock);\r\n"]}