{"version":3,"file":"flowGraphCoordinateTransformBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Data/flowGraphCoordinateTransformBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAGtD,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAGjE,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD;;;GAGG;AACH,MAAM,OAAO,iCAAkC,SAAQ,cAAc;IAkBjE;;OAEG;IACH,YAAY,MAAqC;QAC7C,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QACzE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;QACrF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;IAC5F,CAAC;IAEM,cAAc,CAAC,QAA0B;QAC5C,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/D,MAAM,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzE,MAAM,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEvE,qDAAqD;QACrD,MAAM,WAAW,GAAG,iBAAiB,CAAC,cAAc,EAAE,CAAC;QACvD,0DAA0D;QAC1D,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,cAAc,EAAE,CAAC;QACjE,MAAM,uBAAuB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAChF,0DAA0D;QAC1D,uBAAuB,CAAC,MAAM,EAAE,CAAC;QAEjC,MAAM,mBAAmB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjD,0EAA0E;QAC1E,uBAAuB,CAAC,aAAa,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;QACxE,MAAM,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEzE,OAAO,CAAC,yBAAyB,CAAC,qBAAqB,EAAE,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;IAC1G,CAAC;IAEM,YAAY;QACf,OAAO,4BAA4B,CAAC;IACxC,CAAC;CACJ;AACD,aAAa,CAAC,4BAA4B,EAAE,iCAAiC,CAAC,CAAC","sourcesContent":["import { FlowGraphBlock } from \"../../flowGraphBlock\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { RichTypeAny, RichTypeVector3 } from \"../../flowGraphRichTypes\";\r\nimport { TmpVectors, Vector3 } from \"../../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../../Meshes/transformNode\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * This blocks transforms a vector from one coordinate system to another.\r\n */\r\nexport class FlowGraphCoordinateTransformBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The source coordinate system.\r\n     */\r\n    public readonly sourceSystem: FlowGraphDataConnection<TransformNode>;\r\n    /**\r\n     * Input connection: The destination coordinate system.\r\n     */\r\n    public readonly destinationSystem: FlowGraphDataConnection<TransformNode>;\r\n    /**\r\n     * Input connection: The coordinates to transform.\r\n     */\r\n    public readonly inputCoordinates: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Output connection: The transformed coordinates.\r\n     */\r\n    public readonly outputCoordinates: FlowGraphDataConnection<Vector3>;\r\n\r\n    /**\r\n     * Creates a new FlowGraphCoordinateTransformBlock\r\n     */\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.sourceSystem = this._registerDataInput(\"sourceSystem\", RichTypeAny);\r\n        this.destinationSystem = this._registerDataInput(\"destinationSystem\", RichTypeAny);\r\n        this.inputCoordinates = this._registerDataInput(\"inputCoordinates\", RichTypeVector3);\r\n        this.outputCoordinates = this._registerDataOutput(\"outputCoordinates\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const sourceSystemValue = this.sourceSystem.getValue(_context);\r\n        const destinationSystemValue = this.destinationSystem.getValue(_context);\r\n        const inputCoordinatesValue = this.inputCoordinates.getValue(_context);\r\n\r\n        // takes coordinates from source space to world space\r\n        const sourceWorld = sourceSystemValue.getWorldMatrix();\r\n        // takes coordinates from destination space to world space\r\n        const destinationWorld = destinationSystemValue.getWorldMatrix();\r\n        const destinationWorldInverse = TmpVectors.Matrix[0].copyFrom(destinationWorld);\r\n        // takes coordinates from world space to destination space\r\n        destinationWorldInverse.invert();\r\n\r\n        const sourceToDestination = TmpVectors.Matrix[1];\r\n        // takes coordinates from source space to world space to destination space\r\n        destinationWorldInverse.multiplyToRef(sourceWorld, sourceToDestination);\r\n        const outputCoordinatesValue = this.outputCoordinates.getValue(_context);\r\n\r\n        Vector3.TransformCoordinatesToRef(inputCoordinatesValue, sourceToDestination, outputCoordinatesValue);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGCoordinateTransformBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGCoordinateTransformBlock\", FlowGraphCoordinateTransformBlock);\r\n"]}