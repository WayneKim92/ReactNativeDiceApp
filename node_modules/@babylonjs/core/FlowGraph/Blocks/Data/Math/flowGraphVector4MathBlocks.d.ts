import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import { Vector4 } from "../../../../Maths/math.vector";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
import { FlowGraphBlock } from "../../../flowGraphBlock";
import type { FlowGraphContext } from "../../../flowGraphContext";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
/**
 * Add two vectors together.
 * @experimental
 */
export declare class FlowGraphAddVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Subtract two vectors.
 * @experimental
 */
export declare class FlowGraphSubtractVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Multiply two vectors together.
 * @experimental
 */
export declare class FlowGraphMultiplyVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Divide two vectors.
 * @experimental
 */
export declare class FlowGraphDivideVector4Block extends FlowGraphBinaryOperationBlock<Vector4, Vector4, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Scale a vector by a number.
 * @experimental
 */
export declare class FlowGraphScaleVector4Block extends FlowGraphBinaryOperationBlock<Vector4, number, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Get the length of a vector.
 * @experimental
 */
export declare class FlowGraphLengthVector4Block extends FlowGraphUnaryOperationBlock<Vector4, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Normalize a vector.
 * @experimental
 */
export declare class FlowGraphNormalizeVector4Block extends FlowGraphUnaryOperationBlock<Vector4, Vector4> {
    constructor(config?: IFlowGraphBlockConfiguration);
    getClassName(): string;
}
/**
 * Create a vector from its components.
 * @experimental
 */
export declare class FlowGraphCreateVector4Block extends FlowGraphBlock {
    /**
     * Input connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Input connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    /**
     * Input connection: The z component of the vector.
     */
    readonly z: FlowGraphDataConnection<number>;
    /**
     * Input connection: The w component of the vector.
     */
    readonly w: FlowGraphDataConnection<number>;
    /**
     * Output connection: The created vector.
     */
    readonly vector: FlowGraphDataConnection<Vector4>;
    private _cachedVector;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Split a vector into its components.
 * @experimental
 */
export declare class FlowGraphSplitVector4Block extends FlowGraphBlock {
    /**
     * Input connection: The vector to split.
     */
    readonly vector: FlowGraphDataConnection<Vector4>;
    /**
     * Output connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Output connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    /**
     * Input connection: The z component of the vector.
     */
    readonly z: FlowGraphDataConnection<number>;
    /**
     * Input connection: The w component of the vector.
     */
    readonly w: FlowGraphDataConnection<number>;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
