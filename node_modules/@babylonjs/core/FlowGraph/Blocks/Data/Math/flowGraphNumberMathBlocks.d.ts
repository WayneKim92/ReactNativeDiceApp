import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
import { FlowGraphBlock } from "../../../flowGraphBlock";
import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import { FlowGraphConstantOperationBlock } from "../flowGraphConstantOperationBlock";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphContext } from "../../../flowGraphContext";
/**
 * Outputs the addition of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphAddNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the subtraction of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphSubtractNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the multiplication of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphMultiplyNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Ouputs the division of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphDivideNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the modulo of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphModNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs left to the power of right.
 * @experimental
 */
export declare class FlowGraphPowNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if the number is NaN, false otherwise.
 * @experimental
 */
export declare class FlowGraphIsNaNNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if the number is infinite, false otherwise.
 * @experimental
 */
export declare class FlowGraphIsInfinityNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the square root of the input.
 * @experimental
 */
export declare class FlowGraphSqrtNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the absolute value of the input.
 * @experimental
 */
export declare class FlowGraphAbsNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Negates the input.
 * @experimental
 */
export declare class FlowGraphNegateNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the floor of the input.
 * @experimental
 */
export declare class FlowGraphFloorNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the ceiling of the input.
 * @experimental
 */
export declare class FlowGraphCeilNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Rounds the left input to right digits of precision.
 * @see rounding function from: https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0
 * @experimental
 */
export declare class FlowGraphRoundNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Truncates the input.
 * @experimental
 */
export declare class FlowGraphTruncNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the exponential of the input.
 * @experimental
 */
export declare class FlowGraphExpNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the base 10 logarithm of the input.
 * @experimental
 */
export declare class FlowGraphLog10NumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the natural logarithm of the input.
 * @experimental
 */
export declare class FlowGraphLogNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the base 2 logarithm of the input.
 * @experimental
 */
export declare class FlowGraphLnNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the sine of the input.
 * @experimental
 */
export declare class FlowGraphSinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the cosine of the input.
 * @experimental
 */
export declare class FlowGraphCosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the tangent of the input.
 * @experimental
 */
export declare class FlowGraphTanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the arcsine of the input.
 * @experimental
 */
export declare class FlowGraphASinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the arccosine of the input.
 * @experimental
 */
export declare class FlowGraphACosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the arctangent of the input.
 * @experimental
 */
export declare class FlowGraphATanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the number E.
 * @experimental
 */
export declare class FlowGraphENumberBlock extends FlowGraphConstantOperationBlock<number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the number PI.
 * @experimental
 */
export declare class FlowGraphPiNumberBlock extends FlowGraphConstantOperationBlock<number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the arctan2 of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphATan2NumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * @experimental
 * Outputs a number between left and right.
 */
export declare class FlowGraphRandomNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the minimum of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphMinNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs the maximum of the left and right inputs.
 * @experimental
 */
export declare class FlowGraphMaxNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if left is equal to right, false otherwise.
 * @experimental
 */
export declare class FlowGraphEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if left is greater than right, false otherwise.
 */
export declare class FlowGraphGreaterThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if left is greater than or equal to right, false otherwise.
 */
export declare class FlowGraphGreaterThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if left is less than right, false otherwise.
 */
export declare class FlowGraphLessThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs true if left is less than or equal to right, false otherwise.
 */
export declare class FlowGraphLessThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Outputs a mix of left and right based on alpha.
 * @experimental
 */
export declare class FlowGraphMixNumberBlock extends FlowGraphBlock {
    leftInput: FlowGraphDataConnection<number>;
    rightInput: FlowGraphDataConnection<number>;
    alphaInput: FlowGraphDataConnection<number>;
    resultOutput: FlowGraphDataConnection<number>;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
