{"version":3,"file":"flowGraphMatrixBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphMatrixBlocks.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matrix, Quaternion, TmpVectors, Vector3 } from \"../../../../Maths/math.vector\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { RichTypeAny, RichTypeMatrix, RichTypeNumber, RichTypeQuaternion, RichTypeVector3 } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { TransformNode } from \"../../../../Meshes/transformNode\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nconst ADDNAME = \"FGAddMatrixBlock\";\r\n/**\r\n * Adds two matrices together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right, this._cachedMatrix), ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddMatrixBlock);\r\n\r\nconst ADDNUMBERNAME = \"FGAddMatrixAndNumberBlock\";\r\n/**\r\n * Adds a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] + right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            ADDNUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(ADDNUMBERNAME, FlowGraphAddMatrixAndNumberBlock);\r\n\r\nconst SUBNAME = \"FGSubtractMatrixBlock\";\r\n/**\r\n * Subtracts two matrices.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.addToRef(right.scaleToRef(-1, TmpVectors.Matrix[0]), this._cachedMatrix), SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractMatrixBlock);\r\n\r\nconst SUBNUMBERNAME = \"FGSubtractMatrixAndNumberBlock\";\r\n/**\r\n * Subtracts a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] - right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            SUBNUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(SUBNUMBERNAME, FlowGraphSubtractMatrixAndNumberBlock);\r\n\r\nconst MULNAME = \"FGMultiplyMatrixBlock\";\r\n/**\r\n * Multiplies two matrices together.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeMatrix, RichTypeMatrix, (left, right) => left.multiplyToRef(right, this._cachedMatrix), MULNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULNAME, FlowGraphMultiplyMatrixBlock);\r\n\r\nconst DIVIDENAME = \"FGDivideMatrixBlock\";\r\n/**\r\n * Divides two matrices.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {\r\n    private _cachedResultMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeMatrix,\r\n            RichTypeMatrix,\r\n            (left, right) => left.multiplyToRef(right.invertToRef(TmpVectors.Matrix[0]), this._cachedResultMatrix),\r\n            DIVIDENAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(DIVIDENAME, FlowGraphDivideMatrixBlock);\r\n\r\nconst DIVIDENUMBERNAME = \"FGDivideMatrixAndNumberBlock\";\r\n/**\r\n * Divides a matrix and a number together.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeMatrix,\r\n            RichTypeNumber,\r\n            RichTypeMatrix,\r\n            (left, right) => {\r\n                for (let i = 0; i < left.m.length; i++) {\r\n                    this._cachedArray[i] = left.m[i] / right;\r\n                }\r\n                return Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n            },\r\n            DIVIDENUMBERNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(DIVIDENUMBERNAME, FlowGraphDivideMatrixAndNumberBlock);\r\n\r\nconst SCALENAME = \"FGScaleMatrixBlock\";\r\n/**\r\n * Scales a matrix by a number.\r\n * @experimental\r\n */\r\nexport class FlowGraphScaleMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {\r\n    private _cachedMatrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeMatrix, RichTypeNumber, RichTypeMatrix, (left, right) => left.scaleToRef(right, this._cachedMatrix), SCALENAME, config);\r\n    }\r\n}\r\nRegisterClass(SCALENAME, FlowGraphScaleMatrixBlock);\r\n\r\nconst CLAMPNAME = \"FGClampMatrixBlock\";\r\n/**\r\n * Clamps each value in a matrix between a minimum and maximum value.\r\n * @experimental\r\n */\r\nexport class FlowGraphClampMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The matrix to clamp.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Output connection: The clamped matrix.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Input connection: The minimum value.\r\n     */\r\n    public readonly min: FlowGraphDataConnection<number>;\r\n    /**\r\n     * Input connection: The maximum value.\r\n     */\r\n    public readonly max: FlowGraphDataConnection<number>;\r\n    private _cachedArray: Float32Array = new Float32Array(16);\r\n    private _cachedMatrix: Matrix = Matrix.Identity();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.input = this._registerDataInput(\"input\", RichTypeMatrix);\r\n        this.min = this._registerDataInput(\"min\", RichTypeNumber);\r\n        this.max = this._registerDataInput(\"max\", RichTypeNumber);\r\n        this.output = this._registerDataOutput(\"output\", RichTypeMatrix);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const input = this.input.getValue(_context);\r\n        const min = this.min.getValue(_context);\r\n        const max = this.max.getValue(_context);\r\n\r\n        for (let i = 0; i < input.m.length; i++) {\r\n            this._cachedArray[i] = Math.min(Math.max(input.m[i], min), max);\r\n        }\r\n\r\n        Matrix.FromArrayToRef(this._cachedArray, 0, this._cachedMatrix);\r\n        this.output.setValue(this._cachedMatrix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return CLAMPNAME;\r\n    }\r\n}\r\nRegisterClass(CLAMPNAME, FlowGraphClampMatrixBlock);\r\n\r\nconst DECOMPOSENAME = \"FGDecomposeMatrixBlock\";\r\n/**\r\n * Decomposes a matrix into its translation, rotation and scale components.\r\n * @experimental\r\n */\r\nexport class FlowGraphDecomposeMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Input connection: The matrix to decompose.\r\n     */\r\n    public readonly input: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Output connection: The translation component of the matrix.\r\n     */\r\n    public readonly translation: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Output connection: The rotation component of the matrix.\r\n     */\r\n    public readonly rotation: FlowGraphDataConnection<Quaternion>;\r\n    /**\r\n     * Output connection: The scale component of the matrix.\r\n     */\r\n    public readonly scale: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedTranslation = new Vector3();\r\n    private _cachedRotation = new Quaternion();\r\n    private _cachedScale = new Vector3();\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.input = this._registerDataInput(\"input\", RichTypeMatrix);\r\n        this.translation = this._registerDataOutput(\"translation\", RichTypeVector3);\r\n        this.rotation = this._registerDataOutput(\"rotation\", RichTypeQuaternion);\r\n        this.scale = this._registerDataOutput(\"scale\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const input = this.input.getValue(_context);\r\n\r\n        input.decompose(this._cachedScale, this._cachedRotation, this._cachedTranslation);\r\n\r\n        this.translation.setValue(this._cachedTranslation, _context);\r\n        this.rotation.setValue(this._cachedRotation, _context);\r\n        this.scale.setValue(this._cachedScale, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return DECOMPOSENAME;\r\n    }\r\n}\r\nRegisterClass(DECOMPOSENAME, FlowGraphDecomposeMatrixBlock);\r\n\r\nconst COMPOSENAME = \"FGComposeMatrixBlock\";\r\n/**\r\n * Composes a matrix from its translation, rotation and scale components.\r\n * @experimental\r\n */\r\nexport class FlowGraphComposeMatrixBlock extends FlowGraphBlock {\r\n    /**\r\n     * Output connection: The matrix to compose.\r\n     */\r\n    public readonly output: FlowGraphDataConnection<Matrix>;\r\n    /**\r\n     * Input connection: The translation component of the matrix.\r\n     */\r\n    public readonly translation: FlowGraphDataConnection<Vector3>;\r\n    /**\r\n     * Input connection: The rotation component of the matrix.\r\n     */\r\n    public readonly rotation: FlowGraphDataConnection<Quaternion>;\r\n    /**\r\n     * Input connection: The scale component of the matrix.\r\n     */\r\n    public readonly scale: FlowGraphDataConnection<Vector3>;\r\n\r\n    private _cachedMatrix = new Matrix();\r\n\r\n    public constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.output = this._registerDataOutput(\"input\", RichTypeMatrix);\r\n        this.translation = this._registerDataInput(\"translation\", RichTypeVector3);\r\n        this.rotation = this._registerDataInput(\"rotation\", RichTypeQuaternion);\r\n        this.scale = this._registerDataInput(\"scale\", RichTypeVector3);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const translation = this.translation.getValue(_context);\r\n        const rotation = this.rotation.getValue(_context);\r\n        const scale = this.scale.getValue(_context);\r\n\r\n        Matrix.ComposeToRef(scale, rotation, translation, this._cachedMatrix);\r\n\r\n        this.output.setValue(this._cachedMatrix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return COMPOSENAME;\r\n    }\r\n}\r\nRegisterClass(COMPOSENAME, FlowGraphComposeMatrixBlock);\r\n\r\nconst QUATERNIONTOROTNAME = \"FGQuaternionToRotationMatrixBlock\";\r\n/**\r\n * Converts a quaternion to a rotation matrix.\r\n * @experimental\r\n */\r\nexport class FlowGraphQuaternionToRotationMatrixBlock extends FlowGraphUnaryOperationBlock<Quaternion, Matrix> {\r\n    private _cachedMatrix = new Matrix();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeQuaternion, RichTypeMatrix, (value) => Matrix.FromQuaternionToRef(value, this._cachedMatrix), QUATERNIONTOROTNAME, config);\r\n    }\r\n}\r\nRegisterClass(QUATERNIONTOROTNAME, FlowGraphQuaternionToRotationMatrixBlock);\r\n\r\nconst GETTRANSFORMNAME = \"FGGetTransformationMatrixBlock\";\r\n/**\r\n * Given the Transform Nodes A and B, gives the matrix required\r\n * to transform coordinates from A's local space to B's local space.\r\n */\r\nexport class FlowGraphGetTransformationMatrixBlock extends FlowGraphBinaryOperationBlock<TransformNode, TransformNode, Matrix> {\r\n    private _cachedResult: Matrix = Matrix.Zero();\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(\r\n            RichTypeAny,\r\n            RichTypeAny,\r\n            RichTypeMatrix,\r\n            (left: TransformNode, right: TransformNode) => {\r\n                const aMatrix = left.getWorldMatrix();\r\n                const bMatrix = right.getWorldMatrix();\r\n\r\n                const inverseB = bMatrix.invertToRef(TmpVectors.Matrix[0]);\r\n                const result = inverseB.multiplyToRef(aMatrix, this._cachedResult);\r\n                return result;\r\n            },\r\n            GETTRANSFORMNAME,\r\n            config\r\n        );\r\n    }\r\n}\r\nRegisterClass(GETTRANSFORMNAME, FlowGraphGetTransformationMatrixBlock);\r\n"]}