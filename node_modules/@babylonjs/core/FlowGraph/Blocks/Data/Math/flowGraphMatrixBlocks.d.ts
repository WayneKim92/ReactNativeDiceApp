import { Matrix, Quaternion, Vector3 } from "../../../../Maths/math.vector";
import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
import { FlowGraphBlock } from "../../../flowGraphBlock";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphContext } from "../../../flowGraphContext";
import type { TransformNode } from "../../../../Meshes/transformNode";
/**
 * Adds two matrices together.
 * @experimental
 */
export declare class FlowGraphAddMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Adds a matrix and a number together.
 * @experimental
 */
export declare class FlowGraphAddMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {
    private _cachedArray;
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Subtracts two matrices.
 * @experimental
 */
export declare class FlowGraphSubtractMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Subtracts a matrix and a number together.
 * @experimental
 */
export declare class FlowGraphSubtractMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {
    private _cachedArray;
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Multiplies two matrices together.
 * @experimental
 */
export declare class FlowGraphMultiplyMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Divides two matrices.
 * @experimental
 */
export declare class FlowGraphDivideMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, Matrix, Matrix> {
    private _cachedResultMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Divides a matrix and a number together.
 * @experimental
 */
export declare class FlowGraphDivideMatrixAndNumberBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {
    private _cachedArray;
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Scales a matrix by a number.
 * @experimental
 */
export declare class FlowGraphScaleMatrixBlock extends FlowGraphBinaryOperationBlock<Matrix, number, Matrix> {
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Clamps each value in a matrix between a minimum and maximum value.
 * @experimental
 */
export declare class FlowGraphClampMatrixBlock extends FlowGraphBlock {
    /**
     * Input connection: The matrix to clamp.
     */
    readonly input: FlowGraphDataConnection<Matrix>;
    /**
     * Output connection: The clamped matrix.
     */
    readonly output: FlowGraphDataConnection<Matrix>;
    /**
     * Input connection: The minimum value.
     */
    readonly min: FlowGraphDataConnection<number>;
    /**
     * Input connection: The maximum value.
     */
    readonly max: FlowGraphDataConnection<number>;
    private _cachedArray;
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Decomposes a matrix into its translation, rotation and scale components.
 * @experimental
 */
export declare class FlowGraphDecomposeMatrixBlock extends FlowGraphBlock {
    /**
     * Input connection: The matrix to decompose.
     */
    readonly input: FlowGraphDataConnection<Matrix>;
    /**
     * Output connection: The translation component of the matrix.
     */
    readonly translation: FlowGraphDataConnection<Vector3>;
    /**
     * Output connection: The rotation component of the matrix.
     */
    readonly rotation: FlowGraphDataConnection<Quaternion>;
    /**
     * Output connection: The scale component of the matrix.
     */
    readonly scale: FlowGraphDataConnection<Vector3>;
    private _cachedTranslation;
    private _cachedRotation;
    private _cachedScale;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Composes a matrix from its translation, rotation and scale components.
 * @experimental
 */
export declare class FlowGraphComposeMatrixBlock extends FlowGraphBlock {
    /**
     * Output connection: The matrix to compose.
     */
    readonly output: FlowGraphDataConnection<Matrix>;
    /**
     * Input connection: The translation component of the matrix.
     */
    readonly translation: FlowGraphDataConnection<Vector3>;
    /**
     * Input connection: The rotation component of the matrix.
     */
    readonly rotation: FlowGraphDataConnection<Quaternion>;
    /**
     * Input connection: The scale component of the matrix.
     */
    readonly scale: FlowGraphDataConnection<Vector3>;
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Converts a quaternion to a rotation matrix.
 * @experimental
 */
export declare class FlowGraphQuaternionToRotationMatrixBlock extends FlowGraphUnaryOperationBlock<Quaternion, Matrix> {
    private _cachedMatrix;
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Given the Transform Nodes A and B, gives the matrix required
 * to transform coordinates from A's local space to B's local space.
 */
export declare class FlowGraphGetTransformationMatrixBlock extends FlowGraphBinaryOperationBlock<TransformNode, TransformNode, Matrix> {
    private _cachedResult;
    constructor(config?: IFlowGraphBlockConfiguration);
}
