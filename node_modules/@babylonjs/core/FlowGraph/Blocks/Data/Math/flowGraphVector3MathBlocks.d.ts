import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import type { Matrix } from "../../../../Maths/math.vector";
import { Vector3 } from "../../../../Maths/math.vector";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
import { FlowGraphBlock } from "../../../flowGraphBlock";
import type { FlowGraphContext } from "../../../flowGraphContext";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
/**
 * Add two vectors together.
 * @experimental
 */
export declare class FlowGraphAddVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Subtract two vectors.
 * @experimental
 */
export declare class FlowGraphSubtractVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Multiply two vectors together.
 * @experimental
 */
export declare class FlowGraphMultiplyVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Divide two vectors.
 * @experimental
 */
export declare class FlowGraphDivideVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Scale a vector by a number.
 * @experimental
 */
export declare class FlowGraphScaleVector3Block extends FlowGraphBinaryOperationBlock<Vector3, number, Vector3> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Get the length of a vector.
 * @experimental
 */
export declare class FlowGraphLengthVector3Block extends FlowGraphUnaryOperationBlock<Vector3, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Normalize a vector.
 * @experimental
 */
export declare class FlowGraphNormalizeVector3Block extends FlowGraphUnaryOperationBlock<Vector3, Vector3> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Get the dot product of two vectors.
 * @experimental
 */
export declare class FlowGraphDotVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, number> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Get the cross product of two vectors.
 * @experimental
 */
export declare class FlowGraphCrossVector3Block extends FlowGraphBinaryOperationBlock<Vector3, Vector3, Vector3> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Create a vector from its components.
 * @experimental
 */
export declare class FlowGraphCreateVector3Block extends FlowGraphBlock {
    /**
     * Input connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Input connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    /**
     * Input connection: The z component of the vector.
     */
    readonly z: FlowGraphDataConnection<number>;
    /**
     * Output connection: The created vector.
     */
    readonly vector: FlowGraphDataConnection<Vector3>;
    private _cachedVector;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Split a vector into its components.
 * @experimental
 */
export declare class FlowGraphSplitVector3Block extends FlowGraphBlock {
    /**
     * Input connection: The vector to split.
     */
    readonly vector: FlowGraphDataConnection<Vector3>;
    /**
     * Output connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Output connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    /**
     * Input connection: The z component of the vector.
     */
    readonly z: FlowGraphDataConnection<number>;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Rotates a vector by a given angle.
 */
export declare class FlowGraphRotate3dVector3Block extends FlowGraphBlock {
    /**
     * Input connection: The vector to rotate.
     */
    readonly input: FlowGraphDataConnection<Vector3>;
    /**
     * Input connection: The axis to rotate around.
     */
    readonly axis: FlowGraphDataConnection<Vector3>;
    /**
     * Input connection: The angle to rotate by.
     */
    readonly angle: FlowGraphDataConnection<number>;
    /**
     * Output connection: The rotated vector.
     */
    readonly output: FlowGraphDataConnection<Vector3>;
    private _cachedQuaternion;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
    getClassName(): string;
}
/**
 * Transforms a vector by a given matrix.
 * @experimental
 */
export declare class FlowGraphTransformVector3Block extends FlowGraphBinaryOperationBlock<Matrix, Vector3, Vector3> {
    private _cachedResult;
    constructor(config?: IFlowGraphBlockConfiguration);
}
