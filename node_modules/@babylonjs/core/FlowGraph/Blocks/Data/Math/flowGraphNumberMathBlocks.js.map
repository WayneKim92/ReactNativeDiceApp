{"version":3,"file":"flowGraphNumberMathBlocks.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Data/Math/flowGraphNumberMathBlocks.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { FlowGraphBlock } from \"../../../flowGraphBlock\";\r\nimport { RichTypeBoolean, RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport { FlowGraphBinaryOperationBlock } from \"../flowGraphBinaryOperationBlock\";\r\nimport { FlowGraphConstantOperationBlock } from \"../flowGraphConstantOperationBlock\";\r\nimport { FlowGraphUnaryOperationBlock } from \"../flowGraphUnaryOperationBlock\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Module for all of the number math blocks.\r\n * @see https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n */\r\n\r\nconst ADDNAME = \"FGAddNumberBlock\";\r\n/**\r\n * Outputs the addition of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphAddNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + right, ADDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ADDNAME, FlowGraphAddNumberBlock);\r\n\r\nconst SUBNAME = \"FGSubtractNumberBlock\";\r\n/**\r\n * Outputs the subtraction of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphSubtractNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left - right, SUBNAME, config);\r\n    }\r\n}\r\nRegisterClass(SUBNAME, FlowGraphSubtractNumberBlock);\r\n\r\nconst MULTIPLYNAME = \"FGMultiplyNumberBlock\";\r\n/**\r\n * Outputs the multiplication of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMultiplyNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left * right, MULTIPLYNAME, config);\r\n    }\r\n}\r\nRegisterClass(MULTIPLYNAME, FlowGraphMultiplyNumberBlock);\r\n\r\nconst DIVIDENAME = \"FGDivideNumberBlock\";\r\n/**\r\n * Ouputs the division of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphDivideNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left / right, DIVIDENAME, config);\r\n    }\r\n}\r\nRegisterClass(DIVIDENAME, FlowGraphDivideNumberBlock);\r\n\r\nconst MODNAME = \"FGModNumberBlock\";\r\n/**\r\n * Outputs the modulo of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphModNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left % right, MODNAME, config);\r\n    }\r\n}\r\nRegisterClass(MODNAME, FlowGraphModNumberBlock);\r\n\r\nconst POWNAME = \"FGPowNumberBlock\";\r\n/**\r\n * Outputs left to the power of right.\r\n * @experimental\r\n */\r\nexport class FlowGraphPowNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.pow(left, right), POWNAME, config);\r\n    }\r\n}\r\nRegisterClass(POWNAME, FlowGraphPowNumberBlock);\r\n\r\nconst ISNANNAME = \"FGIsNaNNumberBlock\";\r\n/**\r\n * Outputs true if the number is NaN, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsNaNNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => isNaN(input), ISNANNAME, config);\r\n    }\r\n}\r\nRegisterClass(ISNANNAME, FlowGraphIsNaNNumberBlock);\r\n\r\nconst ISINFINITENAME = \"FGIsInfinityNumberBlock\";\r\n/**\r\n * Outputs true if the number is infinite, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphIsInfinityNumberBlock extends FlowGraphUnaryOperationBlock<number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeBoolean, (input) => !isFinite(input), ISINFINITENAME, config);\r\n    }\r\n}\r\nRegisterClass(ISINFINITENAME, FlowGraphIsInfinityNumberBlock);\r\n\r\nconst SQRTNAME = \"FGSqrtNumberBlock\";\r\n/**\r\n * Outputs the square root of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSqrtNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sqrt(input), SQRTNAME, config);\r\n    }\r\n}\r\nRegisterClass(SQRTNAME, FlowGraphSqrtNumberBlock);\r\n\r\nconst ABSNAME = \"FGAbsNumberBlock\";\r\n/**\r\n * Outputs the absolute value of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphAbsNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.abs(input), ABSNAME, config);\r\n    }\r\n}\r\nRegisterClass(ABSNAME, FlowGraphAbsNumberBlock);\r\n\r\nconst NEGNAME = \"FGNegateNumberBlock\";\r\n/**\r\n * Negates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphNegateNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => -input, NEGNAME, config);\r\n    }\r\n}\r\nRegisterClass(NEGNAME, FlowGraphNegateNumberBlock);\r\n\r\nconst FLOORNAME = \"FGFloorNumberBlock\";\r\n/**\r\n * Outputs the floor of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphFloorNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.floor(input), FLOORNAME, config);\r\n    }\r\n}\r\n\r\nRegisterClass(FLOORNAME, FlowGraphFloorNumberBlock);\r\n\r\nconst CEILNAME = \"FGCeilNumberBlock\";\r\n/**\r\n * Outputs the ceiling of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCeilNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.ceil(input), CEILNAME, config);\r\n    }\r\n}\r\nRegisterClass(CEILNAME, FlowGraphCeilNumberBlock);\r\n\r\nconst ROUNDNAME = \"FGRoundNumberBlock\";\r\n/**\r\n * Rounds the left input to right digits of precision.\r\n * @see rounding function from: https://docs.google.com/spreadsheets/d/1wSFUFLPpRFVlL-va3YtYC6sepNvPapVawG1-nzoTF34/edit#gid=0\r\n * @experimental\r\n */\r\nexport class FlowGraphRoundNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (input, digits) => Math.round(input / Math.pow(10, digits)) / Math.pow(10, digits), ROUNDNAME, config);\r\n    }\r\n}\r\nRegisterClass(ROUNDNAME, FlowGraphRoundNumberBlock);\r\n\r\nconst TRUNCNAME = \"FGTruncNumberBlock\";\r\n/**\r\n * Truncates the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTruncNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.trunc(input), TRUNCNAME, config);\r\n    }\r\n}\r\nRegisterClass(TRUNCNAME, FlowGraphTruncNumberBlock);\r\n\r\nconst EXPNAME = \"FGExpNumberBlock\";\r\n/**\r\n * Outputs the exponential of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphExpNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.exp(input), EXPNAME, config);\r\n    }\r\n}\r\nRegisterClass(EXPNAME, FlowGraphExpNumberBlock);\r\n\r\nconst LOG10NAME = \"FGLog10NumberBlock\";\r\n/**\r\n * Outputs the base 10 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLog10NumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log10(input), LOG10NAME, config);\r\n    }\r\n}\r\nRegisterClass(LOG10NAME, FlowGraphLog10NumberBlock);\r\n\r\nconst LOGNAME = \"FGLogNumberBlock\";\r\n/**\r\n * Outputs the natural logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLogNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input), LOGNAME, config);\r\n    }\r\n}\r\nRegisterClass(LOGNAME, FlowGraphLogNumberBlock);\r\n\r\nconst LNNAME = \"FGLnNumberBlock\";\r\n/**\r\n * Outputs the base 2 logarithm of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphLnNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.log(input) / Math.LN2, LNNAME, config);\r\n    }\r\n}\r\nRegisterClass(LNNAME, FlowGraphLnNumberBlock);\r\n\r\nconst SINENAME = \"FGSineNumberBlock\";\r\n/**\r\n * Outputs the sine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphSinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.sin(input), SINENAME, config);\r\n    }\r\n}\r\nRegisterClass(SINENAME, FlowGraphSinNumberBlock);\r\n\r\nconst COSNAME = \"FGCosNumberBlock\";\r\n/**\r\n * Outputs the cosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphCosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.cos(input), COSNAME, config);\r\n    }\r\n}\r\nRegisterClass(COSNAME, FlowGraphCosNumberBlock);\r\n\r\nconst TANNAME = \"FGTanNumberBlock\";\r\n/**\r\n * Outputs the tangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphTanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.tan(input), TANNAME, config);\r\n    }\r\n}\r\nRegisterClass(TANNAME, FlowGraphTanNumberBlock);\r\n\r\nconst ASINENAME = \"FGASineNumberBlock\";\r\n/**\r\n * Outputs the arcsine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphASinNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.asin(input), ASINENAME, config);\r\n    }\r\n}\r\nRegisterClass(ASINENAME, FlowGraphASinNumberBlock);\r\n\r\nconst ACOSNAME = \"FGACosNumberBlock\";\r\n/**\r\n * Outputs the arccosine of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphACosNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.acos(input), ACOSNAME, config);\r\n    }\r\n}\r\nRegisterClass(ACOSNAME, FlowGraphACosNumberBlock);\r\n\r\nconst ATANNAME = \"FGATanNumberBlock\";\r\n/**\r\n * Outputs the arctangent of the input.\r\n * @experimental\r\n */\r\nexport class FlowGraphATanNumberBlock extends FlowGraphUnaryOperationBlock<number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, (input) => Math.atan(input), ATANNAME, config);\r\n    }\r\n}\r\nRegisterClass(ATANNAME, FlowGraphATanNumberBlock);\r\n\r\nconst ENAME = \"FGENumberBlock\";\r\n/**\r\n * Outputs the number E.\r\n * @experimental\r\n */\r\nexport class FlowGraphENumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.E, ENAME, config);\r\n    }\r\n}\r\nRegisterClass(ENAME, FlowGraphENumberBlock);\r\n\r\nconst PINAME = \"FGPiNumberBlock\";\r\n/**\r\n * Outputs the number PI.\r\n * @experimental\r\n */\r\nexport class FlowGraphPiNumberBlock extends FlowGraphConstantOperationBlock<number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, () => Math.PI, PINAME, config);\r\n    }\r\n}\r\nRegisterClass(PINAME, FlowGraphPiNumberBlock);\r\n\r\nconst ATAN2NAME = \"FGATan2NumberBlock\";\r\n/**\r\n * Outputs the arctan2 of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphATan2NumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.atan2(left, right), ATAN2NAME, config);\r\n    }\r\n}\r\nRegisterClass(ATAN2NAME, FlowGraphATan2NumberBlock);\r\n\r\nconst RNDNAME = \"FGRandomNumberBlock\";\r\n/**\r\n * @experimental\r\n * Outputs a number between left and right.\r\n */\r\nexport class FlowGraphRandomNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => left + Math.random() * (right - left), RNDNAME, config);\r\n    }\r\n}\r\nRegisterClass(RNDNAME, FlowGraphRandomNumberBlock);\r\n\r\nconst MINNAME = \"FGMinNumberBlock\";\r\n/**\r\n * Outputs the minimum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMinNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.min(left, right), MINNAME, config);\r\n    }\r\n}\r\nRegisterClass(MINNAME, FlowGraphMinNumberBlock);\r\n\r\nconst MAXNAME = \"FGMaxNumberBlock\";\r\n/**\r\n * Outputs the maximum of the left and right inputs.\r\n * @experimental\r\n */\r\nexport class FlowGraphMaxNumberBlock extends FlowGraphBinaryOperationBlock<number, number, number> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeNumber, (left, right) => Math.max(left, right), MAXNAME, config);\r\n    }\r\n}\r\nRegisterClass(MAXNAME, FlowGraphMaxNumberBlock);\r\n\r\nconst EQUALSNAME = \"FGEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is equal to right, false otherwise.\r\n * @experimental\r\n */\r\nexport class FlowGraphEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left === right, EQUALSNAME, config);\r\n    }\r\n}\r\nRegisterClass(EQUALSNAME, FlowGraphEqualsNumberBlock);\r\n\r\nconst GREATERTHANNAME = \"FGGreaterThanNumberBlock\";\r\n/**\r\n * Outputs true if left is greater than right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left > right, GREATERTHANNAME, config);\r\n    }\r\n}\r\nRegisterClass(GREATERTHANNAME, FlowGraphGreaterThanNumberBlock);\r\n\r\nconst GREATEROREQUALNAME = \"FGGreaterThanOrEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is greater than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphGreaterThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left >= right, GREATEROREQUALNAME, config);\r\n    }\r\n}\r\nRegisterClass(GREATEROREQUALNAME, FlowGraphGreaterThanOrEqualsNumberBlock);\r\n\r\nconst LESSTHANNAME = \"FGLessThanNumberBlock\";\r\n/**\r\n * Outputs true if left is less than right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left < right, LESSTHANNAME, config);\r\n    }\r\n}\r\nRegisterClass(LESSTHANNAME, FlowGraphLessThanNumberBlock);\r\n\r\nconst LESSOREQUALNAME = \"FGLessThanOrEqualsNumberBlock\";\r\n/**\r\n * Outputs true if left is less than or equal to right, false otherwise.\r\n */\r\nexport class FlowGraphLessThanOrEqualsNumberBlock extends FlowGraphBinaryOperationBlock<number, number, boolean> {\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(RichTypeNumber, RichTypeNumber, RichTypeBoolean, (left, right) => left <= right, LESSOREQUALNAME, config);\r\n    }\r\n}\r\nRegisterClass(LESSOREQUALNAME, FlowGraphLessThanOrEqualsNumberBlock);\r\n\r\nconst MIXNAME = \"FGMixNumberBlock\";\r\n/**\r\n * Outputs a mix of left and right based on alpha.\r\n * @experimental\r\n */\r\nexport class FlowGraphMixNumberBlock extends FlowGraphBlock {\r\n    public leftInput: FlowGraphDataConnection<number>;\r\n    public rightInput: FlowGraphDataConnection<number>;\r\n    public alphaInput: FlowGraphDataConnection<number>;\r\n\r\n    public resultOutput: FlowGraphDataConnection<number>;\r\n\r\n    constructor(config?: IFlowGraphBlockConfiguration) {\r\n        super(config);\r\n        this.leftInput = this._registerDataInput(\"leftInput\", RichTypeNumber);\r\n        this.rightInput = this._registerDataInput(\"rightInput\", RichTypeNumber);\r\n        this.alphaInput = this._registerDataInput(\"alphaInput\", RichTypeNumber);\r\n        this.resultOutput = this._registerDataOutput(\"resultOutput\", RichTypeNumber);\r\n    }\r\n\r\n    public _updateOutputs(_context: FlowGraphContext): void {\r\n        const left = this.leftInput.getValue(_context);\r\n        const right = this.rightInput.getValue(_context);\r\n        const alpha = this.alphaInput.getValue(_context);\r\n        const mix = left + (right - left) * alpha;\r\n        this.resultOutput.setValue(mix, _context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return MIXNAME;\r\n    }\r\n}\r\nRegisterClass(MIXNAME, FlowGraphMixNumberBlock);\r\n"]}