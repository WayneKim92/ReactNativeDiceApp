import { Vector2 } from "../../../../Maths/math.vector";
import { FlowGraphBinaryOperationBlock } from "../flowGraphBinaryOperationBlock";
import { FlowGraphUnaryOperationBlock } from "../flowGraphUnaryOperationBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
import { FlowGraphBlock } from "../../../flowGraphBlock";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphContext } from "../../../flowGraphContext";
/**
 * Adds two vectors together.
 * @experimental
 */
export declare class FlowGraphAddVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Subtracts two vectors.
 * @experimental
 */
export declare class FlowGraphSubtractVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Multiplies two vectors together.
 * @experimental
 */
export declare class FlowGraphMultiplyVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Divides two vectors.
 * @experimental
 */
export declare class FlowGraphDivideVector2Block extends FlowGraphBinaryOperationBlock<Vector2, Vector2, Vector2> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Scales a vector by a given factor.
 * @experimental
 */
export declare class FlowGraphScaleVector2Block extends FlowGraphBinaryOperationBlock<Vector2, number, Vector2> {
    constructor(config?: IFlowGraphBlockConfiguration);
}
/**
 * Gets the length of a vector.
 * @experimental
 */
export declare class FlowGraphLengthVector2Block extends FlowGraphUnaryOperationBlock<Vector2, number> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Normalizes a vector.
 * @experimental
 */
export declare class FlowGraphNormalizeVector2Block extends FlowGraphUnaryOperationBlock<Vector2, Vector2> {
    constructor(config: IFlowGraphBlockConfiguration);
}
/**
 * Creates a vector from two components.
 */
export declare class FlowGraphCreateVector2Block extends FlowGraphBlock {
    /**
     * Input connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Input connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    /**
     * Output connection: The created vector.
     */
    readonly vector: FlowGraphDataConnection<Vector2>;
    private _cachedVector;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
}
/**
 * Split a vector into its components.
 */
export declare class FlowGraphSplitVector2Block extends FlowGraphBlock {
    /**
     * Input connection: The vector to split.
     */
    readonly vector: FlowGraphDataConnection<Vector2>;
    /**
     * Output connection: The x component of the vector.
     */
    readonly x: FlowGraphDataConnection<number>;
    /**
     * Output connection: The y component of the vector.
     */
    readonly y: FlowGraphDataConnection<number>;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
}
/**
 * Rotates a vector by a given angle.
 */
export declare class FlowGraphRotate2dVector2Block extends FlowGraphBlock {
    /**
     * Input connection: The vector to rotate.
     */
    readonly input: FlowGraphDataConnection<Vector2>;
    /**
     * Input connection: The angle to rotate by.
     */
    readonly angle: FlowGraphDataConnection<number>;
    /**
     * Output connection: The rotated vector.
     */
    readonly output: FlowGraphDataConnection<Vector2>;
    private _cachedVector;
    constructor(config?: IFlowGraphBlockConfiguration);
    _updateOutputs(_context: FlowGraphContext): void;
}
