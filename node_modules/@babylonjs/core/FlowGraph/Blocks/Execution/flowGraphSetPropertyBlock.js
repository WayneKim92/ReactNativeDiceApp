import { RichTypeAny, RichTypeNumber } from "../../flowGraphRichTypes.js";
import { FlowGraphWithOnDoneExecutionBlock } from "../../flowGraphWithOnDoneExecutionBlock.js";
import { RegisterClass } from "../../../Misc/typeStore.js";
/**
 * @experimental
 * Block that sets a property on a target object.
 */
export class FlowGraphSetPropertyBlock extends FlowGraphWithOnDoneExecutionBlock {
    constructor(config) {
        super(config);
        this.config = config;
        this.value = this._registerDataInput("value", RichTypeAny);
        this._registerDataInput(config.subString, RichTypeNumber);
    }
    _setProperty(target, property, value) {
        const splitProp = property.split(".");
        let currentTarget = target;
        for (let i = 0; i < splitProp.length - 1; i++) {
            currentTarget = currentTarget[splitProp[i]];
        }
        currentTarget[splitProp[splitProp.length - 1]] = value;
    }
    _execute(context) {
        const target = context._getTargetFromPath(this.config.path, this.config.subString, this);
        const property = this.config.property;
        const value = this.value.getValue(context);
        if (target && property) {
            this._setProperty(target, property, value);
        }
        else {
            throw new Error("Invalid target or property");
        }
        this.onDone._activateSignal(context);
    }
    getClassName() {
        return "FGSetPropertyBlock";
    }
}
RegisterClass("FGSetPropertyBlock", FlowGraphSetPropertyBlock);
//# sourceMappingURL=flowGraphSetPropertyBlock.js.map