{"version":3,"file":"flowGraphSetPropertyBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FlowGraph/Blocks/Execution/flowGraphSetPropertyBlock.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAGvE,OAAO,EAAE,iCAAiC,EAAE,MAAM,yCAAyC,CAAC;AAC5F,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAyBxD;;;GAGG;AACH,MAAM,OAAO,yBAAkC,SAAQ,iCAAiC;IAMpF,YAA0B,MAA+C;QACrE,KAAK,CAAC,MAAM,CAAC,CAAC;QADQ,WAAM,GAAN,MAAM,CAAyC;QAGrE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC9D,CAAC;IAEO,YAAY,CAAC,MAAW,EAAE,QAAgB,EAAE,KAAU;QAC1D,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,aAAa,GAAG,MAAM,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC3C,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;QAED,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3D,CAAC;IAEM,QAAQ,CAAC,OAAyB;QACrC,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzF,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAE3C,IAAI,MAAM,IAAI,QAAQ,EAAE;YACpB,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAEM,YAAY;QACf,OAAO,oBAAoB,CAAC;IAChC,CAAC;CACJ;AACD,aAAa,CAAC,oBAAoB,EAAE,yBAAyB,CAAC,CAAC","sourcesContent":["import { RichTypeAny, RichTypeNumber } from \"../../flowGraphRichTypes\";\r\nimport type { FlowGraphContext } from \"../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../flowGraphDataConnection\";\r\nimport { FlowGraphWithOnDoneExecutionBlock } from \"../../flowGraphWithOnDoneExecutionBlock\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../flowGraphBlock\";\r\n\r\n/**\r\n * @experimental\r\n * Configuration for the set property block.\r\n */\r\nexport interface IFlowGraphSetPropertyBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The path of the entity whose property will be set. Needs a corresponding\r\n     * entity on the context variables.\r\n     */\r\n    path: string;\r\n    /**\r\n     * The property to set on the target object.\r\n     */\r\n    property: string;\r\n    /**\r\n     * A string that will be substituted by a node with the same name, if encountered enclosed by \\{\\}.\r\n     * It will create an input data node which expects a number. The value of the node will be used\r\n     * to substitute the string.\r\n     */\r\n    subString: string;\r\n}\r\n\r\n/**\r\n * @experimental\r\n * Block that sets a property on a target object.\r\n */\r\nexport class FlowGraphSetPropertyBlock<ValueT> extends FlowGraphWithOnDoneExecutionBlock {\r\n    /**\r\n     * Input connection: The value to set on the property.\r\n     */\r\n    public readonly value: FlowGraphDataConnection<ValueT>;\r\n\r\n    public constructor(public config: IFlowGraphSetPropertyBlockConfiguration) {\r\n        super(config);\r\n\r\n        this.value = this._registerDataInput(\"value\", RichTypeAny);\r\n        this._registerDataInput(config.subString, RichTypeNumber);\r\n    }\r\n\r\n    private _setProperty(target: any, property: string, value: any): void {\r\n        const splitProp = property.split(\".\");\r\n\r\n        let currentTarget = target;\r\n        for (let i = 0; i < splitProp.length - 1; i++) {\r\n            currentTarget = currentTarget[splitProp[i]];\r\n        }\r\n\r\n        currentTarget[splitProp[splitProp.length - 1]] = value;\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext): void {\r\n        const target = context._getTargetFromPath(this.config.path, this.config.subString, this);\r\n        const property = this.config.property;\r\n        const value = this.value.getValue(context);\r\n\r\n        if (target && property) {\r\n            this._setProperty(target, property, value);\r\n        } else {\r\n            throw new Error(\"Invalid target or property\");\r\n        }\r\n\r\n        this.onDone._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGSetPropertyBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSetPropertyBlock\", FlowGraphSetPropertyBlock);\r\n"]}