import type { FlowGraphContext } from "../../../flowGraphContext";
import type { Animatable, Animation, IAnimatable } from "../../../../Animations";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphSignalConnection } from "../../../flowGraphSignalConnection";
import { FlowGraphAsyncExecutionBlock } from "../../../flowGraphAsyncExecutionBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
/**
 * @experimental
 * A block that plays an animation on an animatable object.
 */
export declare class FlowGraphPlayAnimationBlock extends FlowGraphAsyncExecutionBlock {
    /**
     * Input connection: The target to play the animation on.
     */
    readonly target: FlowGraphDataConnection<IAnimatable>;
    /**
     * Input connection: The animation to play.
     */
    readonly animation: FlowGraphDataConnection<Animation>;
    /**
     * Input connection: The speed of the animation.
     */
    readonly speed: FlowGraphDataConnection<number>;
    /**
     * Input connection: Should the animation loop?
     */
    readonly loop: FlowGraphDataConnection<boolean>;
    /**
     * Input connection: The starting frame of the animation.
     */
    readonly from: FlowGraphDataConnection<number>;
    /**
     * Input connection: The ending frame of the animation.
     */
    readonly to: FlowGraphDataConnection<number>;
    /**
     * Output connection: The signal that is triggered when the animation ends.
     */
    readonly onAnimationEnd: FlowGraphSignalConnection;
    /**
     * Output connection: The animatable that is currently running.
     */
    readonly runningAnimatable: FlowGraphDataConnection<Animatable>;
    constructor(config?: IFlowGraphBlockConfiguration);
    /**
     * @internal
     * @param context
     */
    _preparePendingTasks(context: FlowGraphContext): void;
    _execute(context: FlowGraphContext): void;
    private _onAnimationEnd;
    /**
     * @internal
     * Stop any currently running animations.
     */
    _cancelPendingTasks(context: FlowGraphContext): void;
    getClassName(): string;
}
