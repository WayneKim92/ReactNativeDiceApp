import { RichTypeBoolean } from "../../../flowGraphRichTypes.js";
import { FlowGraphWithOnDoneExecutionBlock } from "../../../flowGraphWithOnDoneExecutionBlock.js";
import { RegisterClass } from "../../../../Misc/typeStore.js";
/**
 * @experimental
 * A block that executes a branch while a condition is true.
 */
export class FlowGraphWhileLoopBlock extends FlowGraphWithOnDoneExecutionBlock {
    constructor(config) {
        super(config);
        this.config = config;
        this.condition = this._registerDataInput("condition", RichTypeBoolean);
        this.loopBody = this._registerSignalOutput("loopBody");
    }
    _execute(context, _callingSignal) {
        var _a;
        let conditionValue = this.condition.getValue(context);
        if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.isDo) && !conditionValue) {
            this.loopBody._activateSignal(context);
        }
        while (conditionValue) {
            this.loopBody._activateSignal(context);
            conditionValue = this.condition.getValue(context);
        }
        this.onDone._activateSignal(context);
    }
    getClassName() {
        return "FGWhileLoopBlock";
    }
}
RegisterClass("FGWhileLoopBlock", FlowGraphWhileLoopBlock);
//# sourceMappingURL=flowGraphWhileLoopBlock.js.map