import type { FlowGraphContext } from "../../../flowGraphContext";
import type { FlowGraphDataConnection } from "../../../flowGraphDataConnection";
import type { FlowGraphSignalConnection } from "../../../flowGraphSignalConnection";
import { FlowGraphWithOnDoneExecutionBlock } from "../../../flowGraphWithOnDoneExecutionBlock";
import type { IFlowGraphBlockConfiguration } from "../../../flowGraphBlock";
/**
 * @experimental
 * A block that throttles the execution of its output flow.
 */
export declare class FlowGraphThrottleBlock extends FlowGraphWithOnDoneExecutionBlock {
    /**
     * Input connection: The duration of the throttle, in ms.
     */
    readonly duration: FlowGraphDataConnection<number>;
    /**
     * Input connection: Resets the throttle.
     */
    readonly reset: FlowGraphSignalConnection;
    /**
     * Output connection: The time remaining before the throttle is done, in ms.
     */
    readonly timeRemaining: FlowGraphDataConnection<number>;
    constructor(config?: IFlowGraphBlockConfiguration);
    _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void;
    getClassName(): string;
}
