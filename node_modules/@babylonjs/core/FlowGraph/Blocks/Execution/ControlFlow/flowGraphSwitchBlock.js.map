{"version":3,"file":"flowGraphSwitchBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphSwitchBlock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAC3E,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAG1D,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAY3D;;;GAGG;AACH,MAAM,OAAO,oBAAwB,SAAQ,uBAAuB;IAUhE,YAAmB,MAA6C;QAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;QADC,WAAM,GAAN,MAAM,CAAuC;QAG5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACvE,CAAC;IAEM,SAAS;QACZ,KAAK,CAAC,SAAS,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;SAChE;IACL,CAAC;IAEM,QAAQ,CAAC,OAAyB,EAAE,cAAyC;QAChF,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAExD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,IAAI,cAAc,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBACzC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBAC7C,OAAO;aACV;SACJ;QAED,eAAe;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC3E,CAAC;IAEM,YAAY;QACf,OAAO,eAAe,CAAC;IAC3B,CAAC;CACJ;AACD,aAAa,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC","sourcesContent":["import type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeAny } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * @experimental\r\n * Configuration for a switch block.\r\n */\r\nexport interface IFlowGraphSwitchBlockConfiguration<T> extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The possible values for the selection.\r\n     */\r\n    cases: T[];\r\n}\r\n\r\n/**\r\n * @experimental\r\n * A block that executes a branch based on a selection.\r\n */\r\nexport class FlowGraphSwitchBlock<T> extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: The value of the selection.\r\n     */\r\n    public readonly selection: FlowGraphDataConnection<T>;\r\n    /**\r\n     * Output connection: The output flows.\r\n     */\r\n    public outputFlows: FlowGraphSignalConnection[];\r\n\r\n    constructor(public config: IFlowGraphSwitchBlockConfiguration<T>) {\r\n        super(config);\r\n\r\n        this.selection = this._registerDataInput(\"selection\", RichTypeAny);\r\n    }\r\n\r\n    public configure(): void {\r\n        super.configure();\r\n        this.outputFlows = [];\r\n        for (let i = 0; i <= this.config.cases.length; i++) {\r\n            this.outputFlows.push(this._registerSignalOutput(`out${i}`));\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\r\n        const selectionValue = this.selection.getValue(context);\r\n\r\n        for (let i = 0; i < this.config.cases.length; i++) {\r\n            if (selectionValue === this.config.cases[i]) {\r\n                this.outputFlows[i]._activateSignal(context);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // default case\r\n        this.outputFlows[this.outputFlows.length - 1]._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGSwitchBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGSwitchBlock\", FlowGraphSwitchBlock);\r\n"]}