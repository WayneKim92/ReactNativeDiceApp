import { RichTypeNumber } from "../../../flowGraphRichTypes.js";
import { FlowGraphWithOnDoneExecutionBlock } from "../../../flowGraphWithOnDoneExecutionBlock.js";
import { RegisterClass } from "../../../../Misc/typeStore.js";
/**
 * A block that executes a branch a set number of times.
 * @experimental
 */
export class FlowGraphDoNBlock extends FlowGraphWithOnDoneExecutionBlock {
    constructor(config) {
        super(config);
        this.reset = this._registerSignalInput("reset");
        this.maxNumberOfExecutions = this._registerDataInput("numberOfExecutions", RichTypeNumber);
        this.currentCount = this._registerDataOutput("currentCount", RichTypeNumber);
    }
    _execute(context, callingSignal) {
        if (callingSignal === this.reset) {
            this.currentCount.setValue(0, context);
        }
        else {
            const currentCountValue = this.currentCount.getValue(context);
            if (currentCountValue < this.maxNumberOfExecutions.getValue(context)) {
                this.currentCount.setValue(currentCountValue + 1, context);
                this.onDone._activateSignal(context);
            }
        }
    }
    getClassName() {
        return "FGDoNBlock";
    }
}
RegisterClass("FGDoNBlock", FlowGraphDoNBlock);
//# sourceMappingURL=flowGraphDoNBlock.js.map