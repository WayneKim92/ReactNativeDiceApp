{"version":3,"file":"flowGraphMultiGateBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphMultiGateBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\r\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\r\nimport { FlowGraphExecutionBlock } from \"../../../flowGraphExecutionBlock\";\r\nimport { RichTypeNumber } from \"../../../flowGraphRichTypes\";\r\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\r\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\r\n/**\r\n * @experimental\r\n * Configuration for the multi gate block.\r\n */\r\nexport interface IFlowGraphMultiGateBlockConfiguration extends IFlowGraphBlockConfiguration {\r\n    /**\r\n     * The number of output flows.\r\n     */\r\n    numberOutputFlows: number;\r\n    /**\r\n     * If the block should pick a random output flow from the ones that haven't been executed. Default to false.\r\n     */\r\n    isRandom?: boolean;\r\n    /**\r\n     * If the block should loop back to the first output flow after executing the last one. Default to false.\r\n     */\r\n    loop?: boolean;\r\n    /**\r\n     * The index of the output flow to start with. Default to 0.\r\n     */\r\n    startIndex?: number;\r\n}\r\n/**\r\n * @experimental\r\n * A block that has an input flow and routes it to any potential output flows, randomly or sequentially\r\n * @see https://docs.google.com/document/d/1MT7gL-IEn_PUw-4XGBazMxsyqsxqgAVGYcNeC4Cj_9Q/edit#heading=h.i2sn85fbjo60\r\n */\r\nexport class FlowGraphMultiGateBlock extends FlowGraphExecutionBlock {\r\n    /**\r\n     * Input connection: Resets the gate.\r\n     */\r\n    public readonly reset: FlowGraphSignalConnection;\r\n    /**\r\n     * Output connections: The output flows.\r\n     */\r\n    public outFlows: FlowGraphSignalConnection[];\r\n    /**\r\n     * Output connection: The index of the current output flow.\r\n     */\r\n    public readonly currentIndex: FlowGraphDataConnection<number>;\r\n    private _cachedUnusedIndexes: number[] = [];\r\n\r\n    constructor(public config: IFlowGraphMultiGateBlockConfiguration) {\r\n        super(config);\r\n        this.reset = this._registerSignalInput(\"reset\");\r\n        this.currentIndex = this._registerDataOutput(\"currentIndex\", RichTypeNumber);\r\n    }\r\n\r\n    public configure() {\r\n        super.configure();\r\n        this.config.startIndex = this.config.startIndex !== undefined ? this.config.startIndex : 0;\r\n        this.config.startIndex = Math.max(0, Math.min(this.config.startIndex!, this.config.numberOutputFlows - 1));\r\n        this.outFlows = [];\r\n        for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n            this.outFlows.push(this._registerSignalOutput(`out${i}`));\r\n        }\r\n    }\r\n\r\n    private _getUnusedIndexes(context: FlowGraphContext): number[] {\r\n        const result = this._cachedUnusedIndexes;\r\n        result.length = 0;\r\n        if (!context._hasExecutionVariable(this, \"unusedIndexes\")) {\r\n            for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n                result.push(i);\r\n            }\r\n        } else {\r\n            const contextUnusedIndexes = context._getExecutionVariable(this, \"unusedIndexes\");\r\n            for (let i = 0; i < contextUnusedIndexes.length; i++) {\r\n                result.push(contextUnusedIndexes[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private _getNextOutput(currentIndex: number, unusedIndexes: number[]): number {\r\n        if (this.config.isRandom) {\r\n            const nextIndex = Math.floor(Math.random() * unusedIndexes.length);\r\n            return unusedIndexes[nextIndex];\r\n        } else {\r\n            return currentIndex + 1;\r\n        }\r\n    }\r\n\r\n    public _execute(context: FlowGraphContext, callingSignal: FlowGraphSignalConnection): void {\r\n        const currentIndex = context._getExecutionVariable(this, \"currentIndex\") ?? this.config.startIndex! - 1;\r\n        let unusedIndexes = this._getUnusedIndexes(context);\r\n\r\n        if (callingSignal === this.reset) {\r\n            context._deleteExecutionVariable(this, \"currentIndex\");\r\n            context._deleteExecutionVariable(this, \"unusedIndexes\");\r\n            return;\r\n        }\r\n\r\n        let nextIndex = this._getNextOutput(currentIndex, unusedIndexes);\r\n        if (nextIndex >= this.config.numberOutputFlows && this.config.loop) {\r\n            nextIndex = 0;\r\n        } else if (nextIndex >= this.config.numberOutputFlows && !this.config.loop) {\r\n            return;\r\n        }\r\n\r\n        unusedIndexes = unusedIndexes.filter((i) => i !== nextIndex);\r\n        if (unusedIndexes.length === 0) {\r\n            for (let i = 0; i < this.config.numberOutputFlows; i++) {\r\n                unusedIndexes.push(i);\r\n            }\r\n        }\r\n        context._setExecutionVariable(this, \"unusedIndexes\", unusedIndexes);\r\n        context._setExecutionVariable(this, \"currentIndex\", nextIndex);\r\n        this.currentIndex.setValue(nextIndex, context);\r\n        this.outFlows[nextIndex]._activateSignal(context);\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FGMultiGateBlock\";\r\n    }\r\n}\r\nRegisterClass(\"FGMultiGateBlock\", FlowGraphMultiGateBlock);\r\n"]}