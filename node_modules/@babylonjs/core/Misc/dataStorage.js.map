{"version":3,"file":"dataStorage.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/dataStorage.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH,MAAM,OAAO,WAAW;IAGZ,MAAM,CAAC,WAAW;QACtB,IAAI;YACA,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACjC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAChC,OAAO,YAAY,CAAC;SACvB;QAAC,WAAM;YACJ,MAAM,eAAe,GAA8B,EAAE,CAAC;YACtD,OAAO;gBACH,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBACb,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;oBACnC,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC9C,CAAC;gBACD,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACpB,eAAe,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACjC,CAAC;aACJ,CAAC;SACL;IACL,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,UAAU,CAAC,GAAW,EAAE,YAAoB;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,WAAW,CAAC,GAAW,EAAE,KAAa;QAChD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,WAAW,CAAC,GAAW,EAAE,YAAqB;QACxD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,YAAY,CAAC,GAAW,EAAE,KAAc;QAClD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,UAAU,CAAC,GAAW,EAAE,YAAoB;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,WAAW,CAAC,GAAW,EAAE,KAAa;QAChD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjD,CAAC;;AA/Ec,oBAAQ,GAAa,WAAW,CAAC,WAAW,EAAE,CAAC","sourcesContent":["interface IStorage {\r\n    getItem: (key: string) => string | null;\r\n    setItem: (key: string, value: string) => void;\r\n}\r\n\r\n/**\r\n * Class for storing data to local storage if available or in-memory storage otherwise\r\n */\r\nexport class DataStorage {\r\n    private static _Storage: IStorage = DataStorage._GetStorage();\r\n\r\n    private static _GetStorage(): IStorage {\r\n        try {\r\n            localStorage.setItem(\"test\", \"\");\r\n            localStorage.removeItem(\"test\");\r\n            return localStorage;\r\n        } catch {\r\n            const inMemoryStorage: { [key: string]: string } = {};\r\n            return {\r\n                getItem: (key) => {\r\n                    const value = inMemoryStorage[key];\r\n                    return value === undefined ? null : value;\r\n                },\r\n                setItem: (key, value) => {\r\n                    inMemoryStorage[key] = value;\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads a string from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The string value\r\n     */\r\n    public static ReadString(key: string, defaultValue: string): string {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a string to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteString(key: string, value: string): void {\r\n        this._Storage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * Reads a boolean from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The boolean value\r\n     */\r\n    public static ReadBoolean(key: string, defaultValue: boolean): boolean {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value === \"true\" : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a boolean to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteBoolean(key: string, value: boolean) {\r\n        this._Storage.setItem(key, value ? \"true\" : \"false\");\r\n    }\r\n\r\n    /**\r\n     * Reads a number from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The number value\r\n     */\r\n    public static ReadNumber(key: string, defaultValue: number): number {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? parseFloat(value) : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a number to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteNumber(key: string, value: number) {\r\n        this._Storage.setItem(key, value.toString());\r\n    }\r\n}\r\n"]}