{"version":3,"file":"deepCopier.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/deepCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"./logger\";\r\n\r\nconst CloneValue = (source: any, destinationObject: any, shallowCopyValues: boolean) => {\r\n    if (!source) {\r\n        return null;\r\n    }\r\n\r\n    if (source.getClassName && source.getClassName() === \"Mesh\") {\r\n        return null;\r\n    }\r\n\r\n    if (source.getClassName && (source.getClassName() === \"SubMesh\" || source.getClassName() === \"PhysicsBody\")) {\r\n        return source.clone(destinationObject);\r\n    } else if (source.clone) {\r\n        return source.clone();\r\n    } else if (Array.isArray(source)) {\r\n        return source.slice();\r\n    } else if (shallowCopyValues && typeof source === \"object\") {\r\n        return { ...source };\r\n    }\r\n    return null;\r\n};\r\n\r\nfunction GetAllPropertyNames(obj: any): string[] {\r\n    const props: string[] = [];\r\n\r\n    do {\r\n        Object.getOwnPropertyNames(obj).forEach(function (prop) {\r\n            if (props.indexOf(prop) === -1) {\r\n                props.push(prop);\r\n            }\r\n        });\r\n    } while ((obj = Object.getPrototypeOf(obj)));\r\n\r\n    return props;\r\n}\r\n\r\n/**\r\n * Class containing a set of static utilities functions for deep copy.\r\n */\r\nexport class DeepCopier {\r\n    /**\r\n     * Tries to copy an object by duplicating every property\r\n     * @param source defines the source object\r\n     * @param destination defines the target object\r\n     * @param doNotCopyList defines a list of properties to avoid\r\n     * @param mustCopyList defines a list of properties to copy (even if they start with _)\r\n     * @param shallowCopyValues defines wether properties referencing objects (none cloneable) must be shallow copied (false by default)\r\n     * @remarks shallowCopyValues will not instantite the copied values which makes it only usable for \"JSON objects\"\r\n     */\r\n    public static DeepCopy(source: any, destination: any, doNotCopyList?: string[], mustCopyList?: string[], shallowCopyValues = false): void {\r\n        const properties = GetAllPropertyNames(source);\r\n        for (const prop of properties) {\r\n            if (prop[0] === \"_\" && (!mustCopyList || mustCopyList.indexOf(prop) === -1)) {\r\n                continue;\r\n            }\r\n\r\n            if (prop.endsWith(\"Observable\")) {\r\n                continue;\r\n            }\r\n\r\n            if (doNotCopyList && doNotCopyList.indexOf(prop) !== -1) {\r\n                continue;\r\n            }\r\n\r\n            const sourceValue = source[prop];\r\n            const typeOfSourceValue = typeof sourceValue;\r\n\r\n            if (typeOfSourceValue === \"function\") {\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                if (typeOfSourceValue === \"object\") {\r\n                    if (sourceValue instanceof Uint8Array) {\r\n                        destination[prop] = Uint8Array.from(sourceValue);\r\n                    } else if (sourceValue instanceof Array) {\r\n                        destination[prop] = [];\r\n\r\n                        if (sourceValue.length > 0) {\r\n                            if (typeof sourceValue[0] == \"object\") {\r\n                                for (let index = 0; index < sourceValue.length; index++) {\r\n                                    const clonedValue = CloneValue(sourceValue[index], destination, shallowCopyValues);\r\n\r\n                                    if (destination[prop].indexOf(clonedValue) === -1) {\r\n                                        // Test if auto inject was not done\r\n                                        destination[prop].push(clonedValue);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                destination[prop] = sourceValue.slice(0);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        destination[prop] = CloneValue(sourceValue, destination, shallowCopyValues);\r\n                    }\r\n                } else {\r\n                    destination[prop] = sourceValue;\r\n                }\r\n            } catch (e) {\r\n                // Log a warning (it could be because of a read-only property)\r\n                Logger.Warn(e.message);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}