{"version":3,"file":"assetsManager.js","sourceRoot":"","sources":["../../../../dev/core/src/Misc/assetsManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { SceneLoader, SceneLoaderAnimationGroupLoadingMode } from \"../Loading/sceneLoader\";\r\nimport { Tools } from \"./tools\";\r\nimport { Observable } from \"./observable\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport { HDRCubeTexture } from \"../Materials/Textures/hdrCubeTexture\";\r\nimport { EquiRectangularCubeTexture } from \"../Materials/Textures/equiRectangularCubeTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Animatable } from \"../Animations/animatable\";\r\nimport type { AnimationGroup } from \"../Animations/animationGroup\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Defines the list of states available for a task inside a AssetsManager\r\n */\r\nexport enum AssetTaskState {\r\n    /**\r\n     * Initialization\r\n     */\r\n    INIT,\r\n    /**\r\n     * Running\r\n     */\r\n    RUNNING,\r\n    /**\r\n     * Done\r\n     */\r\n    DONE,\r\n    /**\r\n     * Error\r\n     */\r\n    ERROR,\r\n}\r\n\r\n/**\r\n * Define an abstract asset task used with a AssetsManager class to load assets into a scene\r\n */\r\nexport abstract class AbstractAssetTask {\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: any) => void;\r\n\r\n    /**\r\n     * Callback called when the task is not successful\r\n     */\r\n    public onError: (task: any, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new AssetsManager\r\n     * @param name defines the name of the task\r\n     */\r\n    constructor(\r\n        /**\r\n         * Task name\r\n         */ public name: string\r\n    ) {}\r\n\r\n    private _isCompleted = false;\r\n    private _taskState = AssetTaskState.INIT;\r\n    private _errorObject: { message?: string; exception?: any };\r\n\r\n    /**\r\n     * Get if the task is completed\r\n     */\r\n    public get isCompleted(): boolean {\r\n        return this._isCompleted;\r\n    }\r\n\r\n    /**\r\n     * Gets the current state of the task\r\n     */\r\n    public get taskState(): AssetTaskState {\r\n        return this._taskState;\r\n    }\r\n\r\n    /**\r\n     * Gets the current error object (if task is in error)\r\n     */\r\n    public get errorObject(): { message?: string; exception?: any } {\r\n        return this._errorObject;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @internal\r\n     */\r\n    public _setErrorObject(message?: string, exception?: any) {\r\n        if (this._errorObject) {\r\n            return;\r\n        }\r\n\r\n        this._errorObject = {\r\n            message: message,\r\n            exception: exception,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public run(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        this._taskState = AssetTaskState.RUNNING;\r\n        this.runTask(\r\n            scene,\r\n            () => {\r\n                this._onDoneCallback(onSuccess, onError);\r\n            },\r\n            (msg, exception) => {\r\n                this._onErrorCallback(onError, msg, exception);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        throw new Error(\"runTask is not implemented\");\r\n    }\r\n\r\n    /**\r\n     * Reset will set the task state back to INIT, so the next load call of the assets manager will execute this task again.\r\n     * This can be used with failed tasks that have the reason for failure fixed.\r\n     */\r\n    public reset() {\r\n        this._taskState = AssetTaskState.INIT;\r\n    }\r\n\r\n    private _onErrorCallback(onError: (message?: string, exception?: any) => void, message?: string, exception?: any) {\r\n        this._taskState = AssetTaskState.ERROR;\r\n\r\n        this._errorObject = {\r\n            message: message,\r\n            exception: exception,\r\n        };\r\n\r\n        if (this.onError) {\r\n            this.onError(this, message, exception);\r\n        }\r\n\r\n        onError();\r\n    }\r\n\r\n    private _onDoneCallback(onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        try {\r\n            this._taskState = AssetTaskState.DONE;\r\n            this._isCompleted = true;\r\n\r\n            if (this.onSuccess) {\r\n                this.onSuccess(this);\r\n            }\r\n\r\n            onSuccess();\r\n        } catch (e) {\r\n            this._onErrorCallback(onError, \"Task is done, error executing success callback(s)\", e);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Define the interface used by progress events raised during assets loading\r\n */\r\nexport interface IAssetsProgressEvent {\r\n    /**\r\n     * Defines the number of remaining tasks to process\r\n     */\r\n    remainingCount: number;\r\n    /**\r\n     * Defines the total number of tasks\r\n     */\r\n    totalCount: number;\r\n    /**\r\n     * Defines the task that was just processed\r\n     */\r\n    task: AbstractAssetTask;\r\n}\r\n\r\n/**\r\n * Class used to share progress information about assets loading\r\n */\r\nexport class AssetsProgressEvent implements IAssetsProgressEvent {\r\n    /**\r\n     * Defines the number of remaining tasks to process\r\n     */\r\n    public remainingCount: number;\r\n    /**\r\n     * Defines the total number of tasks\r\n     */\r\n    public totalCount: number;\r\n    /**\r\n     * Defines the task that was just processed\r\n     */\r\n    public task: AbstractAssetTask;\r\n\r\n    /**\r\n     * Creates a AssetsProgressEvent\r\n     * @param remainingCount defines the number of remaining tasks to process\r\n     * @param totalCount defines the total number of tasks\r\n     * @param task defines the task that was just processed\r\n     */\r\n    constructor(remainingCount: number, totalCount: number, task: AbstractAssetTask) {\r\n        this.remainingCount = remainingCount;\r\n        this.totalCount = totalCount;\r\n        this.task = task;\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load assets into a container\r\n */\r\nexport class ContainerAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Get the loaded asset container\r\n     */\r\n    public loadedContainer: AssetContainer;\r\n    /**\r\n     * Gets the list of loaded transforms\r\n     */\r\n    public loadedTransformNodes: Array<TransformNode>;\r\n    /**\r\n     * Gets the list of loaded meshes\r\n     */\r\n    public loadedMeshes: Array<AbstractMesh>;\r\n    /**\r\n     * Gets the list of loaded particle systems\r\n     */\r\n    public loadedParticleSystems: Array<IParticleSystem>;\r\n    /**\r\n     * Gets the list of loaded skeletons\r\n     */\r\n    public loadedSkeletons: Array<Skeleton>;\r\n    /**\r\n     * Gets the list of loaded animation groups\r\n     */\r\n    public loadedAnimationGroups: Array<AnimationGroup>;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: ContainerAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: ContainerAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new ContainerAssetTask\r\n     * @param name defines the name of the task\r\n     * @param meshesNames defines the list of mesh's names you want to load\r\n     * @param rootUrl defines the root url to use as a base to load your meshes and associated resources\r\n     * @param sceneFilename defines the filename or File of the scene to load from\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the list of mesh's names you want to load\r\n         */\r\n        public meshesNames: any,\r\n        /**\r\n         * Defines the root url to use as a base to load your meshes and associated resources\r\n         */\r\n        public rootUrl: string,\r\n        /**\r\n         * Defines the filename or File of the scene to load from\r\n         */\r\n        public sceneFilename: string | File,\r\n        /**\r\n         * Defines the extension to use to load the scene (if not defined, \".babylon\" will be used)\r\n         */\r\n        public extension?: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        SceneLoader.LoadAssetContainer(\r\n            this.rootUrl,\r\n            this.sceneFilename,\r\n            scene,\r\n            (container: AssetContainer) => {\r\n                this.loadedContainer = container;\r\n                this.loadedMeshes = container.meshes;\r\n                this.loadedTransformNodes = container.transformNodes;\r\n                this.loadedParticleSystems = container.particleSystems;\r\n                this.loadedSkeletons = container.skeletons;\r\n                this.loadedAnimationGroups = container.animationGroups;\r\n                onSuccess();\r\n            },\r\n            null,\r\n            (scene, message, exception) => {\r\n                onError(message, exception);\r\n            },\r\n            this.extension\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load meshes\r\n */\r\nexport class MeshAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Gets the list of loaded transforms\r\n     */\r\n    public loadedTransformNodes: Array<TransformNode>;\r\n    /**\r\n     * Gets the list of loaded meshes\r\n     */\r\n    public loadedMeshes: Array<AbstractMesh>;\r\n    /**\r\n     * Gets the list of loaded particle systems\r\n     */\r\n    public loadedParticleSystems: Array<IParticleSystem>;\r\n    /**\r\n     * Gets the list of loaded skeletons\r\n     */\r\n    public loadedSkeletons: Array<Skeleton>;\r\n    /**\r\n     * Gets the list of loaded animation groups\r\n     */\r\n    public loadedAnimationGroups: Array<AnimationGroup>;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: MeshAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: MeshAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new MeshAssetTask\r\n     * @param name defines the name of the task\r\n     * @param meshesNames defines the list of mesh's names you want to load\r\n     * @param rootUrl defines the root url to use as a base to load your meshes and associated resources\r\n     * @param sceneFilename defines the filename or File of the scene to load from\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the list of mesh's names you want to load\r\n         */\r\n        public meshesNames: any,\r\n        /**\r\n         * Defines the root url to use as a base to load your meshes and associated resources\r\n         */\r\n        public rootUrl: string,\r\n        /**\r\n         * Defines the filename or File of the scene to load from\r\n         */\r\n        public sceneFilename: string | File,\r\n        /**\r\n         * Defines the extension to use to load the scene (if not defined, \".babylon\" will be used)\r\n         */\r\n        public extension?: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        SceneLoader.ImportMesh(\r\n            this.meshesNames,\r\n            this.rootUrl,\r\n            this.sceneFilename,\r\n            scene,\r\n            (meshes: AbstractMesh[], particleSystems: IParticleSystem[], skeletons: Skeleton[], animationGroups: AnimationGroup[], transformNodes: TransformNode[]) => {\r\n                this.loadedMeshes = meshes;\r\n                this.loadedTransformNodes = transformNodes;\r\n                this.loadedParticleSystems = particleSystems;\r\n                this.loadedSkeletons = skeletons;\r\n                this.loadedAnimationGroups = animationGroups;\r\n                onSuccess();\r\n            },\r\n            null,\r\n            (scene, message, exception) => {\r\n                onError(message, exception);\r\n            },\r\n            this.extension\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load animations\r\n */\r\nexport class AnimationAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Gets the list of loaded animation groups\r\n     */\r\n    public loadedAnimationGroups: Array<AnimationGroup>;\r\n    /**\r\n     * Gets the list of loaded animatables\r\n     */\r\n    public loadedAnimatables: Array<Animatable>;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: AnimationAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: AnimationAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new AnimationAssetTask\r\n     * @param name defines the name of the task\r\n     * @param rootUrl defines the root url to use as a base to load your meshes and associated resources\r\n     * @param filename defines the filename or File of the scene to load from\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the root url to use as a base to load your meshes and associated resources\r\n         */\r\n        public rootUrl: string,\r\n        /**\r\n         * Defines the filename to load from\r\n         */\r\n        public filename: string | File,\r\n        /**\r\n         * Defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n         */\r\n        public targetConverter?: Nullable<(target: any) => any>,\r\n        /**\r\n         * Defines the extension to use to load the scene (if not defined, \".babylon\" will be used)\r\n         */\r\n        public extension?: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        const startingIndexForNewAnimatables = scene.animatables.length;\r\n        const startingIndexForNewAnimationGroups = scene.animationGroups.length;\r\n        this.loadedAnimatables = [];\r\n        this.loadedAnimationGroups = [];\r\n\r\n        SceneLoader.ImportAnimations(\r\n            this.rootUrl,\r\n            this.filename,\r\n            scene,\r\n            false,\r\n            SceneLoaderAnimationGroupLoadingMode.NoSync,\r\n            this.targetConverter,\r\n            () => {\r\n                this.loadedAnimatables = scene.animatables.slice(startingIndexForNewAnimatables);\r\n                this.loadedAnimationGroups = scene.animationGroups.slice(startingIndexForNewAnimationGroups);\r\n\r\n                onSuccess();\r\n            },\r\n            null,\r\n            (scene, message, exception) => {\r\n                onError(message, exception);\r\n            },\r\n            this.extension\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load text content\r\n */\r\nexport class TextFileAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Gets the loaded text string\r\n     */\r\n    public text: string;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: TextFileAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: TextFileAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new TextFileAssetTask object\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the file to load\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the file to load\r\n         */\r\n        public url: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        scene._loadFile(\r\n            this.url,\r\n            (data) => {\r\n                this.text = data as string;\r\n                onSuccess();\r\n            },\r\n            undefined,\r\n            false,\r\n            false,\r\n            (request, exception) => {\r\n                if (request) {\r\n                    onError(request.status + \" \" + request.statusText, exception);\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load binary data\r\n */\r\nexport class BinaryFileAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Gets the loaded data (as an array buffer)\r\n     */\r\n    public data: ArrayBuffer;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: BinaryFileAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: BinaryFileAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new BinaryFileAssetTask object\r\n     * @param name defines the name of the new task\r\n     * @param url defines the location of the file to load\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the file to load\r\n         */\r\n        public url: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        scene._loadFile(\r\n            this.url,\r\n            (data) => {\r\n                this.data = data as ArrayBuffer;\r\n                onSuccess();\r\n            },\r\n            undefined,\r\n            true,\r\n            true,\r\n            (request, exception) => {\r\n                if (request) {\r\n                    onError(request.status + \" \" + request.statusText, exception);\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load images\r\n */\r\nexport class ImageAssetTask extends AbstractAssetTask {\r\n    /**\r\n     * Gets the loaded images\r\n     */\r\n    public image: HTMLImageElement;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: ImageAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: ImageAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new ImageAssetTask\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the image to load\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the image to load\r\n         */\r\n        public url: string\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        const img = new Image();\r\n\r\n        Tools.SetCorsBehavior(this.url, img);\r\n\r\n        img.onload = () => {\r\n            this.image = img;\r\n            onSuccess();\r\n        };\r\n\r\n        img.onerror = (err: string | Event): any => {\r\n            onError(\"Error loading image\", err);\r\n        };\r\n\r\n        img.src = this.url;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the interface used by texture loading tasks\r\n */\r\nexport interface ITextureAssetTask<TEX extends BaseTexture> {\r\n    /**\r\n     * Gets the loaded texture\r\n     */\r\n    texture: TEX;\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load 2D textures\r\n */\r\nexport class TextureAssetTask extends AbstractAssetTask implements ITextureAssetTask<Texture> {\r\n    /**\r\n     * Gets the loaded texture\r\n     */\r\n    public texture: Texture;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: TextureAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: TextureAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new TextureAssetTask object\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the file to load\r\n     * @param noMipmap defines if mipmap should not be generated (default is false)\r\n     * @param invertY defines if texture must be inverted on Y axis (default is true)\r\n     * @param samplingMode defines the sampling mode to use (default is Texture.TRILINEAR_SAMPLINGMODE)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the file to load\r\n         */\r\n        public url: string,\r\n        /**\r\n         * Defines if mipmap should not be generated (default is false)\r\n         */\r\n        public noMipmap?: boolean,\r\n        /**\r\n         * Defines if texture must be inverted on Y axis (default is true)\r\n         */\r\n        public invertY: boolean = true,\r\n        /**\r\n         * Defines the sampling mode to use (default is Texture.TRILINEAR_SAMPLINGMODE)\r\n         */\r\n        public samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        const onload = () => {\r\n            onSuccess();\r\n        };\r\n\r\n        const onerror = (message?: string, exception?: any) => {\r\n            onError(message, exception);\r\n        };\r\n\r\n        this.texture = new Texture(this.url, scene, this.noMipmap, this.invertY, this.samplingMode, onload, onerror);\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load cube textures\r\n */\r\nexport class CubeTextureAssetTask extends AbstractAssetTask implements ITextureAssetTask<CubeTexture> {\r\n    /**\r\n     * Gets the loaded texture\r\n     */\r\n    public texture: CubeTexture;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: CubeTextureAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: CubeTextureAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new CubeTextureAssetTask\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the files to load (You have to specify the folder where the files are + filename with no extension)\r\n     * @param extensions defines the extensions to use to load files ([\"_px\", \"_py\", \"_pz\", \"_nx\", \"_ny\", \"_nz\"] by default)\r\n     * @param noMipmap defines if mipmaps should not be generated (default is false)\r\n     * @param files defines the explicit list of files (undefined by default)\r\n     * @param prefiltered\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the files to load (You have to specify the folder where the files are + filename with no extension)\r\n         */\r\n        public url: string,\r\n        /**\r\n         * Defines the extensions to use to load files ([\"_px\", \"_py\", \"_pz\", \"_nx\", \"_ny\", \"_nz\"] by default)\r\n         */\r\n        public extensions?: string[],\r\n        /**\r\n         * Defines if mipmaps should not be generated (default is false)\r\n         */\r\n        public noMipmap?: boolean,\r\n        /**\r\n         * Defines the explicit list of files (undefined by default)\r\n         */\r\n        public files?: string[],\r\n        /**\r\n         * Defines the prefiltered texture option (default is false)\r\n         */\r\n        public prefiltered?: boolean\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        const onload = () => {\r\n            onSuccess();\r\n        };\r\n\r\n        const onerror = (message?: string, exception?: any) => {\r\n            onError(message, exception);\r\n        };\r\n\r\n        this.texture = new CubeTexture(this.url, scene, this.extensions, this.noMipmap, this.files, onload, onerror, undefined, this.prefiltered);\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load HDR cube textures\r\n */\r\nexport class HDRCubeTextureAssetTask extends AbstractAssetTask implements ITextureAssetTask<HDRCubeTexture> {\r\n    /**\r\n     * Gets the loaded texture\r\n     */\r\n    public texture: HDRCubeTexture;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: HDRCubeTextureAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: HDRCubeTextureAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new HDRCubeTextureAssetTask object\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the file to load\r\n     * @param size defines the desired size (the more it increases the longer the generation will be) If the size is omitted this implies you are using a preprocessed cubemap.\r\n     * @param noMipmap defines if mipmaps should not be generated (default is false)\r\n     * @param generateHarmonics specifies whether you want to extract the polynomial harmonics during the generation process (default is true)\r\n     * @param gammaSpace specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space) (default is false)\r\n     * @param reserved Internal use only\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the file to load\r\n         */\r\n        public url: string,\r\n        /**\r\n         * Defines the desired size (the more it increases the longer the generation will be)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Defines if mipmaps should not be generated (default is false)\r\n         */\r\n        public noMipmap = false,\r\n        /**\r\n         * Specifies whether you want to extract the polynomial harmonics during the generation process (default is true)\r\n         */\r\n        public generateHarmonics = true,\r\n        /**\r\n         * Specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space) (default is false)\r\n         */\r\n        public gammaSpace = false,\r\n        /**\r\n         * Internal Use Only\r\n         */\r\n        public reserved = false\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void) {\r\n        const onload = () => {\r\n            onSuccess();\r\n        };\r\n\r\n        const onerror = (message?: string, exception?: any) => {\r\n            onError(message, exception);\r\n        };\r\n\r\n        this.texture = new HDRCubeTexture(this.url, scene, this.size, this.noMipmap, this.generateHarmonics, this.gammaSpace, this.reserved, onload, onerror);\r\n    }\r\n}\r\n\r\n/**\r\n * Define a task used by AssetsManager to load Equirectangular cube textures\r\n */\r\nexport class EquiRectangularCubeTextureAssetTask extends AbstractAssetTask implements ITextureAssetTask<EquiRectangularCubeTexture> {\r\n    /**\r\n     * Gets the loaded texture\r\n     */\r\n    public texture: EquiRectangularCubeTexture;\r\n\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onSuccess: (task: EquiRectangularCubeTextureAssetTask) => void;\r\n    /**\r\n     * Callback called when the task is successful\r\n     */\r\n    public onError: (task: EquiRectangularCubeTextureAssetTask, message?: string, exception?: any) => void;\r\n\r\n    /**\r\n     * Creates a new EquiRectangularCubeTextureAssetTask object\r\n     * @param name defines the name of the task\r\n     * @param url defines the location of the file to load\r\n     * @param size defines the desired size (the more it increases the longer the generation will be)\r\n     * If the size is omitted this implies you are using a preprocessed cubemap.\r\n     * @param noMipmap defines if mipmaps should not be generated (default is false)\r\n     * @param gammaSpace specifies if the texture will be used in gamma or linear space\r\n     * (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space)\r\n     * (default is true)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the task\r\n         */\r\n        public name: string,\r\n        /**\r\n         * Defines the location of the file to load\r\n         */\r\n        public url: string,\r\n        /**\r\n         * Defines the desired size (the more it increases the longer the generation will be)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Defines if mipmaps should not be generated (default is false)\r\n         */\r\n        public noMipmap: boolean = false,\r\n        /**\r\n         * Specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space,\r\n         * but the standard material would require them in Gamma space) (default is true)\r\n         */\r\n        public gammaSpace: boolean = true\r\n    ) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Execute the current task\r\n     * @param scene defines the scene where you want your assets to be loaded\r\n     * @param onSuccess is a callback called when the task is successfully executed\r\n     * @param onError is a callback called if an error occurs\r\n     */\r\n    public runTask(scene: Scene, onSuccess: () => void, onError: (message?: string, exception?: any) => void): void {\r\n        const onload = () => {\r\n            onSuccess();\r\n        };\r\n\r\n        const onerror = (message?: string, exception?: any) => {\r\n            onError(message, exception);\r\n        };\r\n\r\n        this.texture = new EquiRectangularCubeTexture(this.url, scene, this.size, this.noMipmap, this.gammaSpace, onload, onerror);\r\n    }\r\n}\r\n\r\n/**\r\n * This class can be used to easily import assets into a scene\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/assetManager\r\n */\r\nexport class AssetsManager {\r\n    private _scene: Scene;\r\n    private _isLoading = false;\r\n\r\n    protected _tasks = new Array<AbstractAssetTask>();\r\n    protected _waitingTasksCount = 0;\r\n    protected _totalTasksCount = 0;\r\n\r\n    /**\r\n     * Callback called when all tasks are processed\r\n     */\r\n    public onFinish: (tasks: AbstractAssetTask[]) => void;\r\n\r\n    /**\r\n     * Callback called when a task is successful\r\n     */\r\n    public onTaskSuccess: (task: AbstractAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when a task had an error\r\n     */\r\n    public onTaskError: (task: AbstractAssetTask) => void;\r\n\r\n    /**\r\n     * Callback called when a task is done (whatever the result is)\r\n     */\r\n    public onProgress: (remainingCount: number, totalCount: number, task: AbstractAssetTask) => void;\r\n\r\n    /**\r\n     * Observable called when all tasks are processed\r\n     */\r\n    public onTaskSuccessObservable = new Observable<AbstractAssetTask>();\r\n\r\n    /**\r\n     * Observable called when a task had an error\r\n     */\r\n    public onTaskErrorObservable = new Observable<AbstractAssetTask>();\r\n\r\n    /**\r\n     * Observable called when all tasks were executed\r\n     */\r\n    public onTasksDoneObservable = new Observable<AbstractAssetTask[]>();\r\n\r\n    /**\r\n     * Observable called when a task is done (whatever the result is)\r\n     */\r\n    public onProgressObservable = new Observable<IAssetsProgressEvent>();\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if the AssetsManager should use the default loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public useDefaultLoadingScreen = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if the AssetsManager should automatically hide the loading screen\r\n     * when all assets have been downloaded.\r\n     * If set to false, you need to manually call in hideLoadingUI() once your scene is ready.\r\n     */\r\n    public autoHideLoadingUI = true;\r\n\r\n    /**\r\n     * Creates a new AssetsManager\r\n     * @param scene defines the scene to work on\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Add a ContainerAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param meshesNames defines the name of meshes to load\r\n     * @param rootUrl defines the root url to use to locate files\r\n     * @param sceneFilename defines the filename of the scene file or the File itself\r\n     * @param extension defines the extension to use to load the file\r\n     * @returns a new ContainerAssetTask object\r\n     */\r\n    public addContainerTask(taskName: string, meshesNames: any, rootUrl: string, sceneFilename: string | File, extension?: string): ContainerAssetTask {\r\n        const task = new ContainerAssetTask(taskName, meshesNames, rootUrl, sceneFilename, extension);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a MeshAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param meshesNames defines the name of meshes to load\r\n     * @param rootUrl defines the root url to use to locate files\r\n     * @param sceneFilename defines the filename of the scene file or the File itself\r\n     * @param extension defines the extension to use to load the file\r\n     * @returns a new MeshAssetTask object\r\n     */\r\n    public addMeshTask(taskName: string, meshesNames: any, rootUrl: string, sceneFilename: string | File, extension?: string): MeshAssetTask {\r\n        const task = new MeshAssetTask(taskName, meshesNames, rootUrl, sceneFilename, extension);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a TextFileAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @returns a new TextFileAssetTask object\r\n     */\r\n    public addTextFileTask(taskName: string, url: string): TextFileAssetTask {\r\n        const task = new TextFileAssetTask(taskName, url);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a BinaryFileAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @returns a new BinaryFileAssetTask object\r\n     */\r\n    public addBinaryFileTask(taskName: string, url: string): BinaryFileAssetTask {\r\n        const task = new BinaryFileAssetTask(taskName, url);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a ImageAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @returns a new ImageAssetTask object\r\n     */\r\n    public addImageTask(taskName: string, url: string): ImageAssetTask {\r\n        const task = new ImageAssetTask(taskName, url);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a TextureAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @param noMipmap defines if the texture must not receive mipmaps (false by default)\r\n     * @param invertY defines if you want to invert Y axis of the loaded texture (true by default)\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new TextureAssetTask object\r\n     */\r\n    public addTextureTask(taskName: string, url: string, noMipmap?: boolean, invertY?: boolean, samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE): TextureAssetTask {\r\n        const task = new TextureAssetTask(taskName, url, noMipmap, invertY, samplingMode);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Add a CubeTextureAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @param extensions defines the extension to use to load the cube map (can be null)\r\n     * @param noMipmap defines if the texture must not receive mipmaps (false by default)\r\n     * @param files defines the list of files to load (can be null)\r\n     * @param prefiltered defines the prefiltered texture option (default is false)\r\n     * @returns a new CubeTextureAssetTask object\r\n     */\r\n    public addCubeTextureTask(taskName: string, url: string, extensions?: string[], noMipmap?: boolean, files?: string[], prefiltered?: boolean): CubeTextureAssetTask {\r\n        const task = new CubeTextureAssetTask(taskName, url, extensions, noMipmap, files, prefiltered);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Add a HDRCubeTextureAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @param size defines the size you want for the cubemap (can be null)\r\n     * @param noMipmap defines if the texture must not receive mipmaps (false by default)\r\n     * @param generateHarmonics defines if you want to automatically generate (true by default)\r\n     * @param gammaSpace specifies if the texture will be use in gamma or linear space (the PBR material requires those texture in linear space, but the standard material would require them in Gamma space) (default is false)\r\n     * @param reserved Internal use only\r\n     * @returns a new HDRCubeTextureAssetTask object\r\n     */\r\n    public addHDRCubeTextureTask(\r\n        taskName: string,\r\n        url: string,\r\n        size: number,\r\n        noMipmap = false,\r\n        generateHarmonics = true,\r\n        gammaSpace = false,\r\n        reserved = false\r\n    ): HDRCubeTextureAssetTask {\r\n        const task = new HDRCubeTextureAssetTask(taskName, url, size, noMipmap, generateHarmonics, gammaSpace, reserved);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Add a EquiRectangularCubeTextureAssetTask to the list of active tasks\r\n     * @param taskName defines the name of the new task\r\n     * @param url defines the url of the file to load\r\n     * @param size defines the size you want for the cubemap (can be null)\r\n     * @param noMipmap defines if the texture must not receive mipmaps (false by default)\r\n     * @param gammaSpace Specifies if the texture will be used in gamma or linear space\r\n     * (the PBR material requires those textures in linear space, but the standard material would require them in Gamma space)\r\n     * @returns a new EquiRectangularCubeTextureAssetTask object\r\n     */\r\n    public addEquiRectangularCubeTextureAssetTask(taskName: string, url: string, size: number, noMipmap = false, gammaSpace = true): EquiRectangularCubeTextureAssetTask {\r\n        const task = new EquiRectangularCubeTextureAssetTask(taskName, url, size, noMipmap, gammaSpace);\r\n        this._tasks.push(task);\r\n\r\n        return task;\r\n    }\r\n\r\n    /**\r\n     * Remove a task from the assets manager.\r\n     * @param task the task to remove\r\n     */\r\n    public removeTask(task: AbstractAssetTask) {\r\n        const index = this._tasks.indexOf(task);\r\n\r\n        if (index > -1) {\r\n            this._tasks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private _decreaseWaitingTasksCount(task: AbstractAssetTask): void {\r\n        this._waitingTasksCount--;\r\n\r\n        try {\r\n            if (this.onProgress) {\r\n                this.onProgress(this._waitingTasksCount, this._totalTasksCount, task);\r\n            }\r\n\r\n            this.onProgressObservable.notifyObservers(new AssetsProgressEvent(this._waitingTasksCount, this._totalTasksCount, task));\r\n        } catch (e) {\r\n            Logger.Error(\"Error running progress callbacks.\");\r\n            console.log(e);\r\n        }\r\n\r\n        if (this._waitingTasksCount === 0) {\r\n            try {\r\n                const currentTasks = this._tasks.slice();\r\n\r\n                if (this.onFinish) {\r\n                    // Calling onFinish with immutable array of tasks\r\n                    this.onFinish(currentTasks);\r\n                }\r\n\r\n                // Let's remove successful tasks\r\n                for (const task of currentTasks) {\r\n                    if (task.taskState === AssetTaskState.DONE) {\r\n                        const index = this._tasks.indexOf(task);\r\n\r\n                        if (index > -1) {\r\n                            this._tasks.splice(index, 1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.onTasksDoneObservable.notifyObservers(this._tasks);\r\n            } catch (e) {\r\n                Logger.Error(\"Error running tasks-done callbacks.\");\r\n                console.log(e);\r\n            }\r\n            this._isLoading = false;\r\n            if (this.autoHideLoadingUI) {\r\n                this._scene.getEngine().hideLoadingUI();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _runTask(task: AbstractAssetTask): void {\r\n        const done = () => {\r\n            try {\r\n                if (this.onTaskSuccess) {\r\n                    this.onTaskSuccess(task);\r\n                }\r\n                this.onTaskSuccessObservable.notifyObservers(task);\r\n                this._decreaseWaitingTasksCount(task);\r\n            } catch (e) {\r\n                error(\"Error executing task success callbacks\", e);\r\n            }\r\n        };\r\n\r\n        const error = (message?: string, exception?: any) => {\r\n            task._setErrorObject(message, exception);\r\n\r\n            if (this.onTaskError) {\r\n                this.onTaskError(task);\r\n            } else if (!task.onError) {\r\n                Logger.Error(this._formatTaskErrorMessage(task));\r\n            }\r\n            this.onTaskErrorObservable.notifyObservers(task);\r\n            this._decreaseWaitingTasksCount(task);\r\n        };\r\n\r\n        task.run(this._scene, done, error);\r\n    }\r\n\r\n    private _formatTaskErrorMessage(task: AbstractAssetTask) {\r\n        let errorMessage = \"Unable to complete task \" + task.name;\r\n\r\n        if (task.errorObject.message) {\r\n            errorMessage += `: ${task.errorObject.message}`;\r\n        }\r\n        if (task.errorObject.exception) {\r\n            errorMessage += `: ${task.errorObject.exception}`;\r\n        }\r\n\r\n        return errorMessage;\r\n    }\r\n\r\n    /**\r\n     * Reset the AssetsManager and remove all tasks\r\n     * @returns the current instance of the AssetsManager\r\n     */\r\n    public reset(): AssetsManager {\r\n        this._isLoading = false;\r\n        this._tasks = new Array<AbstractAssetTask>();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start the loading process\r\n     * @returns the current instance of the AssetsManager\r\n     */\r\n    public load(): AssetsManager {\r\n        if (this._isLoading) {\r\n            return this;\r\n        }\r\n        this._isLoading = true;\r\n        this._waitingTasksCount = this._tasks.length;\r\n        this._totalTasksCount = this._tasks.length;\r\n\r\n        if (this._waitingTasksCount === 0) {\r\n            this._isLoading = false;\r\n            if (this.onFinish) {\r\n                this.onFinish(this._tasks);\r\n            }\r\n            this.onTasksDoneObservable.notifyObservers(this._tasks);\r\n            return this;\r\n        }\r\n\r\n        if (this.useDefaultLoadingScreen) {\r\n            this._scene.getEngine().displayLoadingUI();\r\n        }\r\n\r\n        for (let index = 0; index < this._tasks.length; index++) {\r\n            const task = this._tasks[index];\r\n            if (task.taskState === AssetTaskState.INIT) {\r\n                this._runTask(task);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start the loading process as an async operation\r\n     * @returns a promise returning the list of failed tasks\r\n     */\r\n    public loadAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            if (this._isLoading) {\r\n                resolve();\r\n                return;\r\n            }\r\n            this.onTasksDoneObservable.addOnce((remainingTasks) => {\r\n                if (remainingTasks && remainingTasks.length) {\r\n                    reject(remainingTasks);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n\r\n            this.load();\r\n        });\r\n    }\r\n}\r\n"]}