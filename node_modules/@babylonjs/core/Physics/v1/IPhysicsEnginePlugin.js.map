{"version":3,"file":"IPhysicsEnginePlugin.js","sourceRoot":"","sources":["../../../../../dev/core/src/Physics/v1/IPhysicsEnginePlugin.ts"],"names":[],"mappings":"","sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { PhysicsImpostor } from \"./physicsImpostor\";\r\nimport type { PhysicsJoint, IMotorEnabledJoint } from \"./physicsJoint\";\r\nimport type { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\n\r\n/**\r\n * Interface used to describe a physics joint\r\n */\r\nexport interface PhysicsImpostorJoint {\r\n    /** Defines the main impostor to which the joint is linked */\r\n    mainImpostor: PhysicsImpostor;\r\n    /** Defines the impostor that is connected to the main impostor using this joint */\r\n    connectedImpostor: PhysicsImpostor;\r\n    /** Defines the joint itself */\r\n    joint: PhysicsJoint;\r\n}\r\n\r\n/** @internal */\r\nexport interface IPhysicsEnginePlugin {\r\n    /**\r\n     *\r\n     */\r\n    world: any;\r\n    /**\r\n     *\r\n     */\r\n    name: string;\r\n    setGravity(gravity: Vector3): void;\r\n    setTimeStep(timeStep: number): void;\r\n    getTimeStep(): number;\r\n    executeStep(delta: number, impostors: Array<PhysicsImpostor>): void; //not forgetting pre and post events\r\n    getPluginVersion(): number;\r\n    applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): void;\r\n    applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3): void;\r\n    generatePhysicsBody(impostor: PhysicsImpostor): void;\r\n    removePhysicsBody(impostor: PhysicsImpostor): void;\r\n    generateJoint(joint: PhysicsImpostorJoint): void;\r\n    removeJoint(joint: PhysicsImpostorJoint): void;\r\n    isSupported(): boolean;\r\n    setTransformationFromPhysicsBody(impostor: PhysicsImpostor): void;\r\n    setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion): void;\r\n    setLinearVelocity(impostor: PhysicsImpostor, velocity: Nullable<Vector3>): void;\r\n    setAngularVelocity(impostor: PhysicsImpostor, velocity: Nullable<Vector3>): void;\r\n    getLinearVelocity(impostor: PhysicsImpostor): Nullable<Vector3>;\r\n    getAngularVelocity(impostor: PhysicsImpostor): Nullable<Vector3>;\r\n    setBodyMass(impostor: PhysicsImpostor, mass: number): void;\r\n    getBodyMass(impostor: PhysicsImpostor): number;\r\n    getBodyFriction(impostor: PhysicsImpostor): number;\r\n    setBodyFriction(impostor: PhysicsImpostor, friction: number): void;\r\n    getBodyRestitution(impostor: PhysicsImpostor): number;\r\n    setBodyRestitution(impostor: PhysicsImpostor, restitution: number): void;\r\n    getBodyPressure?(impostor: PhysicsImpostor): number;\r\n    setBodyPressure?(impostor: PhysicsImpostor, pressure: number): void;\r\n    getBodyStiffness?(impostor: PhysicsImpostor): number;\r\n    setBodyStiffness?(impostor: PhysicsImpostor, stiffness: number): void;\r\n    getBodyVelocityIterations?(impostor: PhysicsImpostor): number;\r\n    setBodyVelocityIterations?(impostor: PhysicsImpostor, velocityIterations: number): void;\r\n    getBodyPositionIterations?(impostor: PhysicsImpostor): number;\r\n    setBodyPositionIterations?(impostor: PhysicsImpostor, positionIterations: number): void;\r\n    appendAnchor?(impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): void;\r\n    appendHook?(impostor: PhysicsImpostor, otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): void;\r\n    sleepBody(impostor: PhysicsImpostor): void;\r\n    wakeUpBody(impostor: PhysicsImpostor): void;\r\n    raycast(from: Vector3, to: Vector3): PhysicsRaycastResult;\r\n    raycastToRef(from: Vector3, to: Vector3, result: PhysicsRaycastResult): void;\r\n\r\n    //Joint Update\r\n    updateDistanceJoint(joint: PhysicsJoint, maxDistance: number, minDistance?: number): void;\r\n    setMotor(joint: IMotorEnabledJoint, speed: number, maxForce?: number, motorIndex?: number): void;\r\n    setLimit(joint: IMotorEnabledJoint, upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n    getRadius(impostor: PhysicsImpostor): number;\r\n    getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): void;\r\n    syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor): void;\r\n    dispose(): void;\r\n}\r\n"]}