{"version":3,"file":"keyboardEvents.js","sourceRoot":"","sources":["../../../../dev/core/src/Events/keyboardEvents.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,OAAO,kBAAkB;;AAC3B;;GAEG;AACoB,0BAAO,GAAG,IAAI,CAAC;AACtC;;GAEG;AACoB,wBAAK,GAAG,IAAI,CAAC;AAGxC;;GAEG;AACH,MAAM,OAAO,YAAY;IACrB;;;;;OAKG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAqB;QAJrB,SAAI,GAAJ,IAAI,CAAQ;QAIZ,UAAK,GAAL,KAAK,CAAgB;IAC7B,CAAC;CACP;AAED;;;GAGG;AACH,MAAM,OAAO,eAAgB,SAAQ,YAAY;IAM7C;;;OAGG;IACH,IAAW,uBAAuB;QAC9B,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACzC,CAAC;IACD,IAAW,uBAAuB,CAAC,KAAK;QACpC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IACH;IACI;;OAEG;IACI,IAAY;IACnB;;OAEG;IACI,KAAqB;QAE5B,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QANZ,SAAI,GAAJ,IAAI,CAAQ;QAIZ,UAAK,GAAL,KAAK,CAAgB;QAG5B,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;IAC1C,CAAC;CACJ","sourcesContent":["import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n"]}