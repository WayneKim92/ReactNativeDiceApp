{"version":3,"file":"math.polar.js","sourceRoot":"","sources":["../../../../dev/core/src/Maths/math.polar.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Vector2, Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class used to store (r, theta) vector representation\r\n */\r\nexport class Polar {\r\n    public radius: number;\r\n    public theta: number;\r\n\r\n    /**\r\n     * Creates a new Polar object\r\n     * @param radius the radius of the vector\r\n     * @param theta the angle of the vector\r\n     */\r\n    constructor(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Polar\"\r\n     */\r\n    public getClassName() {\r\n        return \"Polar\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to a string\r\n     * @returns the current polar as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current polar to an array\r\n     * @reutrns the current polar as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar and stores the result\r\n     * @param polar the polar to add\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius + polar.radius;\r\n        ref.theta = this.theta + polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Polar and the given Polar\r\n     * @param polar the polar to add\r\n     * @returns the sum polar\r\n     */\r\n    public add(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.addToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given polar to the current polar\r\n     * @param polar the polar to add\r\n     * @returns the current polar\r\n     */\r\n    public addInPlace(polar: Polar) {\r\n        this.addToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current polar\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @returns the current polar\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar and stores the result\r\n     * @param polar the polar to subtract\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius - polar.radius;\r\n        ref.theta = this.theta - polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the difference polar\r\n     */\r\n    public subtract(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Polar from the current Polar\r\n     * @param polar the polar to subtract\r\n     * @returns the current polar\r\n     */\r\n    public subtractInPlace(polar: Polar) {\r\n        this.subtractToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, ref: Polar) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current polar\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @returns the difference polar\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar and stores the result\r\n     * @param polar the polar to multiply\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius * polar.radius;\r\n        ref.theta = this.theta * polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the product polar\r\n     */\r\n    public multiply(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.multiplyToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Polar with the current Polar\r\n     * @param polar the polar to multiply\r\n     * @returns the current polar\r\n     */\r\n    public multiplyInPlace(polar: Polar) {\r\n        this.multiplyToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar and stores the result\r\n     * @param polar the polar to divide\r\n     * @param ref the polar to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(polar: Polar, ref: Polar) {\r\n        ref.radius = this.radius / polar.radius;\r\n        ref.theta = this.theta / polar.theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the quotient polar\r\n     */\r\n    public divide(polar: Polar) {\r\n        const ref = new Polar(0, 0);\r\n        this.divideToRef(polar, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Polar by the given Polar\r\n     * @param polar the polar to divide\r\n     * @returns the current polar\r\n     */\r\n    public divideInPlace(polar: Polar) {\r\n        this.divideToRef(polar, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current polar\r\n     * @returns a clone of the current polar\r\n     */\r\n    public clone() {\r\n        return new Polar(this.radius, this.theta);\r\n    }\r\n\r\n    /**\r\n     * Copies the source polar into the current polar\r\n     * @param source the polar to copy from\r\n     * @returns the current polar\r\n     */\r\n    public copyFrom(source: Polar) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current polar\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @returns the current polar\r\n     */\r\n    public copyFromFloats(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Polar) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar and returns a new polar with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled polar\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Polar(0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current polar\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current polar\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @returns the current polar\r\n     */\r\n    public set(radius: number, theta: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current polar\r\n     * @param value the new values\r\n     * @returns the current polar\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public toVector2ToRef(ref: Vector2): Vector2 {\r\n        const x = this.radius * Math.cos(this.theta);\r\n        const y = this.radius * Math.sin(this.theta);\r\n        ref.set(x, y);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets the rectangular coordinates of the current Polar\r\n     * @returns the rectangular coordinates\r\n     */\r\n    public toVector2(): Vector2 {\r\n        const ref = new Vector2(0, 0);\r\n        return this.toVector2ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @param ref the reference to assign the result\r\n     * @returns the updated reference\r\n     */\r\n    public static FromVector2ToRef(v: Vector2, ref: Polar): Polar {\r\n        const theta = Math.sign(v.y) * Math.acos(v.x / v.length());\r\n        ref.radius = v.length();\r\n        ref.theta = theta;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Converts a given Vector2 to its polar coordinates\r\n     * @param v the Vector2 to convert\r\n     * @returns a Polar\r\n     */\r\n    public static FromVector2(v: Vector2): Polar {\r\n        const polar = new Polar(0, 0);\r\n        Polar.FromVector2ToRef(v, polar);\r\n        return polar;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a polar\r\n     * @param array the array to convert\r\n     * @returns the converted polar\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Polar(array[0], array[1]);\r\n    }\r\n}\r\n\r\n/**\r\n * Class used for (radius, theta, phi) vector representation.\r\n */\r\nexport class Spherical {\r\n    public radius: number;\r\n    public theta: number;\r\n    public phi: number;\r\n\r\n    /**\r\n     * @param radius spherical radius\r\n     * @param theta angle from positive y axis to radial line from 0 to PI (vertical)\r\n     * @param phi angle from positive x axis measured anticlockwise from -PI to PI (horizontal)\r\n     */\r\n    constructor(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Spherical\"\r\n     */\r\n    public getClassName() {\r\n        return \"Spherical\";\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to a string\r\n     * @returns the current spherical as a string\r\n     */\r\n    public toString() {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    /**\r\n     * Converts the current spherical to an array\r\n     * @reutrns the current spherical as an array\r\n     */\r\n    public asArray() {\r\n        return [this.radius, this.theta, this.phi];\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical and stores the result\r\n     * @param spherical the spherical to add\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public addToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius + spherical.radius;\r\n        ref.theta = this.theta + spherical.theta;\r\n        ref.phi = this.phi + spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the current Spherical and the given Spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the sum spherical\r\n     */\r\n    public add(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.addToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Adds the given spherical to the current spherical\r\n     * @param spherical the spherical to add\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlace(spherical: Spherical) {\r\n        this.addToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the provided values to the current spherical\r\n     * @param radius the amount to add to the radius\r\n     * @param theta the amount to add to the theta\r\n     * @param phi the amount to add to the phi\r\n     * @returns the current spherical\r\n     */\r\n    public addInPlaceFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius += radius;\r\n        this.theta += theta;\r\n        this.phi += phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical and stores the result\r\n     * @param spherical the spherical to subtract\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius - spherical.radius;\r\n        ref.theta = this.theta - spherical.theta;\r\n        ref.phi = this.phi - spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the difference spherical\r\n     */\r\n    public subtract(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given Spherical from the current Spherical\r\n     * @param spherical the spherical to subtract\r\n     * @returns the current spherical\r\n     */\r\n    public subtractInPlace(spherical: Spherical) {\r\n        this.subtractToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public subtractFromFloatsToRef(radius: number, theta: number, phi: number, ref: Spherical) {\r\n        ref.radius = this.radius - radius;\r\n        ref.theta = this.theta - theta;\r\n        ref.phi = this.phi - phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given floats from the current spherical\r\n     * @param radius the amount to subtract from the radius\r\n     * @param theta the amount to subtract from the theta\r\n     * @param phi the amount to subtract from the phi\r\n     * @returns the difference spherical\r\n     */\r\n    public subtractFromFloats(radius: number, theta: number, phi: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.subtractFromFloatsToRef(radius, theta, phi, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical and stores the result\r\n     * @param spherical the spherical to multiply\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public multiplyToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius * spherical.radius;\r\n        ref.theta = this.theta * spherical.theta;\r\n        ref.phi = this.phi * spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the product spherical\r\n     */\r\n    public multiply(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.multiplyToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the given Spherical with the current Spherical\r\n     * @param spherical the spherical to multiply\r\n     * @returns the current spherical\r\n     */\r\n    public multiplyInPlace(spherical: Spherical) {\r\n        this.multiplyToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical and stores the result\r\n     * @param spherical the spherical to divide\r\n     * @param ref the spherical to store the result in\r\n     * @returns the updated ref\r\n     */\r\n    public divideToRef(spherical: Spherical, ref: Spherical) {\r\n        ref.radius = this.radius / spherical.radius;\r\n        ref.theta = this.theta / spherical.theta;\r\n        ref.phi = this.phi / spherical.phi;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the quotient spherical\r\n     */\r\n    public divide(spherical: Spherical) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.divideToRef(spherical, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Divides the current Spherical by the given Spherical\r\n     * @param spherical the spherical to divide\r\n     * @returns the current spherical\r\n     */\r\n    public divideInPlace(spherical: Spherical) {\r\n        this.divideToRef(spherical, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the current spherical\r\n     * @returns a clone of the current spherical\r\n     */\r\n    public clone() {\r\n        return new Spherical(this.radius, this.theta, this.phi);\r\n    }\r\n\r\n    /**\r\n     * Copies the source spherical into the current spherical\r\n     * @param source the spherical to copy from\r\n     * @returns the current spherical\r\n     */\r\n    public copyFrom(source: Spherical) {\r\n        this.radius = source.radius;\r\n        this.theta = source.theta;\r\n        this.phi = source.phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given values into the current spherical\r\n     * @param radius the radius to use\r\n     * @param theta the theta to use\r\n     * @param phi the phi to use\r\n     * @returns the current spherical\r\n     */\r\n    public copyFromFloats(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and stores the result\r\n     * @param scale defines the multiplication factor\r\n     * @param ref where to store the result\r\n     * @returns the updated ref\r\n     */\r\n    public scaleToRef(scale: number, ref: Spherical) {\r\n        ref.radius = this.radius * scale;\r\n        ref.theta = this.theta * scale;\r\n        ref.phi = this.phi * scale;\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical and returns a new spherical with the scaled coordinates\r\n     * @param scale defines the multiplication factor\r\n     * @returns the scaled spherical\r\n     */\r\n    public scale(scale: number) {\r\n        const ref = new Spherical(0, 0, 0);\r\n        this.scaleToRef(scale, ref);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Scales the current spherical\r\n     * @param scale defines the multiplication factor\r\n     * @returns the current spherical\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.scaleToRef(scale, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param radius the new radius\r\n     * @param theta the new theta\r\n     * @param phi the new phi\r\n     * @returns the current spherical\r\n     */\r\n    public set(radius: number, theta: number, phi: number) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.phi = phi;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the values of the current spherical\r\n     * @param value the new values\r\n     * @returns the current spherical\r\n     */\r\n    public setAll(value: number) {\r\n        this.set(value, value, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Assigns the rectangular coordinates of the current Spherical to a Vector3\r\n     * @param ref the Vector3 to update\r\n     * @returns the updated Vector3\r\n     */\r\n    public toVector3ToRef(ref: DeepImmutable<Vector3>): Vector3 {\r\n        const x = this.radius * Math.sin(this.theta) * Math.cos(this.phi);\r\n        const y = this.radius * Math.cos(this.theta);\r\n        const z = this.radius * Math.sin(this.theta) * Math.sin(this.phi);\r\n        ref.set(x, y, z);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Vector3 from the current spherical coordinates\r\n     * @returns the (x, y,z) form of the current Spherical\r\n     */\r\n    public toVector3(): Vector3 {\r\n        const ref = new Vector3(0, 0, 0);\r\n        return this.toVector3ToRef(ref);\r\n    }\r\n\r\n    /**\r\n     * Assigns the spherical coordinates from a Vector3\r\n     * @param vector the vector to convert\r\n     * @param ref the Spherical to update\r\n     * @returns the updated ref\r\n     */\r\n    public static FromVector3ToRef(vector: DeepImmutable<Vector3>, ref: Spherical): Spherical {\r\n        ref.radius = vector.length();\r\n        ref.theta = Math.acos(vector.y / ref.radius);\r\n        ref.phi = Math.atan2(vector.z, vector.x);\r\n        return ref;\r\n    }\r\n\r\n    /**\r\n     * Gets a Spherical from a Vector3\r\n     * @param vector defines the vector in (x, y, z) coordinate space\r\n     * @returns a new Spherical\r\n     */\r\n    public static FromVector3(vector: DeepImmutable<Vector3>): Spherical {\r\n        const spherical = new Spherical(0, 0, 0);\r\n        Spherical.FromVector3ToRef(vector, spherical);\r\n        return spherical;\r\n    }\r\n\r\n    /**\r\n     * Converts an array of floats to a spherical\r\n     * @param array the array to convert\r\n     * @returns the converted spherical\r\n     */\r\n    public static FromArray(array: number[]) {\r\n        return new Spherical(array[0], array[1], array[2]);\r\n    }\r\n}\r\n"]}