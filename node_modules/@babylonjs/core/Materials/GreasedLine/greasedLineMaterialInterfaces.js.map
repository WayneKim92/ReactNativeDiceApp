{"version":3,"file":"greasedLineMaterialInterfaces.js","sourceRoot":"","sources":["../../../../../dev/core/src/Materials/GreasedLine/greasedLineMaterialInterfaces.ts"],"names":[],"mappings":"AAiHA;;;GAGG;AACH,MAAM,CAAN,IAAY,2BAaX;AAbD,WAAY,2BAA2B;IACnC;;OAEG;IACH,iHAA0B,CAAA;IAC1B;;OAEG;IACH,uGAAqB,CAAA;IACrB;;OAEG;IACH,6GAAwB,CAAA;AAC5B,CAAC,EAbW,2BAA2B,KAA3B,2BAA2B,QAatC;AAED;;;GAGG;AACH,MAAM,CAAN,IAAY,wBAaX;AAbD,WAAY,wBAAwB;IAChC;;OAEG;IACH,2FAAkB,CAAA;IAClB;;OAEG;IACH,2FAAkB,CAAA;IAClB;;OAEG;IACH,qGAAuB,CAAA;AAC3B,CAAC,EAbW,wBAAwB,KAAxB,wBAAwB,QAanC;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,oCASX;AATD,WAAY,oCAAoC;IAC5C;;OAEG;IACH,qJAAmC,CAAA;IACnC;;OAEG;IACH,+IAAgC,CAAA;AACpC,CAAC,EATW,oCAAoC,KAApC,oCAAoC,QAS/C","sourcesContent":["import type { RawTexture } from \"../Textures/rawTexture\";\r\nimport type { Vector2 } from \"../../Maths/math.vector\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Color3 } from \"../../Maths/math.color\";\r\n/**\r\n * Interface which defines the available methods for a GreasedLineMaterial\r\n */\r\nexport interface IGreasedLineMaterial {\r\n    /**\r\n     * Normalized value of how much of the line will be visible\r\n     * 0 - 0% of the line will be visible\r\n     * 1 - 100% of the line will be visible\r\n     */\r\n    visibility: number;\r\n\r\n    /**\r\n     * Line base width. At each point the line width is calculated by widths[pointIndex] * width\r\n     */\r\n    width: number;\r\n\r\n    /**\r\n     * Turns on/off dash mode\r\n     */\r\n    useDash: boolean;\r\n\r\n    /**\r\n     * @see GreasedLinePluginMaterial.setDashCount\r\n     * Number of dashes in the line.\r\n     * Defaults to 1.\r\n     */\r\n    dashCount: number;\r\n\r\n    /**\r\n     * Dash offset\r\n     */\r\n    dashOffset: number;\r\n\r\n    /**\r\n     * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\r\n     */\r\n    dashRatio: number;\r\n\r\n    /**\r\n     * Whether to use the colors option to colorize the line\r\n     */\r\n    useColors: boolean;\r\n\r\n    /**\r\n     * The mixing mode of the color paramater. Default value is GreasedLineMeshColorMode.SET.\r\n     * MATERIAL_TYPE_SIMPLE mixes the color and colors of the greased line material.\r\n     * MATERIAL_TYPE_STANDARD and MATERIAL_TYPE_PBR mixes the color from the base material with the color and/or colors of the greased line material.\r\n     * @see GreasedLineMeshColorMode\r\n     */\r\n    colorMode: GreasedLineMeshColorMode;\r\n\r\n    /**\r\n     * Colors of the line segments.\r\n     * Defaults to empty.\r\n     */\r\n    colors: Nullable<Color3[]>;\r\n\r\n    /**\r\n     * If false then width units = scene units. If true then line will width be reduced.\r\n     * Defaults to false.\r\n     */\r\n    sizeAttenuation: boolean;\r\n\r\n    /**\r\n     * Color of the line. Applies to all line segments.\r\n     * Defaults to White.\r\n     */\r\n    color: Nullable<Color3>;\r\n\r\n    /**\r\n     * The method used to distribute the colors along the line.\r\n     * You can use segment distribution when each segment will use on color from the color table.\r\n     * Or you can use line distribution when the colors are distributed evenly along the line ignoring the segments.\r\n     */\r\n    colorsDistributionType: GreasedLineMeshColorDistributionType;\r\n\r\n    /**\r\n     * Defaults to engine.getRenderWidth() and engine.getRenderHeight()\r\n     * Rendering resolution\r\n     */\r\n    resolution: Vector2;\r\n\r\n    /**\r\n     * You can provide a colorsTexture to use instead of one generated from the 'colors' option\r\n     */\r\n    colorsTexture: Nullable<RawTexture>;\r\n\r\n    /**\r\n     * Allows to change the color without marking the material dirty.\r\n     * MATERIAL_TYPE_STANDARD and MATERIAL_TYPE_PBR material's shaders will get recompiled if there was no color set and you set a color or when there was a color set and you set it to null.\r\n     * @param value the color\r\n     * @param doNotMarkDirty the flag\r\n     */\r\n    setColor(value: Nullable<Color3>, doNotMarkDirty?: boolean): void;\r\n\r\n    /**\r\n     *\r\n     * @param colors colors array\r\n     * @param lazy if true the colors texture will not be updated\r\n     * @param forceNewTexture forces to create a new colors texture\r\n     */\r\n    setColors(colors: Nullable<Color3[]>, lazy: boolean, forceNewTexture?: boolean): void;\r\n\r\n    /**\r\n     * Creates and sets the colors texture from the colors array which was created in lazy mode\r\n     */\r\n    updateLazy(): void;\r\n}\r\n\r\n/**\r\n * Material types for GreasedLine\r\n * {@link https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line#materialtype}\r\n */\r\nexport enum GreasedLineMeshMaterialType {\r\n    /**\r\n     * StandardMaterial\r\n     */\r\n    MATERIAL_TYPE_STANDARD = 0,\r\n    /**\r\n     * PBR Material\r\n     */\r\n    MATERIAL_TYPE_PBR = 1,\r\n    /**\r\n     * Simple and fast shader material not supporting lightning nor textures\r\n     */\r\n    MATERIAL_TYPE_SIMPLE = 2,\r\n}\r\n\r\n/**\r\n * Color blending mode of the @see GreasedLineMaterial and the base material\r\n * {@link https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line#colormode}\r\n */\r\nexport enum GreasedLineMeshColorMode {\r\n    /**\r\n     * Color blending mode SET\r\n     */\r\n    COLOR_MODE_SET = 0,\r\n    /**\r\n     * Color blending mode ADD\r\n     */\r\n    COLOR_MODE_ADD = 1,\r\n    /**\r\n     * Color blending mode ADD\r\n     */\r\n    COLOR_MODE_MULTIPLY = 2,\r\n}\r\n\r\n/**\r\n * Color distribution type of the @see colors.\r\n * {@link https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param/greased_line#colordistributiontype}\r\n *\r\n */\r\nexport enum GreasedLineMeshColorDistributionType {\r\n    /**\r\n     * Colors distributed between segments of the line\r\n     */\r\n    COLOR_DISTRIBUTION_TYPE_SEGMENT = 0,\r\n    /**\r\n     * Colors distributed along the line ingoring the segments\r\n     */\r\n    COLOR_DISTRIBUTION_TYPE_LINE = 1,\r\n}\r\n\r\n/**\r\n * Options for GreasedLineMaterial\r\n */\r\nexport interface GreasedLineMaterialOptions {\r\n    /**\r\n     * Line width. If sizeAttenuation os false scene units will be used for width.\r\n     * Defaults to 0.1 if @see sizeAttenuation is false, or to 1 if it's true.\r\n     */\r\n    width?: number;\r\n    /**\r\n     * If false then width units = scene units. If true then line will width be reduced.\r\n     * Defaults to false.\r\n     */\r\n    sizeAttenuation?: boolean;\r\n    /**\r\n     * Type of the material to use to render the line.\r\n     * Defaults to StandardMaterial.\r\n     */\r\n    materialType?: GreasedLineMeshMaterialType;\r\n    /**\r\n     * Color of the line. Applies to all line segments.\r\n     * Defaults to White.\r\n     */\r\n    color?: Color3;\r\n    /**\r\n     * Color mode of the line. Applies to all line segments.\r\n     * The pixel color from the material shader will be modified with the value of @see color using the colorMode.\r\n     * Defaults to @see GreasedLineMeshColorMode.SET\r\n     */\r\n    colorMode?: GreasedLineMeshColorMode;\r\n    /**\r\n     * Colors of the line segments.\r\n     * Defaults to empty.\r\n     */\r\n    colors?: Color3[];\r\n    /**\r\n     * If true, @see colors are used, otherwise they're ignored.\r\n     * Defaults to false.\r\n     */\r\n    useColors?: boolean;\r\n    /**\r\n     * Sampling type of the colors texture\r\n     * Defaults to NEAREST_NEAREST.\r\n     */\r\n    colorsSampling?: number;\r\n    /**\r\n     * The method used to distribute the colors along the line.\r\n     * You can use segment distribution when each segment will use on color from the color table.\r\n     * Or you can use line distribution when the colors are distributed evenly along the line ignoring the segments.\r\n     */\r\n    colorDistributionType?: GreasedLineMeshColorDistributionType;\r\n    /**\r\n     * If true, dashing is used.\r\n     * Defaults to false.\r\n     */\r\n    useDash?: boolean;\r\n    /**\r\n     * @see GreasedLinePluginMaterial.setDashCount\r\n     * Number of dashes in the line.\r\n     * Defaults to 1.\r\n     */\r\n    dashCount?: number;\r\n    /**\r\n     * Offset of the dashes along the line. 0 to 1.\r\n     * Defaults to 0.\r\n     * @see GreasedLinePluginMaterial.setDashOffset\r\n     */\r\n    dashOffset?: number;\r\n    /**\r\n     * Length of the dash. 0 to 1. 0.5 means half empty, half drawn.\r\n     * Defaults to 0.5.\r\n     * @see GreasedLinePluginMaterial.setDashRatio\r\n     */\r\n    dashRatio?: number;\r\n    /**\r\n     * Sets the line length visibility.\r\n     * 0 - 0% of the line will be visible.\r\n     * 1 - 100% of the line will be visible.\r\n     * @see GreasedLinePluginMaterial.setVisibility\r\n     */\r\n    visibility?: number;\r\n    /**\r\n     * Defaults to engine.getRenderWidth() and engine.getRenderHeight()\r\n     * Rendering resolution\r\n     */\r\n    resolution?: Vector2;\r\n    /**\r\n     * Whether to use camera facing for the line.\r\n     * Defaults to true.\r\n     */\r\n    cameraFacing?: boolean;\r\n    /**\r\n     * You can provide a colorsTexture to use instead of one generated from the 'colors' option\r\n     */\r\n    colorsTexture?: RawTexture;\r\n}\r\n"]}