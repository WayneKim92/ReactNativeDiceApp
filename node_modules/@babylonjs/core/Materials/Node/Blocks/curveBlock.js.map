{"version":3,"file":"curveBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/curveBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Types of curves supported by the Curve block\r\n */\r\nexport enum CurveBlockTypes {\r\n    /** EaseInSine */\r\n    EaseInSine,\r\n    /** EaseOutSine */\r\n    EaseOutSine,\r\n    /** EaseInOutSine */\r\n    EaseInOutSine,\r\n    /** EaseInQuad */\r\n    EaseInQuad,\r\n    /** EaseOutQuad */\r\n    EaseOutQuad,\r\n    /** EaseInOutQuad */\r\n    EaseInOutQuad,\r\n    /** EaseInCubic */\r\n    EaseInCubic,\r\n    /** EaseOutCubic */\r\n    EaseOutCubic,\r\n    /** EaseInOutCubic */\r\n    EaseInOutCubic,\r\n    /** EaseInQuart */\r\n    EaseInQuart,\r\n    /** EaseOutQuart */\r\n    EaseOutQuart,\r\n    /** EaseInOutQuart */\r\n    EaseInOutQuart,\r\n    /** EaseInQuint */\r\n    EaseInQuint,\r\n    /** EaseOutQuint */\r\n    EaseOutQuint,\r\n    /** EaseInOutQuint */\r\n    EaseInOutQuint,\r\n    /** EaseInExpo */\r\n    EaseInExpo,\r\n    /** EaseOutExpo */\r\n    EaseOutExpo,\r\n    /** EaseInOutExpo */\r\n    EaseInOutExpo,\r\n    /** EaseInCirc */\r\n    EaseInCirc,\r\n    /** EaseOutCirc */\r\n    EaseOutCirc,\r\n    /** EaseInOutCirc */\r\n    EaseInOutCirc,\r\n    /** EaseInBack */\r\n    EaseInBack,\r\n    /** EaseOutBack */\r\n    EaseOutBack,\r\n    /** EaseInOutBack */\r\n    EaseInOutBack,\r\n    /** EaseInElastic */\r\n    EaseInElastic,\r\n    /** EaseOutElastic */\r\n    EaseOutElastic,\r\n    /** EaseInOutElastic */\r\n    EaseInOutElastic,\r\n}\r\n\r\n/**\r\n * Block used to apply curve operation\r\n */\r\nexport class CurveBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the type of the curve applied by the block\r\n     */\r\n    public type = CurveBlockTypes.EaseInOutSine;\r\n\r\n    /**\r\n     * Creates a new CurveBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Object);\r\n        this._inputs[0].excludedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Int);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CurveBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    private _duplicateEntry(entry: string, component: string) {\r\n        return `ret.${component} = ${entry.replace(/VAL/g, \"v.\" + component)}`;\r\n    }\r\n\r\n    private _duplicateEntryDirect(entry: string) {\r\n        return `return ${entry.replace(/VAL/g, \"v\")}`;\r\n    }\r\n\r\n    private _duplicateVector(entry: string, inputType: string) {\r\n        if (inputType === \"float\") {\r\n            return this._duplicateEntryDirect(entry);\r\n        }\r\n\r\n        const size = parseInt(inputType.replace(\"vec\", \"\"));\r\n        let code = `\r\n            vec${size} ret = vec${size}(0.0);\r\n        `;\r\n\r\n        for (let i = 1; i <= size; i++) {\r\n            code += this._duplicateEntry(entry, i === 1 ? \"x\" : i === 2 ? \"y\" : i === 3 ? \"z\" : \"w\") + \";\\n\";\r\n        }\r\n\r\n        code += \"return ret;\\n\";\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        let registeredFunction = \"\";\r\n        let registeredFunctionName = \"\";\r\n\r\n        let inputType = \"\";\r\n\r\n        switch (this.input.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                inputType = \"float\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                inputType = \"vec2\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                inputType = \"vec3\";\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                inputType = \"vec4\";\r\n                break;\r\n        }\r\n\r\n        registeredFunctionName = CurveBlockTypes[this.type] + \"_\" + inputType;\r\n\r\n        switch (this.type) {\r\n            case CurveBlockTypes.EaseInSine:\r\n                registeredFunction = `return 1.0 - cos((v * 3.1415) / 2.0)`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutSine:\r\n                registeredFunction = `return sin((v * 3.1415) / 2.0)`;\r\n                break;\r\n            case CurveBlockTypes.EaseInOutSine:\r\n                registeredFunction = `return -(cos(v * 3.1415) - 1.0) / 2.0`;\r\n                break;\r\n            case CurveBlockTypes.EaseInQuad:\r\n                registeredFunction = `return v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuad:\r\n                registeredFunction = `return (1.0 - v) * (1.0 - v)`;\r\n                break;\r\n            case CurveBlockTypes.EaseInOutQuad: {\r\n                const entry = \"VAL < 0.5 ? 2.0 * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 2.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInCubic:\r\n                registeredFunction = `return v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutCubic: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 3.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutCubic: {\r\n                const entry = \"VAL < 0.5 ? 4.0 * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 3.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInQuart:\r\n                registeredFunction = `return v * v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuart: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 4.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutQuart: {\r\n                const entry = \"VAL < 0.5 ? 8.0 * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 4.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInQuint:\r\n                registeredFunction = `return v * v * v * v * v`;\r\n                break;\r\n            case CurveBlockTypes.EaseOutQuint: {\r\n                const entry = \"1.0 - pow(1.0 - VAL, 5.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutQuint: {\r\n                const entry = \"VAL < 0.5 ? 16.0 * VAL * VAL * VAL * VAL * VAL : 1.0 - pow(-2.0 * VAL + 2.0, 5.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInExpo: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : pow(2.0, 10.0 * VAL - 10.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutExpo: {\r\n                const entry = \"VAL == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * VAL)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutExpo: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? pow(2.0, 20.0 * VAL - 10.0) / 2.0 : (2.0 - pow(2.0, -20.0 * VAL + 10.0)) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInCirc: {\r\n                const entry = \"1.0 - sqrt(1.0 - pow(VAL, 2.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutCirc: {\r\n                const entry = \"sqrt(1.0 - pow(VAL - 1.0, 2.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutCirc: {\r\n                const entry = \"VAL < 0.5 ? (1.0 - sqrt(1.0 - pow(2.0 * VAL, 2.0))) / 2.0 : (sqrt(1.0 - pow(-2.0 * VAL + 2.0, 2.0)) + 1.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInBack: {\r\n                registeredFunction = \"return 2.70158 * v * v * v - 1.70158 * v * v\";\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutBack: {\r\n                const entry = \"2.70158 * pow(VAL - 1.0, 3.0) + 1.70158 * pow(VAL - 1.0, 2.0)\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutBack: {\r\n                const entry =\r\n                    \"VAL < 0.5 ? (pow(2.0 * VAL, 2.0) * ((3.5949095) * 2.0 * VAL - 2.5949095)) / 2.0 : (pow(2.0 * VAL - 2.0, 2.0) * (3.5949095 * (VAL * 2.0 - 2.0) + 3.5949095) + 2.0) / 2.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInElastic: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : -pow(2.0, 10.0 * VAL - 10.0) * sin((VAL * 10.0 - 10.75) * ((2.0 * 3.1415) / 3.0))\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseOutElastic: {\r\n                const entry = \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : pow(2.0, -10.0 * VAL) * sin((VAL * 10.0 - 0.75) * ((2.0 * 3.1415) / 3.0)) + 1.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n            case CurveBlockTypes.EaseInOutElastic: {\r\n                const entry =\r\n                    \"VAL == 0.0 ? 0.0 : VAL == 1.0 ? 1.0 : VAL < 0.5 ? -(pow(2.0, 20.0 * VAL - 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 : (pow(2.0, -20.0 * VAL + 10.0) * sin((20.0 * VAL - 11.125) * ((2.0 * 3.1415) / 4.5))) / 2.0 + 1.0\";\r\n                registeredFunction = this._duplicateVector(entry, inputType);\r\n                break;\r\n            }\r\n        }\r\n\r\n        state._emitFunction(registeredFunctionName, `${inputType} ${registeredFunctionName}(${inputType} v) {${registeredFunction};}\\n`, \"\");\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${registeredFunctionName}(${this.input.associatedVariableName});\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.curveType = this.type;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.type = serializationObject.curveType;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.type = BABYLON.CurveBlockTypes.${CurveBlockTypes[this.type]};\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CurveBlock\", CurveBlock);\r\n"]}