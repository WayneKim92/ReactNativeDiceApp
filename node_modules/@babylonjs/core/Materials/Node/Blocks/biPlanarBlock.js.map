{"version":3,"file":"biPlanarBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/biPlanarBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { TriPlanarBlock } from \"./triPlanarBlock\";\r\n\r\n/**\r\n * Block used to read a texture with triplanar mapping (see https://iquilezles.org/articles/biplanar/)\r\n */\r\nexport class BiPlanarBlock extends TriPlanarBlock {\r\n    /**\r\n     * Create a new BiPlanarBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BiPlanarBlock\";\r\n    }\r\n\r\n    protected _generateTextureLookup(state: NodeMaterialBuildState): void {\r\n        const samplerName = this.samplerName;\r\n        const samplerYName = this.samplerYName ?? this.samplerName;\r\n\r\n        const sharpness = this.sharpness.isConnected ? this.sharpness.associatedVariableName : \"1.0\";\r\n\r\n        const dpdx = state._getFreeVariableName(\"dpdx\");\r\n        const dpdy = state._getFreeVariableName(\"dpdy\");\r\n        const n = state._getFreeVariableName(\"n\");\r\n        const ma = state._getFreeVariableName(\"ma\");\r\n        const mi = state._getFreeVariableName(\"mi\");\r\n        const me = state._getFreeVariableName(\"me\");\r\n        const x = state._getFreeVariableName(\"x\");\r\n        const y = state._getFreeVariableName(\"y\");\r\n        const w = state._getFreeVariableName(\"y\");\r\n\r\n        state.compilationString += `\r\n            // grab coord derivatives for texturing\r\n            vec3 ${dpdx} = dFdx(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${dpdy} = dFdy(${this.position.associatedVariableName}.xyz);\r\n            vec3 ${n} = abs(${this.normal.associatedVariableName}.xyz);\r\n        \r\n            // determine major axis (in x; yz are following axis)\r\n            ivec3 ${ma} = (${n}.x>${n}.y && ${n}.x>${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y>${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine minor axis (in x; yz are following axis)\r\n            ivec3 ${mi} = (${n}.x<${n}.y && ${n}.x<${n}.z) ? ivec3(0,1,2) :\r\n                    (${n}.y<${n}.z)            ? ivec3(1,2,0) :\r\n                                            ivec3(2,0,1) ;\r\n            // determine median axis (in x;  yz are following axis)\r\n            ivec3 ${me} = ivec3(3) - ${mi} - ${ma};\r\n            \r\n            // project+fetch\r\n            vec4 ${x} = textureGrad( ${samplerName}, vec2(   ${this.position.associatedVariableName}[${ma}.y],   ${this.position.associatedVariableName}[${ma}.z]), \r\n                                    vec2(${dpdx}[${ma}.y],${dpdx}[${ma}.z]), \r\n                                    vec2(${dpdy}[${ma}.y],${dpdy}[${ma}.z]) );\r\n            vec4 ${y} = textureGrad( ${samplerYName}, vec2(   ${this.position.associatedVariableName}[${me}.y],   ${this.position.associatedVariableName}[${me}.z]), \r\n                                    vec2(${dpdx}[${me}.y],${dpdx}[${me}.z]),\r\n                                    vec2(${dpdy}[${me}.y],${dpdy}[${me}.z]) );\r\n            \r\n            // blend factors\r\n            vec2 ${w} = vec2(${n}[${ma}.x],${n}[${me}.x]);\r\n            // make local support\r\n            ${w} = clamp( (${w}-0.5773)/(1.0-0.5773), 0.0, 1.0 );\r\n            // shape transition\r\n            ${w} = pow( ${w}, vec2(${sharpness}/8.0) );\r\n            // blend and return\r\n            vec4 ${this._tempTextureRead} = (${x}*${w}.x + ${y}*${w}.y) / (${w}.x + ${w}.y);\r\n        `;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BiPlanarBlock\", BiPlanarBlock);\r\n"]}