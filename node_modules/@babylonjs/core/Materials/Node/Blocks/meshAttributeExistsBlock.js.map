{"version":3,"file":"meshAttributeExistsBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/meshAttributeExistsBlock.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,qCAAqC,EAAE,MAAM,gDAAgD,CAAC;AAGvG,OAAO,EAAE,wBAAwB,EAAE,MAAM,mCAAmC,CAAC;AAC7E,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAC/D,OAAO,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAC;AAGnG,MAAM,CAAN,IAAY,6BAWX;AAXD,WAAY,6BAA6B;IACrC,iFAAI,CAAA;IACJ,qFAAM,CAAA;IACN,uFAAO,CAAA;IACP,+FAAW,CAAA;IACX,+EAAG,CAAA;IACH,+EAAG,CAAA;IACH,+EAAG,CAAA;IACH,+EAAG,CAAA;IACH,+EAAG,CAAA;IACH,+EAAG,CAAA;AACP,CAAC,EAXW,6BAA6B,KAA7B,6BAA6B,QAWxC;AAED;;;GAGG;AACH,MAAM,OAAO,wBAAyB,SAAQ,iBAAiB;IAC3D;;;OAGG;IACH,YAAmB,IAAY;QAC3B,KAAK,CAAC,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAsElD;;WAEG;QAgBI,kBAAa,GAAG,6BAA6B,CAAC,IAAI,CAAC;QAtFtD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,qCAAqC,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,qCAAqC,CAAC,UAAU,CAAC,CAAC;QACjF,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,qCAAqC,CAAC,YAAY,CAAC,CAAC;QAElF,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhC,sCAAsC;QACtC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;YACjD,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,oCAAoC;gBACpC,OAAO;aACV;YACD,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC;YACrC,IAAI,WAAW,YAAY,UAAU,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC9D,QAAQ,WAAW,CAAC,IAAI,EAAE;oBACtB,KAAK,OAAO;wBACR,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,WAAW,CAAC;wBAC/D,MAAM;oBACV,KAAK,QAAQ;wBACT,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,MAAM,CAAC;wBAC1D,MAAM;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,OAAO,CAAC;wBAC3D,MAAM;oBACV,KAAK,IAAI;wBACL,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;oBACV,KAAK,KAAK;wBACN,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;oBACV,KAAK,KAAK;wBACN,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;oBACV,KAAK,KAAK;wBACN,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;oBACV,KAAK,KAAK;wBACN,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;oBACV,KAAK,KAAK;wBACN,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;iBACb;aACJ;iBAAM,IAAI,WAAW,YAAY,iBAAiB,EAAE;gBACjD,QAAQ,MAAA,IAAI,CAAC,KAAK,CAAC,cAAc,0CAAE,IAAI,EAAE;oBACrC,KAAK,cAAc;wBACf,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,MAAM,CAAC;wBAC1D,MAAM;oBACV,KAAK,eAAe;wBAChB,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,OAAO,CAAC;wBAC3D,MAAM;oBACV,KAAK,UAAU;wBACX,IAAI,CAAC,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC;wBACvD,MAAM;iBACb;aACJ;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,YAAY;QACf,OAAO,0BAA0B,CAAC;IACtC,CAAC;IAsBD;;OAEG;IACH,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IAES,WAAW,CAAC,KAA6B;QAC/C,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,eAAe,GAAkB,IAAI,CAAC;QAC1C,QAAQ,IAAI,CAAC,aAAa,EAAE;YACxB,KAAK,6BAA6B,CAAC,WAAW;gBAC1C,eAAe,GAAG,iBAAiB,CAAC;gBACpC,MAAM;YACV,KAAK,6BAA6B,CAAC,MAAM;gBACrC,eAAe,GAAG,QAAQ,CAAC;gBAC3B,MAAM;YACV,KAAK,6BAA6B,CAAC,OAAO;gBACtC,eAAe,GAAG,SAAS,CAAC;gBAC5B,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,6BAA6B,CAAC,GAAG;gBAClC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;SACb;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,eAAe,EAAE;YACjB,KAAK,CAAC,iBAAiB,IAAI,UAAU,eAAe,IAAI,CAAC;SAC5D;QAED,KAAK,CAAC,iBAAiB,IAAI,GAAG,MAAM,MAAM,IAAI,CAAC,KAAK,CAAC,sBAAsB,KAAK,CAAC;QAEjF,IAAI,eAAe,EAAE;YACjB,KAAK,CAAC,iBAAiB,IAAI,SAAS,CAAC;YACrC,KAAK,CAAC,iBAAiB,IAAI,GAAG,MAAM,MAAM,IAAI,CAAC,QAAQ,CAAC,sBAAsB,KAAK,CAAC;YACpF,KAAK,CAAC,iBAAiB,IAAI,UAAU,CAAC;SACzC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,SAAS;QACZ,MAAM,mBAAmB,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAE9C,mBAAmB,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAEvD,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAEM,YAAY,CAAC,mBAAwB,EAAE,KAAY,EAAE,OAAe;;QACvE,KAAK,CAAC,YAAY,CAAC,mBAAmB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAExD,IAAI,CAAC,aAAa,GAAG,MAAA,mBAAmB,CAAC,aAAa,mCAAI,6BAA6B,CAAC,IAAI,CAAC;IACjG,CAAC;IAES,mBAAmB;QACzB,IAAI,UAAU,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;QAE7C,UAAU,IAAI,GAAG,IAAI,CAAC,iBAAiB,oBAAoB,IAAI,CAAC,aAAa,KAAK,CAAC;QAEnF,OAAO,UAAU,CAAC;IACtB,CAAC;CACJ;AA7FU;IAfN,sBAAsB,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,IAAI,EAAE,SAAS,EAAE;QAChF,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;QAC3B,OAAO,EAAE;YACL,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,6BAA6B,CAAC,IAAI,EAAE;YAC9D,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,6BAA6B,CAAC,MAAM,EAAE;YAChE,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,6BAA6B,CAAC,OAAO,EAAE;YAClE,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,6BAA6B,CAAC,WAAW,EAAE;YAC3E,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;YAC1D,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;YAC1D,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;YAC1D,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;YAC1D,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;YAC1D,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,CAAC,GAAG,EAAE;SAC7D;KACJ,CAAC;+DACwD;AA+F9D,aAAa,CAAC,kCAAkC,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\nimport { MorphTargetsBlock } from \"./Vertex/morphTargetsBlock\";\r\nimport { PropertyTypeForEdition, editableInPropertyPage } from \"../../../Decorators/nodeDecorator\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nexport enum MeshAttributeExistsBlockTypes {\r\n    None,\r\n    Normal,\r\n    Tangent,\r\n    VertexColor,\r\n    UV1,\r\n    UV2,\r\n    UV3,\r\n    UV4,\r\n    UV5,\r\n    UV6,\r\n}\r\n\r\n/**\r\n * Block used to check if Mesh attribute of specified type exists\r\n * and provide an alternative fallback input for to use in such case\r\n */\r\nexport class MeshAttributeExistsBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new MeshAttributeExistsBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"fallback\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1);\r\n\r\n        // Try to auto determine attributeType\r\n        this._inputs[0].onConnectionObservable.add((other) => {\r\n            if (this.attributeType) {\r\n                // But only if not already specified\r\n                return;\r\n            }\r\n            const sourceBlock = other.ownerBlock;\r\n            if (sourceBlock instanceof InputBlock && sourceBlock.isAttribute) {\r\n                switch (sourceBlock.name) {\r\n                    case \"color\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.VertexColor;\r\n                        break;\r\n                    case \"normal\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Normal;\r\n                        break;\r\n                    case \"tangent\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\r\n                        break;\r\n                    case \"uv\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV1;\r\n                        break;\r\n                    case \"uv2\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV2;\r\n                        break;\r\n                    case \"uv3\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV3;\r\n                        break;\r\n                    case \"uv4\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV4;\r\n                        break;\r\n                    case \"uv5\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV5;\r\n                        break;\r\n                    case \"uv6\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV6;\r\n                        break;\r\n                }\r\n            } else if (sourceBlock instanceof MorphTargetsBlock) {\r\n                switch (this.input.connectedPoint?.name) {\r\n                    case \"normalOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Normal;\r\n                        break;\r\n                    case \"tangentOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.Tangent;\r\n                        break;\r\n                    case \"uvOutput\":\r\n                        this.attributeType = MeshAttributeExistsBlockTypes.UV1;\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"MeshAttributeExistsBlock\";\r\n    }\r\n\r\n    /**\r\n     * Defines which mesh attribute to use\r\n     */\r\n    @editableInPropertyPage(\"Attribute lookup\", PropertyTypeForEdition.List, undefined, {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"(None)\", value: MeshAttributeExistsBlockTypes.None },\r\n            { label: \"Normal\", value: MeshAttributeExistsBlockTypes.Normal },\r\n            { label: \"Tangent\", value: MeshAttributeExistsBlockTypes.Tangent },\r\n            { label: \"Vertex Color\", value: MeshAttributeExistsBlockTypes.VertexColor },\r\n            { label: \"UV1\", value: MeshAttributeExistsBlockTypes.UV1 },\r\n            { label: \"UV2\", value: MeshAttributeExistsBlockTypes.UV2 },\r\n            { label: \"UV3\", value: MeshAttributeExistsBlockTypes.UV3 },\r\n            { label: \"UV4\", value: MeshAttributeExistsBlockTypes.UV4 },\r\n            { label: \"UV5\", value: MeshAttributeExistsBlockTypes.UV5 },\r\n            { label: \"UV6\", value: MeshAttributeExistsBlockTypes.UV6 },\r\n        ],\r\n    })\r\n    public attributeType = MeshAttributeExistsBlockTypes.None;\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the fallback component when speciefied attribute doesn't exist\r\n     */\r\n    public get fallback(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let attributeDefine: null | string = null;\r\n        switch (this.attributeType) {\r\n            case MeshAttributeExistsBlockTypes.VertexColor:\r\n                attributeDefine = \"VERTEXCOLOR_NME\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.Normal:\r\n                attributeDefine = \"NORMAL\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.Tangent:\r\n                attributeDefine = \"TANGENT\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV1:\r\n                attributeDefine = \"UV1\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV2:\r\n                attributeDefine = \"UV2\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV3:\r\n                attributeDefine = \"UV3\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV4:\r\n                attributeDefine = \"UV4\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV5:\r\n                attributeDefine = \"UV5\";\r\n                break;\r\n            case MeshAttributeExistsBlockTypes.UV6:\r\n                attributeDefine = \"UV6\";\r\n                break;\r\n        }\r\n\r\n        const output = this._declareOutput(this.output, state);\r\n        if (attributeDefine) {\r\n            state.compilationString += `#ifdef ${attributeDefine}\\n`;\r\n        }\r\n\r\n        state.compilationString += `${output} = ${this.input.associatedVariableName};\\n`;\r\n\r\n        if (attributeDefine) {\r\n            state.compilationString += `#else\\n`;\r\n            state.compilationString += `${output} = ${this.fallback.associatedVariableName};\\n`;\r\n            state.compilationString += `#endif\\n`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.attributeType = this.attributeType;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.attributeType = serializationObject.attributeType ?? MeshAttributeExistsBlockTypes.None;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.attributeType = ${this.attributeType};\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MeshAttributeExistsBlock\", MeshAttributeExistsBlock);\r\n"]}