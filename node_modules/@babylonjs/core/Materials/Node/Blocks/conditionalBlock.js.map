{"version":3,"file":"conditionalBlock.js","sourceRoot":"","sources":["../../../../../../dev/core/src/Materials/Node/Blocks/conditionalBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the ConditionalBlock block\r\n */\r\nexport enum ConditionalBlockConditions {\r\n    /** Equal */\r\n    Equal,\r\n    /** NotEqual */\r\n    NotEqual,\r\n    /** LessThan */\r\n    LessThan,\r\n    /** GreaterThan */\r\n    GreaterThan,\r\n    /** LessOrEqual */\r\n    LessOrEqual,\r\n    /** GreaterOrEqual */\r\n    GreaterOrEqual,\r\n    /** Logical Exclusive OR */\r\n    Xor,\r\n    /** Logical Or */\r\n    Or,\r\n    /** Logical And */\r\n    And,\r\n}\r\n\r\n/**\r\n * Block used to apply conditional operation between floats\r\n * @since 5.0.0\r\n */\r\nexport class ConditionalBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the condition applied by the block\r\n     */\r\n    public condition = ConditionalBlockConditions.LessThan;\r\n\r\n    /**\r\n     * Creates a new ConditionalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._linkConnectionTypes(2, 3);\r\n        this._outputs[0]._typeConnectionSource = this._inputs[2];\r\n        this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ConditionalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first operand component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second operand component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is true\r\n     */\r\n    public get true(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is false\r\n     */\r\n    public get false(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        const trueStatement = this.true.isConnected ? this.true.associatedVariableName : \"1.0\";\r\n        const falseStatement = this.false.isConnected ? this.false.associatedVariableName : \"0.0\";\r\n\r\n        switch (this.condition) {\r\n            case ConditionalBlockConditions.Equal: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} == ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.NotEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} != ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} < ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} <= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} > ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} >= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Xor: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (mod(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 2.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Or: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (min(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 1.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.And: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (${this.a.associatedVariableName} * ${this.b.associatedVariableName} > 0.0)  ? ${trueStatement} : ${falseStatement};\\n`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.condition = this.condition;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.condition = serializationObject.condition;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.condition = BABYLON.ConditionalBlockConditions.${ConditionalBlockConditions[this.condition]};\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);\r\n"]}