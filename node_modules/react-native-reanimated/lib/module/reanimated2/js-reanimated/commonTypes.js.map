{"version":3,"names":[],"sources":["commonTypes.ts"],"sourcesContent":["import type { Timestamp, NestedObjectValues } from '../commonTypes';\nimport type MutableValue from './MutableValue';\n\ninterface Mapper<T> {\n  MAPPER_ID?: number;\n  id: number;\n  inputs: MutableValue<T>[];\n  outputs: MutableValue<T>[];\n  mapper: () => void;\n  dirty: boolean;\n  execute(): void;\n  extractMutablesFromArray<T>(\n    array: NestedObjectValues<MutableValue<T>>\n  ): MutableValue<T>[];\n}\n\ninterface MapperRegistry<T> {\n  sortedMappers: Mapper<T>[];\n  mappers: Map<number, Mapper<T>>;\n  _module: JSReanimated;\n  updatedSinceLastExecute: boolean;\n  startMapper(mapper: Mapper<T>): number;\n  stopMapper(id: number): void;\n  execute(): void;\n  updateOrder(): void;\n}\n\ninterface JSReanimated {\n  _valueSetter?: <T>(value: T) => void;\n  _renderRequested: boolean;\n  _mapperRegistry: MapperRegistry<any>;\n  _frames: ((timestamp: Timestamp) => void)[];\n  timeProvider: { now: () => number };\n  pushFrame(frame: (timestamp: Timestamp) => void): void;\n  maybeRequestRender(): void;\n  _onRender(timestampMs: number): void;\n  makeShareable<T>(value: T): T;\n  makeMutable<T>(value: T): MutableValue<T>;\n  makeRemote<T>(object: Record<string, any>): T;\n  startMapper(\n    mapper: () => void,\n    inputs: NestedObjectValues<MutableValue<unknown>>[],\n    outputs: NestedObjectValues<MutableValue<unknown>>[]\n  ): number;\n  stopMapper(mapperId: number): void;\n  registerEventHandler<T>(\n    eventHandler: (event: T) => void,\n    eventName: string,\n    emitterReactTag: number\n  ): string;\n  unregisterEventHandler(_: string): void;\n  enableLayoutAnimations(): void;\n}\n"],"mappings":""}