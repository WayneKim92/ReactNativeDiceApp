{"version":3,"names":["useCallback","useAnimatedStyle","shouldBeUseWeb","useAnimatedProps","updater","deps","adapters","useWorkletCallback","fun","useEvent","useHandler"],"sources":["Hooks.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useAnimatedStyle } from './useAnimatedStyle';\nimport type { DependencyList } from './commonTypes';\nimport type {\n  AnimatedPropsAdapterFunction,\n  useAnimatedPropsType,\n} from '../helperTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n// when you need styles to animated you should always use useAS\n// TODO TYPESCRIPT This is a temporary cast to get rid of .d.ts file.\n\nexport let useAnimatedProps: useAnimatedPropsType;\n\nif (shouldBeUseWeb()) {\n  useAnimatedProps = function <T extends object>(\n    updater: () => Partial<T>,\n    deps?: DependencyList | null,\n    adapters?:\n      | AnimatedPropsAdapterFunction\n      | AnimatedPropsAdapterFunction[]\n      | null\n  ) {\n    return (useAnimatedStyle as useAnimatedPropsType)(\n      updater,\n      deps,\n      adapters,\n      true\n    );\n  };\n} else {\n  useAnimatedProps = useAnimatedStyle as useAnimatedPropsType;\n}\n\nexport function useWorkletCallback<A extends unknown[], R>(\n  fun: (...args: A) => R,\n  deps?: DependencyList\n): (...args: Parameters<typeof fun>) => R {\n  return useCallback(fun, deps ?? []);\n}\n\nexport { useEvent, useHandler } from './utils';\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,gBAAgB,QAAQ,oBAAoB;AAMrD,SAASC,cAAc,QAAQ,oBAAoB;;AAEnD;AACA;AACA;;AAEA,OAAO,IAAIC,gBAAsC;AAEjD,IAAID,cAAc,EAAE,EAAE;EACpBC,gBAAgB,GAAG,SAAAA,CACjBC,OAAyB,EACzBC,IAA4B,EAC5BC,QAGQ,EACR;IACA,OAAQL,gBAAgB,CACtBG,OAAO,EACPC,IAAI,EACJC,QAAQ,EACR,IAAI,CACL;EACH,CAAC;AACH,CAAC,MAAM;EACLH,gBAAgB,GAAGF,gBAAwC;AAC7D;AAEA,OAAO,SAASM,kBAAkBA,CAChCC,GAAsB,EACtBH,IAAqB,EACmB;EACxC,OAAOL,WAAW,CAACQ,GAAG,EAAEH,IAAI,IAAI,EAAE,CAAC;AACrC;AAEA,SAASI,QAAQ,EAAEC,UAAU,QAAQ,SAAS"}